
TEMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002634  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002740  08002740  00012740  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002768  08002768  00012768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800276c  0800276c  0001276c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001ac  2000000c  0800277c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001b8  0800277c  000201b8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b1c5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003535  00000000  00000000  0003b1fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008c3a  00000000  00000000  0003e72f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000af0  00000000  00000000  00047370  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000fe0  00000000  00000000  00047e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007d76  00000000  00000000  00048e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004093  00000000  00000000  00050bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00054c49  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002080  00000000  00000000  00054cc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002728 	.word	0x08002728

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002728 	.word	0x08002728

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fa2c 	bl	80005c0 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f9e2 	bl	8000540 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f9bb 	bl	800051c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f002 f8b8 	bl	8002320 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_ADC_ConvCpltCallback>:
 80001dc:	4770      	bx	lr

080001de <HAL_ADC_LevelOutOfWindowCallback>:
 80001de:	4770      	bx	lr

080001e0 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80001e0:	6803      	ldr	r3, [r0, #0]
{
 80001e2:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80001e4:	685a      	ldr	r2, [r3, #4]
{
 80001e6:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80001e8:	0690      	lsls	r0, r2, #26
 80001ea:	d527      	bpl.n	800023c <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	0791      	lsls	r1, r2, #30
 80001f0:	d524      	bpl.n	800023c <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80001f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80001f4:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80001f6:	bf5e      	ittt	pl
 80001f8:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80001fa:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80001fe:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000200:	689a      	ldr	r2, [r3, #8]
 8000202:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000206:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800020a:	d110      	bne.n	800022e <HAL_ADC_IRQHandler+0x4e>
 800020c:	68e2      	ldr	r2, [r4, #12]
 800020e:	b972      	cbnz	r2, 800022e <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000210:	685a      	ldr	r2, [r3, #4]
 8000212:	f022 0220 	bic.w	r2, r2, #32
 8000216:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000218:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800021a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800021e:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000220:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000222:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000224:	bf5e      	ittt	pl
 8000226:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000228:	f043 0301 	orrpl.w	r3, r3, #1
 800022c:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 800022e:	4620      	mov	r0, r4
 8000230:	f7ff ffd4 	bl	80001dc <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000234:	f06f 0212 	mvn.w	r2, #18
 8000238:	6823      	ldr	r3, [r4, #0]
 800023a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800023c:	6823      	ldr	r3, [r4, #0]
 800023e:	685a      	ldr	r2, [r3, #4]
 8000240:	0610      	lsls	r0, r2, #24
 8000242:	d530      	bpl.n	80002a6 <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	0751      	lsls	r1, r2, #29
 8000248:	d52d      	bpl.n	80002a6 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800024a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800024c:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800024e:	bf5e      	ittt	pl
 8000250:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000252:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000256:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000258:	689a      	ldr	r2, [r3, #8]
 800025a:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 800025e:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000262:	d00a      	beq.n	800027a <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000264:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000266:	0550      	lsls	r0, r2, #21
 8000268:	d416      	bmi.n	8000298 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800026a:	689a      	ldr	r2, [r3, #8]
 800026c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000270:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000274:	d110      	bne.n	8000298 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000276:	68e2      	ldr	r2, [r4, #12]
 8000278:	b972      	cbnz	r2, 8000298 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800027a:	685a      	ldr	r2, [r3, #4]
 800027c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000280:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000282:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000288:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800028a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800028c:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800028e:	bf5e      	ittt	pl
 8000290:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000292:	f043 0301 	orrpl.w	r3, r3, #1
 8000296:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000298:	4620      	mov	r0, r4
 800029a:	f000 f93d 	bl	8000518 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800029e:	f06f 020c 	mvn.w	r2, #12
 80002a2:	6823      	ldr	r3, [r4, #0]
 80002a4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80002a6:	6823      	ldr	r3, [r4, #0]
 80002a8:	685a      	ldr	r2, [r3, #4]
 80002aa:	0652      	lsls	r2, r2, #25
 80002ac:	d50d      	bpl.n	80002ca <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	07db      	lsls	r3, r3, #31
 80002b2:	d50a      	bpl.n	80002ca <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80002b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80002b6:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80002b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002bc:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80002be:	f7ff ff8e 	bl	80001de <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80002c2:	f06f 0201 	mvn.w	r2, #1
 80002c6:	6823      	ldr	r3, [r4, #0]
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	bd10      	pop	{r4, pc}

080002cc <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80002cc:	2300      	movs	r3, #0
{ 
 80002ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80002d0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80002d2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d074      	beq.n	80003c4 <HAL_ADC_ConfigChannel+0xf8>
 80002da:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80002dc:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80002de:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80002e2:	2d06      	cmp	r5, #6
 80002e4:	6802      	ldr	r2, [r0, #0]
 80002e6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80002ea:	680c      	ldr	r4, [r1, #0]
 80002ec:	d825      	bhi.n	800033a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80002ee:	442b      	add	r3, r5
 80002f0:	251f      	movs	r5, #31
 80002f2:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80002f4:	3b05      	subs	r3, #5
 80002f6:	409d      	lsls	r5, r3
 80002f8:	ea26 0505 	bic.w	r5, r6, r5
 80002fc:	fa04 f303 	lsl.w	r3, r4, r3
 8000300:	432b      	orrs	r3, r5
 8000302:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000304:	2c09      	cmp	r4, #9
 8000306:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800030a:	688d      	ldr	r5, [r1, #8]
 800030c:	d92f      	bls.n	800036e <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800030e:	2607      	movs	r6, #7
 8000310:	4423      	add	r3, r4
 8000312:	68d1      	ldr	r1, [r2, #12]
 8000314:	3b1e      	subs	r3, #30
 8000316:	409e      	lsls	r6, r3
 8000318:	ea21 0106 	bic.w	r1, r1, r6
 800031c:	fa05 f303 	lsl.w	r3, r5, r3
 8000320:	430b      	orrs	r3, r1
 8000322:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000324:	f1a4 0310 	sub.w	r3, r4, #16
 8000328:	2b01      	cmp	r3, #1
 800032a:	d92b      	bls.n	8000384 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800032c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800032e:	2200      	movs	r2, #0
 8000330:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000334:	4618      	mov	r0, r3
 8000336:	b002      	add	sp, #8
 8000338:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800033a:	2d0c      	cmp	r5, #12
 800033c:	d80b      	bhi.n	8000356 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800033e:	442b      	add	r3, r5
 8000340:	251f      	movs	r5, #31
 8000342:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000344:	3b23      	subs	r3, #35	; 0x23
 8000346:	409d      	lsls	r5, r3
 8000348:	ea26 0505 	bic.w	r5, r6, r5
 800034c:	fa04 f303 	lsl.w	r3, r4, r3
 8000350:	432b      	orrs	r3, r5
 8000352:	6313      	str	r3, [r2, #48]	; 0x30
 8000354:	e7d6      	b.n	8000304 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000356:	442b      	add	r3, r5
 8000358:	251f      	movs	r5, #31
 800035a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800035c:	3b41      	subs	r3, #65	; 0x41
 800035e:	409d      	lsls	r5, r3
 8000360:	ea26 0505 	bic.w	r5, r6, r5
 8000364:	fa04 f303 	lsl.w	r3, r4, r3
 8000368:	432b      	orrs	r3, r5
 800036a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800036c:	e7ca      	b.n	8000304 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800036e:	2607      	movs	r6, #7
 8000370:	6911      	ldr	r1, [r2, #16]
 8000372:	4423      	add	r3, r4
 8000374:	409e      	lsls	r6, r3
 8000376:	ea21 0106 	bic.w	r1, r1, r6
 800037a:	fa05 f303 	lsl.w	r3, r5, r3
 800037e:	430b      	orrs	r3, r1
 8000380:	6113      	str	r3, [r2, #16]
 8000382:	e7cf      	b.n	8000324 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <HAL_ADC_ConfigChannel+0xfc>)
 8000386:	429a      	cmp	r2, r3
 8000388:	d116      	bne.n	80003b8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800038a:	6893      	ldr	r3, [r2, #8]
 800038c:	021b      	lsls	r3, r3, #8
 800038e:	d4cd      	bmi.n	800032c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000390:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000392:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000398:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800039a:	d1c7      	bne.n	800032c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800039c:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <HAL_ADC_ConfigChannel+0x100>)
 800039e:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <HAL_ADC_ConfigChannel+0x104>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80003a6:	230a      	movs	r3, #10
 80003a8:	4353      	muls	r3, r2
            wait_loop_index--;
 80003aa:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80003ac:	9b01      	ldr	r3, [sp, #4]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0bc      	beq.n	800032c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80003b2:	9b01      	ldr	r3, [sp, #4]
 80003b4:	3b01      	subs	r3, #1
 80003b6:	e7f8      	b.n	80003aa <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80003ba:	f043 0320 	orr.w	r3, r3, #32
 80003be:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80003c0:	2301      	movs	r3, #1
 80003c2:	e7b4      	b.n	800032e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80003c4:	2302      	movs	r3, #2
 80003c6:	e7b5      	b.n	8000334 <HAL_ADC_ConfigChannel+0x68>
 80003c8:	40012400 	.word	0x40012400
 80003cc:	20000008 	.word	0x20000008
 80003d0:	000f4240 	.word	0x000f4240

080003d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80003d4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80003d6:	6803      	ldr	r3, [r0, #0]
{
 80003d8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80003da:	689a      	ldr	r2, [r3, #8]
 80003dc:	07d2      	lsls	r2, r2, #31
 80003de:	d401      	bmi.n	80003e4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80003e0:	2000      	movs	r0, #0
 80003e2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80003e4:	689a      	ldr	r2, [r3, #8]
 80003e6:	f022 0201 	bic.w	r2, r2, #1
 80003ea:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80003ec:	f7ff fef0 	bl	80001d0 <HAL_GetTick>
 80003f0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80003f2:	6823      	ldr	r3, [r4, #0]
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	07db      	lsls	r3, r3, #31
 80003f8:	d5f2      	bpl.n	80003e0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80003fa:	f7ff fee9 	bl	80001d0 <HAL_GetTick>
 80003fe:	1b40      	subs	r0, r0, r5
 8000400:	2802      	cmp	r0, #2
 8000402:	d9f6      	bls.n	80003f2 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000404:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000406:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000408:	f043 0310 	orr.w	r3, r3, #16
 800040c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800040e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000416:	bd38      	pop	{r3, r4, r5, pc}

08000418 <HAL_ADC_Init>:
{
 8000418:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800041a:	4604      	mov	r4, r0
 800041c:	2800      	cmp	r0, #0
 800041e:	d071      	beq.n	8000504 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000420:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000422:	b923      	cbnz	r3, 800042e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000424:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000426:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800042a:	f001 fe09 	bl	8002040 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800042e:	4620      	mov	r0, r4
 8000430:	f7ff ffd0 	bl	80003d4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000434:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000436:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800043a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800043c:	d164      	bne.n	8000508 <HAL_ADC_Init+0xf0>
 800043e:	2800      	cmp	r0, #0
 8000440:	d162      	bne.n	8000508 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000442:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000444:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000448:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800044a:	f023 0302 	bic.w	r3, r3, #2
 800044e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000452:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000454:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000456:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000458:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800045a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800045e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000462:	d038      	beq.n	80004d6 <HAL_ADC_Init+0xbe>
 8000464:	2901      	cmp	r1, #1
 8000466:	bf14      	ite	ne
 8000468:	4606      	movne	r6, r0
 800046a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800046e:	6965      	ldr	r5, [r4, #20]
 8000470:	2d01      	cmp	r5, #1
 8000472:	d107      	bne.n	8000484 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000474:	2b00      	cmp	r3, #0
 8000476:	d130      	bne.n	80004da <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000478:	69a3      	ldr	r3, [r4, #24]
 800047a:	3b01      	subs	r3, #1
 800047c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000480:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000484:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000486:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800048a:	685d      	ldr	r5, [r3, #4]
 800048c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000490:	ea45 0506 	orr.w	r5, r5, r6
 8000494:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000496:	689e      	ldr	r6, [r3, #8]
 8000498:	4d1d      	ldr	r5, [pc, #116]	; (8000510 <HAL_ADC_Init+0xf8>)
 800049a:	ea05 0506 	and.w	r5, r5, r6
 800049e:	ea45 0502 	orr.w	r5, r5, r2
 80004a2:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80004a4:	d001      	beq.n	80004aa <HAL_ADC_Init+0x92>
 80004a6:	2901      	cmp	r1, #1
 80004a8:	d120      	bne.n	80004ec <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80004aa:	6921      	ldr	r1, [r4, #16]
 80004ac:	3901      	subs	r1, #1
 80004ae:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80004b0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80004b2:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80004b6:	4329      	orrs	r1, r5
 80004b8:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80004ba:	6899      	ldr	r1, [r3, #8]
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <HAL_ADC_Init+0xfc>)
 80004be:	400b      	ands	r3, r1
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d115      	bne.n	80004f0 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80004c4:	2300      	movs	r3, #0
 80004c6:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80004c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004ca:	f023 0303 	bic.w	r3, r3, #3
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80004d6:	460e      	mov	r6, r1
 80004d8:	e7c9      	b.n	800046e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004dc:	f043 0320 	orr.w	r3, r3, #32
 80004e0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80004ea:	e7cb      	b.n	8000484 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80004ec:	2100      	movs	r1, #0
 80004ee:	e7df      	b.n	80004b0 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80004f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004f2:	f023 0312 	bic.w	r3, r3, #18
 80004f6:	f043 0310 	orr.w	r3, r3, #16
 80004fa:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000504:	2001      	movs	r0, #1
}
 8000506:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000508:	f043 0310 	orr.w	r3, r3, #16
 800050c:	62a3      	str	r3, [r4, #40]	; 0x28
 800050e:	e7f9      	b.n	8000504 <HAL_ADC_Init+0xec>
 8000510:	ffe1f7fd 	.word	0xffe1f7fd
 8000514:	ff1f0efe 	.word	0xff1f0efe

08000518 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000518:	4770      	bx	lr
	...

0800051c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800051e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000520:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000522:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000526:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800052a:	041b      	lsls	r3, r3, #16
 800052c:	0c1b      	lsrs	r3, r3, #16
 800052e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000536:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000538:	60d3      	str	r3, [r2, #12]
 800053a:	4770      	bx	lr
 800053c:	e000ed00 	.word	0xe000ed00

08000540 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000540:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	68dc      	ldr	r4, [r3, #12]
 8000546:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800054a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800054e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000550:	2b04      	cmp	r3, #4
 8000552:	bf28      	it	cs
 8000554:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000556:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000558:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800055c:	bf98      	it	ls
 800055e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000560:	fa05 f303 	lsl.w	r3, r5, r3
 8000564:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000568:	bf88      	it	hi
 800056a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800056c:	4019      	ands	r1, r3
 800056e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000570:	fa05 f404 	lsl.w	r4, r5, r4
 8000574:	3c01      	subs	r4, #1
 8000576:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000578:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800057a:	ea42 0201 	orr.w	r2, r2, r1
 800057e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000582:	bfaf      	iteee	ge
 8000584:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000588:	4b06      	ldrlt	r3, [pc, #24]	; (80005a4 <HAL_NVIC_SetPriority+0x64>)
 800058a:	f000 000f 	andlt.w	r0, r0, #15
 800058e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000590:	bfa5      	ittet	ge
 8000592:	b2d2      	uxtbge	r2, r2
 8000594:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000598:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800059e:	bd30      	pop	{r4, r5, pc}
 80005a0:	e000ed00 	.word	0xe000ed00
 80005a4:	e000ed14 	.word	0xe000ed14

080005a8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005a8:	2301      	movs	r3, #1
 80005aa:	0942      	lsrs	r2, r0, #5
 80005ac:	f000 001f 	and.w	r0, r0, #31
 80005b0:	fa03 f000 	lsl.w	r0, r3, r0
 80005b4:	4b01      	ldr	r3, [pc, #4]	; (80005bc <HAL_NVIC_EnableIRQ+0x14>)
 80005b6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005ba:	4770      	bx	lr
 80005bc:	e000e100 	.word	0xe000e100

080005c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005c0:	3801      	subs	r0, #1
 80005c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005c6:	d20a      	bcs.n	80005de <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ce:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005d4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005d6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005d8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005de:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	e000e010 	.word	0xe000e010
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80005ec:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80005ee:	b330      	cbz	r0, 800063e <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80005f0:	2214      	movs	r2, #20
 80005f2:	6801      	ldr	r1, [r0, #0]
 80005f4:	4b13      	ldr	r3, [pc, #76]	; (8000644 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80005f6:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80005f8:	440b      	add	r3, r1
 80005fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8000604:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000606:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000608:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800060a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 800060e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000610:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000612:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000616:	4323      	orrs	r3, r4
 8000618:	6904      	ldr	r4, [r0, #16]
 800061a:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800061c:	6944      	ldr	r4, [r0, #20]
 800061e:	4323      	orrs	r3, r4
 8000620:	6984      	ldr	r4, [r0, #24]
 8000622:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000624:	69c4      	ldr	r4, [r0, #28]
 8000626:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000628:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800062a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800062c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800062e:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000630:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000634:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000636:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800063a:	4618      	mov	r0, r3
 800063c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800063e:	2001      	movs	r0, #1
}
 8000640:	bd10      	pop	{r4, pc}
 8000642:	bf00      	nop
 8000644:	bffdfff8 	.word	0xbffdfff8
 8000648:	40020000 	.word	0x40020000

0800064c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800064c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000650:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000652:	2b02      	cmp	r3, #2
 8000654:	d003      	beq.n	800065e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000656:	2304      	movs	r3, #4
 8000658:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800065a:	2001      	movs	r0, #1
 800065c:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800065e:	6803      	ldr	r3, [r0, #0]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	f022 020e 	bic.w	r2, r2, #14
 8000666:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	f022 0201 	bic.w	r2, r2, #1
 800066e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000670:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <HAL_DMA_Abort_IT+0x88>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d01f      	beq.n	80006b6 <HAL_DMA_Abort_IT+0x6a>
 8000676:	3214      	adds	r2, #20
 8000678:	4293      	cmp	r3, r2
 800067a:	d01e      	beq.n	80006ba <HAL_DMA_Abort_IT+0x6e>
 800067c:	3214      	adds	r2, #20
 800067e:	4293      	cmp	r3, r2
 8000680:	d01d      	beq.n	80006be <HAL_DMA_Abort_IT+0x72>
 8000682:	3214      	adds	r2, #20
 8000684:	4293      	cmp	r3, r2
 8000686:	d01d      	beq.n	80006c4 <HAL_DMA_Abort_IT+0x78>
 8000688:	3214      	adds	r2, #20
 800068a:	4293      	cmp	r3, r2
 800068c:	d01d      	beq.n	80006ca <HAL_DMA_Abort_IT+0x7e>
 800068e:	3214      	adds	r2, #20
 8000690:	4293      	cmp	r3, r2
 8000692:	bf0c      	ite	eq
 8000694:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000698:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800069c:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800069e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80006a0:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80006a2:	2301      	movs	r3, #1
 80006a4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80006a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80006aa:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80006ae:	b17b      	cbz	r3, 80006d0 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 80006b0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80006b2:	4620      	mov	r0, r4
 80006b4:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80006b6:	2301      	movs	r3, #1
 80006b8:	e7f0      	b.n	800069c <HAL_DMA_Abort_IT+0x50>
 80006ba:	2310      	movs	r3, #16
 80006bc:	e7ee      	b.n	800069c <HAL_DMA_Abort_IT+0x50>
 80006be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c2:	e7eb      	b.n	800069c <HAL_DMA_Abort_IT+0x50>
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	e7e8      	b.n	800069c <HAL_DMA_Abort_IT+0x50>
 80006ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ce:	e7e5      	b.n	800069c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80006d0:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80006d2:	bd10      	pop	{r4, pc}
 80006d4:	40020008 	.word	0x40020008
 80006d8:	40020000 	.word	0x40020000

080006dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80006dc:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80006de:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80006e0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80006e2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80006e4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80006e6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80006e8:	4095      	lsls	r5, r2
 80006ea:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80006ec:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80006ee:	d032      	beq.n	8000756 <HAL_DMA_IRQHandler+0x7a>
 80006f0:	074d      	lsls	r5, r1, #29
 80006f2:	d530      	bpl.n	8000756 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80006f8:	bf5e      	ittt	pl
 80006fa:	681a      	ldrpl	r2, [r3, #0]
 80006fc:	f022 0204 	bicpl.w	r2, r2, #4
 8000700:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000702:	4a3e      	ldr	r2, [pc, #248]	; (80007fc <HAL_DMA_IRQHandler+0x120>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d019      	beq.n	800073c <HAL_DMA_IRQHandler+0x60>
 8000708:	3214      	adds	r2, #20
 800070a:	4293      	cmp	r3, r2
 800070c:	d018      	beq.n	8000740 <HAL_DMA_IRQHandler+0x64>
 800070e:	3214      	adds	r2, #20
 8000710:	4293      	cmp	r3, r2
 8000712:	d017      	beq.n	8000744 <HAL_DMA_IRQHandler+0x68>
 8000714:	3214      	adds	r2, #20
 8000716:	4293      	cmp	r3, r2
 8000718:	d017      	beq.n	800074a <HAL_DMA_IRQHandler+0x6e>
 800071a:	3214      	adds	r2, #20
 800071c:	4293      	cmp	r3, r2
 800071e:	d017      	beq.n	8000750 <HAL_DMA_IRQHandler+0x74>
 8000720:	3214      	adds	r2, #20
 8000722:	4293      	cmp	r3, r2
 8000724:	bf0c      	ite	eq
 8000726:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800072a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800072e:	4a34      	ldr	r2, [pc, #208]	; (8000800 <HAL_DMA_IRQHandler+0x124>)
 8000730:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000732:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8000734:	2b00      	cmp	r3, #0
 8000736:	d05e      	beq.n	80007f6 <HAL_DMA_IRQHandler+0x11a>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8000738:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800073a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800073c:	2304      	movs	r3, #4
 800073e:	e7f6      	b.n	800072e <HAL_DMA_IRQHandler+0x52>
 8000740:	2340      	movs	r3, #64	; 0x40
 8000742:	e7f4      	b.n	800072e <HAL_DMA_IRQHandler+0x52>
 8000744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000748:	e7f1      	b.n	800072e <HAL_DMA_IRQHandler+0x52>
 800074a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800074e:	e7ee      	b.n	800072e <HAL_DMA_IRQHandler+0x52>
 8000750:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000754:	e7eb      	b.n	800072e <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000756:	2502      	movs	r5, #2
 8000758:	4095      	lsls	r5, r2
 800075a:	4225      	tst	r5, r4
 800075c:	d035      	beq.n	80007ca <HAL_DMA_IRQHandler+0xee>
 800075e:	078d      	lsls	r5, r1, #30
 8000760:	d533      	bpl.n	80007ca <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	0694      	lsls	r4, r2, #26
 8000766:	d406      	bmi.n	8000776 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	f022 020a 	bic.w	r2, r2, #10
 800076e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000770:	2201      	movs	r2, #1
 8000772:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000776:	4a21      	ldr	r2, [pc, #132]	; (80007fc <HAL_DMA_IRQHandler+0x120>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d019      	beq.n	80007b0 <HAL_DMA_IRQHandler+0xd4>
 800077c:	3214      	adds	r2, #20
 800077e:	4293      	cmp	r3, r2
 8000780:	d018      	beq.n	80007b4 <HAL_DMA_IRQHandler+0xd8>
 8000782:	3214      	adds	r2, #20
 8000784:	4293      	cmp	r3, r2
 8000786:	d017      	beq.n	80007b8 <HAL_DMA_IRQHandler+0xdc>
 8000788:	3214      	adds	r2, #20
 800078a:	4293      	cmp	r3, r2
 800078c:	d017      	beq.n	80007be <HAL_DMA_IRQHandler+0xe2>
 800078e:	3214      	adds	r2, #20
 8000790:	4293      	cmp	r3, r2
 8000792:	d017      	beq.n	80007c4 <HAL_DMA_IRQHandler+0xe8>
 8000794:	3214      	adds	r2, #20
 8000796:	4293      	cmp	r3, r2
 8000798:	bf0c      	ite	eq
 800079a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800079e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80007a2:	4a17      	ldr	r2, [pc, #92]	; (8000800 <HAL_DMA_IRQHandler+0x124>)
 80007a4:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80007a6:	2300      	movs	r3, #0
 80007a8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80007ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80007ae:	e7c1      	b.n	8000734 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80007b0:	2302      	movs	r3, #2
 80007b2:	e7f6      	b.n	80007a2 <HAL_DMA_IRQHandler+0xc6>
 80007b4:	2320      	movs	r3, #32
 80007b6:	e7f4      	b.n	80007a2 <HAL_DMA_IRQHandler+0xc6>
 80007b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007bc:	e7f1      	b.n	80007a2 <HAL_DMA_IRQHandler+0xc6>
 80007be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c2:	e7ee      	b.n	80007a2 <HAL_DMA_IRQHandler+0xc6>
 80007c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007c8:	e7eb      	b.n	80007a2 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80007ca:	2508      	movs	r5, #8
 80007cc:	4095      	lsls	r5, r2
 80007ce:	4225      	tst	r5, r4
 80007d0:	d011      	beq.n	80007f6 <HAL_DMA_IRQHandler+0x11a>
 80007d2:	0709      	lsls	r1, r1, #28
 80007d4:	d50f      	bpl.n	80007f6 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007d6:	6819      	ldr	r1, [r3, #0]
 80007d8:	f021 010e 	bic.w	r1, r1, #14
 80007dc:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007de:	2301      	movs	r3, #1
 80007e0:	fa03 f202 	lsl.w	r2, r3, r2
 80007e4:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80007e6:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80007e8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80007ec:	2300      	movs	r3, #0
 80007ee:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80007f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80007f4:	e79e      	b.n	8000734 <HAL_DMA_IRQHandler+0x58>
}
 80007f6:	bc70      	pop	{r4, r5, r6}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40020008 	.word	0x40020008
 8000800:	40020000 	.word	0x40020000

08000804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000808:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800080a:	4616      	mov	r6, r2
 800080c:	4b65      	ldr	r3, [pc, #404]	; (80009a4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800080e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80009b4 <HAL_GPIO_Init+0x1b0>
 8000812:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80009b8 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000816:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800081a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800081c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000820:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000824:	45a0      	cmp	r8, r4
 8000826:	d17f      	bne.n	8000928 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000828:	684d      	ldr	r5, [r1, #4]
 800082a:	2d12      	cmp	r5, #18
 800082c:	f000 80af 	beq.w	800098e <HAL_GPIO_Init+0x18a>
 8000830:	f200 8088 	bhi.w	8000944 <HAL_GPIO_Init+0x140>
 8000834:	2d02      	cmp	r5, #2
 8000836:	f000 80a7 	beq.w	8000988 <HAL_GPIO_Init+0x184>
 800083a:	d87c      	bhi.n	8000936 <HAL_GPIO_Init+0x132>
 800083c:	2d00      	cmp	r5, #0
 800083e:	f000 808e 	beq.w	800095e <HAL_GPIO_Init+0x15a>
 8000842:	2d01      	cmp	r5, #1
 8000844:	f000 809e 	beq.w	8000984 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000848:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800084c:	2cff      	cmp	r4, #255	; 0xff
 800084e:	bf93      	iteet	ls
 8000850:	4682      	movls	sl, r0
 8000852:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000856:	3d08      	subhi	r5, #8
 8000858:	f8d0 b000 	ldrls.w	fp, [r0]
 800085c:	bf92      	itee	ls
 800085e:	00b5      	lslls	r5, r6, #2
 8000860:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000864:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000866:	fa09 f805 	lsl.w	r8, r9, r5
 800086a:	ea2b 0808 	bic.w	r8, fp, r8
 800086e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000872:	bf88      	it	hi
 8000874:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000878:	ea48 0505 	orr.w	r5, r8, r5
 800087c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000880:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000884:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000888:	d04e      	beq.n	8000928 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800088a:	4d47      	ldr	r5, [pc, #284]	; (80009a8 <HAL_GPIO_Init+0x1a4>)
 800088c:	4f46      	ldr	r7, [pc, #280]	; (80009a8 <HAL_GPIO_Init+0x1a4>)
 800088e:	69ad      	ldr	r5, [r5, #24]
 8000890:	f026 0803 	bic.w	r8, r6, #3
 8000894:	f045 0501 	orr.w	r5, r5, #1
 8000898:	61bd      	str	r5, [r7, #24]
 800089a:	69bd      	ldr	r5, [r7, #24]
 800089c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80008a0:	f005 0501 	and.w	r5, r5, #1
 80008a4:	9501      	str	r5, [sp, #4]
 80008a6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80008aa:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008ae:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80008b0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80008b4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80008b8:	fa09 f90b 	lsl.w	r9, r9, fp
 80008bc:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008c0:	4d3a      	ldr	r5, [pc, #232]	; (80009ac <HAL_GPIO_Init+0x1a8>)
 80008c2:	42a8      	cmp	r0, r5
 80008c4:	d068      	beq.n	8000998 <HAL_GPIO_Init+0x194>
 80008c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008ca:	42a8      	cmp	r0, r5
 80008cc:	d066      	beq.n	800099c <HAL_GPIO_Init+0x198>
 80008ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008d2:	42a8      	cmp	r0, r5
 80008d4:	d064      	beq.n	80009a0 <HAL_GPIO_Init+0x19c>
 80008d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008da:	42a8      	cmp	r0, r5
 80008dc:	bf0c      	ite	eq
 80008de:	2503      	moveq	r5, #3
 80008e0:	2504      	movne	r5, #4
 80008e2:	fa05 f50b 	lsl.w	r5, r5, fp
 80008e6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80008ea:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008ee:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008f0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80008f4:	bf14      	ite	ne
 80008f6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008f8:	43a5      	biceq	r5, r4
 80008fa:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008fc:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008fe:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000902:	bf14      	ite	ne
 8000904:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000906:	43a5      	biceq	r5, r4
 8000908:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800090a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800090c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000910:	bf14      	ite	ne
 8000912:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000914:	43a5      	biceq	r5, r4
 8000916:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000918:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800091a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800091e:	bf14      	ite	ne
 8000920:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000922:	ea25 0404 	biceq.w	r4, r5, r4
 8000926:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000928:	3601      	adds	r6, #1
 800092a:	2e10      	cmp	r6, #16
 800092c:	f47f af73 	bne.w	8000816 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000930:	b003      	add	sp, #12
 8000932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000936:	2d03      	cmp	r5, #3
 8000938:	d022      	beq.n	8000980 <HAL_GPIO_Init+0x17c>
 800093a:	2d11      	cmp	r5, #17
 800093c:	d184      	bne.n	8000848 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800093e:	68ca      	ldr	r2, [r1, #12]
 8000940:	3204      	adds	r2, #4
          break;
 8000942:	e781      	b.n	8000848 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000944:	4f1a      	ldr	r7, [pc, #104]	; (80009b0 <HAL_GPIO_Init+0x1ac>)
 8000946:	42bd      	cmp	r5, r7
 8000948:	d009      	beq.n	800095e <HAL_GPIO_Init+0x15a>
 800094a:	d812      	bhi.n	8000972 <HAL_GPIO_Init+0x16e>
 800094c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80009bc <HAL_GPIO_Init+0x1b8>
 8000950:	454d      	cmp	r5, r9
 8000952:	d004      	beq.n	800095e <HAL_GPIO_Init+0x15a>
 8000954:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000958:	454d      	cmp	r5, r9
 800095a:	f47f af75 	bne.w	8000848 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800095e:	688a      	ldr	r2, [r1, #8]
 8000960:	b1c2      	cbz	r2, 8000994 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000962:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000964:	bf0c      	ite	eq
 8000966:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800096a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800096e:	2208      	movs	r2, #8
 8000970:	e76a      	b.n	8000848 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000972:	4575      	cmp	r5, lr
 8000974:	d0f3      	beq.n	800095e <HAL_GPIO_Init+0x15a>
 8000976:	4565      	cmp	r5, ip
 8000978:	d0f1      	beq.n	800095e <HAL_GPIO_Init+0x15a>
 800097a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80009c0 <HAL_GPIO_Init+0x1bc>
 800097e:	e7eb      	b.n	8000958 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000980:	2200      	movs	r2, #0
 8000982:	e761      	b.n	8000848 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000984:	68ca      	ldr	r2, [r1, #12]
          break;
 8000986:	e75f      	b.n	8000848 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000988:	68ca      	ldr	r2, [r1, #12]
 800098a:	3208      	adds	r2, #8
          break;
 800098c:	e75c      	b.n	8000848 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800098e:	68ca      	ldr	r2, [r1, #12]
 8000990:	320c      	adds	r2, #12
          break;
 8000992:	e759      	b.n	8000848 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000994:	2204      	movs	r2, #4
 8000996:	e757      	b.n	8000848 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000998:	2500      	movs	r5, #0
 800099a:	e7a2      	b.n	80008e2 <HAL_GPIO_Init+0xde>
 800099c:	2501      	movs	r5, #1
 800099e:	e7a0      	b.n	80008e2 <HAL_GPIO_Init+0xde>
 80009a0:	2502      	movs	r5, #2
 80009a2:	e79e      	b.n	80008e2 <HAL_GPIO_Init+0xde>
 80009a4:	40010400 	.word	0x40010400
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800
 80009b0:	10210000 	.word	0x10210000
 80009b4:	10310000 	.word	0x10310000
 80009b8:	10320000 	.word	0x10320000
 80009bc:	10110000 	.word	0x10110000
 80009c0:	10220000 	.word	0x10220000

080009c4 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80009c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80009c6:	4604      	mov	r4, r0
 80009c8:	b908      	cbnz	r0, 80009ce <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80009ca:	2001      	movs	r0, #1
 80009cc:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80009ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80009d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009d6:	b91b      	cbnz	r3, 80009e0 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80009d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80009dc:	f001 fbf8 	bl	80021d0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80009e0:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80009e2:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80009e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80009e8:	6813      	ldr	r3, [r2, #0]
 80009ea:	f023 0301 	bic.w	r3, r3, #1
 80009ee:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80009f0:	f000 ffae 	bl	8001950 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80009f4:	6863      	ldr	r3, [r4, #4]
 80009f6:	4a2f      	ldr	r2, [pc, #188]	; (8000ab4 <HAL_I2C_Init+0xf0>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d830      	bhi.n	8000a5e <HAL_I2C_Init+0x9a>
 80009fc:	4a2e      	ldr	r2, [pc, #184]	; (8000ab8 <HAL_I2C_Init+0xf4>)
 80009fe:	4290      	cmp	r0, r2
 8000a00:	d9e3      	bls.n	80009ca <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000a02:	4a2e      	ldr	r2, [pc, #184]	; (8000abc <HAL_I2C_Init+0xf8>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000a04:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000a06:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8000a0a:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000a0c:	3201      	adds	r2, #1
 8000a0e:	620a      	str	r2, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000a10:	4a28      	ldr	r2, [pc, #160]	; (8000ab4 <HAL_I2C_Init+0xf0>)
 8000a12:	3801      	subs	r0, #1
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d832      	bhi.n	8000a7e <HAL_I2C_Init+0xba>
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a1e:	1c43      	adds	r3, r0, #1
 8000a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	bf38      	it	cc
 8000a28:	2304      	movcc	r3, #4
 8000a2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a2c:	6a22      	ldr	r2, [r4, #32]
 8000a2e:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a30:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a32:	4313      	orrs	r3, r2
 8000a34:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000a36:	68e2      	ldr	r2, [r4, #12]
 8000a38:	6923      	ldr	r3, [r4, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000a3e:	69a2      	ldr	r2, [r4, #24]
 8000a40:	6963      	ldr	r3, [r4, #20]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000a46:	680b      	ldr	r3, [r1, #0]
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000a4e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a50:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000a52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a56:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a58:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000a5c:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000a5e:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <HAL_I2C_Init+0xfc>)
 8000a60:	4290      	cmp	r0, r2
 8000a62:	d9b2      	bls.n	80009ca <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000a64:	4d15      	ldr	r5, [pc, #84]	; (8000abc <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000a66:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000a6a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8000a6e:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000a70:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8000a72:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000a74:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000a78:	fbb2 f2f5 	udiv	r2, r2, r5
 8000a7c:	e7c6      	b.n	8000a0c <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000a7e:	68a2      	ldr	r2, [r4, #8]
 8000a80:	b952      	cbnz	r2, 8000a98 <HAL_I2C_Init+0xd4>
 8000a82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000a86:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a8a:	1c43      	adds	r3, r0, #1
 8000a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a90:	b16b      	cbz	r3, 8000aae <HAL_I2C_Init+0xea>
 8000a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a96:	e7c8      	b.n	8000a2a <HAL_I2C_Init+0x66>
 8000a98:	2219      	movs	r2, #25
 8000a9a:	4353      	muls	r3, r2
 8000a9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000aa0:	1c43      	adds	r3, r0, #1
 8000aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000aa6:	b113      	cbz	r3, 8000aae <HAL_I2C_Init+0xea>
 8000aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aac:	e7bd      	b.n	8000a2a <HAL_I2C_Init+0x66>
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e7bb      	b.n	8000a2a <HAL_I2C_Init+0x66>
 8000ab2:	bf00      	nop
 8000ab4:	000186a0 	.word	0x000186a0
 8000ab8:	001e847f 	.word	0x001e847f
 8000abc:	000f4240 	.word	0x000f4240
 8000ac0:	003d08ff 	.word	0x003d08ff

08000ac4 <HAL_I2C_MasterTxCpltCallback>:
 8000ac4:	4770      	bx	lr

08000ac6 <HAL_I2C_MasterRxCpltCallback>:
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_I2C_SlaveTxCpltCallback>:
 8000ac8:	4770      	bx	lr

08000aca <HAL_I2C_SlaveRxCpltCallback>:
 8000aca:	4770      	bx	lr

08000acc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000acc:	4770      	bx	lr

08000ace <HAL_I2C_ListenCpltCallback>:
 8000ace:	4770      	bx	lr

08000ad0 <HAL_I2C_MemTxCpltCallback>:
 8000ad0:	4770      	bx	lr

08000ad2 <HAL_I2C_MemRxCpltCallback>:
 8000ad2:	4770      	bx	lr

08000ad4 <HAL_I2C_ErrorCallback>:
 8000ad4:	4770      	bx	lr

08000ad6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000ad6:	4770      	bx	lr

08000ad8 <I2C_ITError>:
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8000ad8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8000adc:	b510      	push	{r4, lr}

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8000ade:	3b29      	subs	r3, #41	; 0x29
 8000ae0:	2b01      	cmp	r3, #1
{
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	6803      	ldr	r3, [r0, #0]
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8000ae6:	d839      	bhi.n	8000b5c <I2C_ITError+0x84>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8000aec:	2228      	movs	r2, #40	; 0x28
 8000aee:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->Mode = HAL_I2C_MODE_NONE;
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000af8:	601a      	str	r2, [r3, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8000b00:	d054      	beq.n	8000bac <I2C_ITError+0xd4>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8000b02:	685a      	ldr	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8000b04:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8000b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b0a:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8000b0c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	4b39      	ldr	r3, [pc, #228]	; (8000bf8 <I2C_ITError+0x120>)
 8000b14:	d031      	beq.n	8000b7a <I2C_ITError+0xa2>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000b16:	6343      	str	r3, [r0, #52]	; 0x34

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8000b18:	f7ff fd98 	bl	800064c <HAL_DMA_Abort_IT>
 8000b1c:	b150      	cbz	r0, 8000b34 <I2C_ITError+0x5c>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8000b1e:	6822      	ldr	r2, [r4, #0]

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8000b20:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8000b22:	6813      	ldr	r3, [r2, #0]
 8000b24:	f023 0301 	bic.w	r3, r3, #1
 8000b28:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8000b2a:	2320      	movs	r3, #32
 8000b2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_I2C_DISABLE(hi2c);

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000b30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000b32:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8000b34:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000b38:	2b28      	cmp	r3, #40	; 0x28
 8000b3a:	d10e      	bne.n	8000b5a <I2C_ITError+0x82>
 8000b3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b3e:	075b      	lsls	r3, r3, #29
 8000b40:	d50b      	bpl.n	8000b5a <I2C_ITError+0x82>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000b42:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <I2C_ITError+0x124>)
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State = HAL_I2C_STATE_READY;
 8000b44:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000b46:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8000b48:	2300      	movs	r3, #0
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8000b4a:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8000b4c:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8000b4e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8000b56:	f7ff ffba 	bl	8000ace <HAL_I2C_ListenCpltCallback>
 8000b5a:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8000b5c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8000b60:	2a60      	cmp	r2, #96	; 0x60
 8000b62:	d005      	beq.n	8000b70 <I2C_ITError+0x98>
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 8000b68:	bf5c      	itt	pl
 8000b6a:	2220      	movpl	r2, #32
 8000b6c:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8000b70:	2200      	movs	r2, #0
 8000b72:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b74:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8000b78:	e7bb      	b.n	8000af2 <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000b7a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000b7c:	6343      	str	r3, [r0, #52]	; 0x34
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8000b7e:	f7ff fd65 	bl	800064c <HAL_DMA_Abort_IT>
 8000b82:	2800      	cmp	r0, #0
 8000b84:	d0d6      	beq.n	8000b34 <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000b86:	6822      	ldr	r2, [r4, #0]
 8000b88:	6953      	ldr	r3, [r2, #20]
 8000b8a:	0658      	lsls	r0, r3, #25
 8000b8c:	d504      	bpl.n	8000b98 <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b90:	6912      	ldr	r2, [r2, #16]
 8000b92:	1c59      	adds	r1, r3, #1
 8000b94:	6261      	str	r1, [r4, #36]	; 0x24
 8000b96:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 8000b98:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000b9a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8000b9c:	6813      	ldr	r3, [r2, #0]
 8000b9e:	f023 0301 	bic.w	r3, r3, #1
 8000ba2:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8000ba4:	2320      	movs	r3, #32
 8000ba6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8000baa:	e7c1      	b.n	8000b30 <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8000bac:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8000bb0:	2960      	cmp	r1, #96	; 0x60
 8000bb2:	d114      	bne.n	8000bde <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8000bb4:	2120      	movs	r1, #32
 8000bb6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bba:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000bbc:	695a      	ldr	r2, [r3, #20]
 8000bbe:	0651      	lsls	r1, r2, #25
 8000bc0:	d504      	bpl.n	8000bcc <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000bc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	1c51      	adds	r1, r2, #1
 8000bc8:	6261      	str	r1, [r4, #36]	; 0x24
 8000bca:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000bcc:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8000bce:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8000bd0:	6813      	ldr	r3, [r2, #0]
 8000bd2:	f023 0301 	bic.w	r3, r3, #1
 8000bd6:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8000bd8:	f7ff ff7d 	bl	8000ad6 <HAL_I2C_AbortCpltCallback>
 8000bdc:	e7aa      	b.n	8000b34 <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000bde:	695a      	ldr	r2, [r3, #20]
 8000be0:	0652      	lsls	r2, r2, #25
 8000be2:	d504      	bpl.n	8000bee <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000be4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	1c51      	adds	r1, r2, #1
 8000bea:	6261      	str	r1, [r4, #36]	; 0x24
 8000bec:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f7ff ff70 	bl	8000ad4 <HAL_I2C_ErrorCallback>
 8000bf4:	e79e      	b.n	8000b34 <I2C_ITError+0x5c>
 8000bf6:	bf00      	nop
 8000bf8:	08001411 	.word	0x08001411
 8000bfc:	ffff0000 	.word	0xffff0000

08000c00 <HAL_I2C_EV_IRQHandler>:
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8000c00:	6803      	ldr	r3, [r0, #0]
{
 8000c02:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8000c04:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8000c06:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8000c08:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 8000c0a:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
{
 8000c0e:	b08d      	sub	sp, #52	; 0x34
  uint32_t CurrentMode  = hi2c->Mode;
 8000c10:	b2e4      	uxtb	r4, r4
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8000c12:	2c10      	cmp	r4, #16
 8000c14:	d002      	beq.n	8000c1c <HAL_I2C_EV_IRQHandler+0x1c>
 8000c16:	2c40      	cmp	r4, #64	; 0x40
 8000c18:	f040 8256 	bne.w	80010c8 <HAL_I2C_EV_IRQHandler+0x4c8>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8000c1c:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 8000c20:	d066      	beq.n	8000cf0 <HAL_I2C_EV_IRQHandler+0xf0>
 8000c22:	0597      	lsls	r7, r2, #22
 8000c24:	d564      	bpl.n	8000cf0 <HAL_I2C_EV_IRQHandler+0xf0>
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8000c26:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8000c2a:	2c40      	cmp	r4, #64	; 0x40
 8000c2c:	d143      	bne.n	8000cb6 <HAL_I2C_EV_IRQHandler+0xb6>
    if(hi2c->EventCount == 0U)
 8000c2e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d13b      	bne.n	8000cac <HAL_I2C_EV_IRQHandler+0xac>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000c34:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000c36:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8000c3a:	611c      	str	r4, [r3, #16]
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8000c3c:	4e94      	ldr	r6, [pc, #592]	; (8000e90 <HAL_I2C_EV_IRQHandler+0x290>)
 8000c3e:	4c95      	ldr	r4, [pc, #596]	; (8000e94 <HAL_I2C_EV_IRQHandler+0x294>)
 8000c40:	402e      	ands	r6, r5
 8000c42:	400c      	ands	r4, r1
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	f000 81a2 	beq.w	8000f8e <HAL_I2C_EV_IRQHandler+0x38e>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8000c4a:	4d93      	ldr	r5, [pc, #588]	; (8000e98 <HAL_I2C_EV_IRQHandler+0x298>)
 8000c4c:	400d      	ands	r5, r1
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	f000 8169 	beq.w	8000f26 <HAL_I2C_EV_IRQHandler+0x326>
 8000c54:	0555      	lsls	r5, r2, #21
 8000c56:	f140 8166 	bpl.w	8000f26 <HAL_I2C_EV_IRQHandler+0x326>
 8000c5a:	2c00      	cmp	r4, #0
 8000c5c:	f040 8163 	bne.w	8000f26 <HAL_I2C_EV_IRQHandler+0x326>
  uint32_t CurrentState       = hi2c->State;
 8000c60:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8000c64:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  uint32_t CurrentMode        = hi2c->Mode;
 8000c66:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentState       = hi2c->State;
 8000c6a:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 8000c6c:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000c6e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	f040 8117 	bne.w	8000ea4 <HAL_I2C_EV_IRQHandler+0x2a4>
 8000c76:	2a21      	cmp	r2, #33	; 0x21
 8000c78:	f040 8116 	bne.w	8000ea8 <HAL_I2C_EV_IRQHandler+0x2a8>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8000c7c:	2c04      	cmp	r4, #4
 8000c7e:	f000 816f 	beq.w	8000f60 <HAL_I2C_EV_IRQHandler+0x360>
 8000c82:	2c08      	cmp	r4, #8
 8000c84:	f000 816c 	beq.w	8000f60 <HAL_I2C_EV_IRQHandler+0x360>
 8000c88:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8000c8c:	f000 8168 	beq.w	8000f60 <HAL_I2C_EV_IRQHandler+0x360>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000c96:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8000c98:	2311      	movs	r3, #17
 8000c9a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c9c:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8000ca0:	2320      	movs	r3, #32
 8000ca2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8000ca6:	f7ff ff0d 	bl	8000ac4 <HAL_I2C_MasterTxCpltCallback>
 8000caa:	e118      	b.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000cac:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000cae:	f044 0401 	orr.w	r4, r4, #1
 8000cb2:	b2e4      	uxtb	r4, r4
 8000cb4:	e7c1      	b.n	8000c3a <HAL_I2C_EV_IRQHandler+0x3a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000cb6:	6904      	ldr	r4, [r0, #16]
 8000cb8:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8000cbc:	d105      	bne.n	8000cca <HAL_I2C_EV_IRQHandler+0xca>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8000cbe:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8000cc2:	2c21      	cmp	r4, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000cc4:	6c44      	ldr	r4, [r0, #68]	; 0x44
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8000cc6:	d1f2      	bne.n	8000cae <HAL_I2C_EV_IRQHandler+0xae>
 8000cc8:	e7b5      	b.n	8000c36 <HAL_I2C_EV_IRQHandler+0x36>
      if(hi2c->EventCount == 0U)
 8000cca:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8000ccc:	b934      	cbnz	r4, 8000cdc <HAL_I2C_EV_IRQHandler+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8000cce:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000cd0:	11e4      	asrs	r4, r4, #7
 8000cd2:	f004 0406 	and.w	r4, r4, #6
 8000cd6:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 8000cda:	e7ae      	b.n	8000c3a <HAL_I2C_EV_IRQHandler+0x3a>
      else if(hi2c->EventCount == 1U)
 8000cdc:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8000cde:	2c01      	cmp	r4, #1
 8000ce0:	d1ac      	bne.n	8000c3c <HAL_I2C_EV_IRQHandler+0x3c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8000ce2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000ce4:	11e4      	asrs	r4, r4, #7
 8000ce6:	f004 0406 	and.w	r4, r4, #6
 8000cea:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 8000cee:	e7a4      	b.n	8000c3a <HAL_I2C_EV_IRQHandler+0x3a>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8000cf0:	4c6a      	ldr	r4, [pc, #424]	; (8000e9c <HAL_I2C_EV_IRQHandler+0x29c>)
 8000cf2:	400c      	ands	r4, r1
 8000cf4:	b11c      	cbz	r4, 8000cfe <HAL_I2C_EV_IRQHandler+0xfe>
 8000cf6:	0596      	lsls	r6, r2, #22
 8000cf8:	d501      	bpl.n	8000cfe <HAL_I2C_EV_IRQHandler+0xfe>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8000cfa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000cfc:	e7d9      	b.n	8000cb2 <HAL_I2C_EV_IRQHandler+0xb2>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8000cfe:	4c68      	ldr	r4, [pc, #416]	; (8000ea0 <HAL_I2C_EV_IRQHandler+0x2a0>)
 8000d00:	400c      	ands	r4, r1
 8000d02:	2c00      	cmp	r4, #0
 8000d04:	d09a      	beq.n	8000c3c <HAL_I2C_EV_IRQHandler+0x3c>
 8000d06:	0594      	lsls	r4, r2, #22
 8000d08:	d598      	bpl.n	8000c3c <HAL_I2C_EV_IRQHandler+0x3c>
  uint32_t CurrentMode        = hi2c->Mode;
 8000d0a:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000d0e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 8000d10:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000d14:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
  uint32_t CurrentMode        = hi2c->Mode;
 8000d18:	b2e4      	uxtb	r4, r4
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000d1a:	2f22      	cmp	r7, #34	; 0x22
 8000d1c:	f040 80af 	bne.w	8000e7e <HAL_I2C_EV_IRQHandler+0x27e>
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8000d20:	6d07      	ldr	r7, [r0, #80]	; 0x50
 8000d22:	b947      	cbnz	r7, 8000d36 <HAL_I2C_EV_IRQHandler+0x136>
 8000d24:	2c40      	cmp	r4, #64	; 0x40
 8000d26:	d106      	bne.n	8000d36 <HAL_I2C_EV_IRQHandler+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d28:	9700      	str	r7, [sp, #0]
 8000d2a:	695c      	ldr	r4, [r3, #20]
 8000d2c:	9400      	str	r4, [sp, #0]
 8000d2e:	699c      	ldr	r4, [r3, #24]
 8000d30:	9400      	str	r4, [sp, #0]
 8000d32:	9c00      	ldr	r4, [sp, #0]
 8000d34:	e782      	b.n	8000c3c <HAL_I2C_EV_IRQHandler+0x3c>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8000d36:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8000d38:	b98c      	cbnz	r4, 8000d5e <HAL_I2C_EV_IRQHandler+0x15e>
 8000d3a:	6907      	ldr	r7, [r0, #16]
 8000d3c:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 8000d40:	d10d      	bne.n	8000d5e <HAL_I2C_EV_IRQHandler+0x15e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d42:	9401      	str	r4, [sp, #4]
 8000d44:	695c      	ldr	r4, [r3, #20]
 8000d46:	9401      	str	r4, [sp, #4]
 8000d48:	699c      	ldr	r4, [r3, #24]
 8000d4a:	9401      	str	r4, [sp, #4]
 8000d4c:	9c01      	ldr	r4, [sp, #4]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000d4e:	681c      	ldr	r4, [r3, #0]
 8000d50:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8000d54:	601c      	str	r4, [r3, #0]
      hi2c->EventCount++;
 8000d56:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8000d58:	3401      	adds	r4, #1
      hi2c->EventCount = 0U;
 8000d5a:	6504      	str	r4, [r0, #80]	; 0x50
 8000d5c:	e76e      	b.n	8000c3c <HAL_I2C_EV_IRQHandler+0x3c>
      if(hi2c->XferCount == 0U)
 8000d5e:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8000d60:	b2a4      	uxth	r4, r4
 8000d62:	b954      	cbnz	r4, 8000d7a <HAL_I2C_EV_IRQHandler+0x17a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d64:	9402      	str	r4, [sp, #8]
 8000d66:	695c      	ldr	r4, [r3, #20]
 8000d68:	9402      	str	r4, [sp, #8]
 8000d6a:	699c      	ldr	r4, [r3, #24]
 8000d6c:	9402      	str	r4, [sp, #8]
 8000d6e:	9c02      	ldr	r4, [sp, #8]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000d70:	681c      	ldr	r4, [r3, #0]
 8000d72:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8000d76:	601c      	str	r4, [r3, #0]
 8000d78:	e019      	b.n	8000dae <HAL_I2C_EV_IRQHandler+0x1ae>
      else if(hi2c->XferCount == 1U)   
 8000d7a:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8000d7c:	b2a4      	uxth	r4, r4
 8000d7e:	2c01      	cmp	r4, #1
 8000d80:	d142      	bne.n	8000e08 <HAL_I2C_EV_IRQHandler+0x208>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8000d82:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8000d86:	d11b      	bne.n	8000dc0 <HAL_I2C_EV_IRQHandler+0x1c0>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000d88:	681c      	ldr	r4, [r3, #0]
 8000d8a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8000d8e:	601c      	str	r4, [r3, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8000d90:	685c      	ldr	r4, [r3, #4]
 8000d92:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8000d96:	d00c      	beq.n	8000db2 <HAL_I2C_EV_IRQHandler+0x1b2>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000d98:	681c      	ldr	r4, [r3, #0]
 8000d9a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8000d9e:	601c      	str	r4, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000da0:	2400      	movs	r4, #0
 8000da2:	9403      	str	r4, [sp, #12]
 8000da4:	695c      	ldr	r4, [r3, #20]
 8000da6:	9403      	str	r4, [sp, #12]
 8000da8:	699c      	ldr	r4, [r3, #24]
 8000daa:	9403      	str	r4, [sp, #12]
 8000dac:	9c03      	ldr	r4, [sp, #12]
      hi2c->EventCount = 0U;
 8000dae:	2400      	movs	r4, #0
 8000db0:	e7d3      	b.n	8000d5a <HAL_I2C_EV_IRQHandler+0x15a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000db2:	9404      	str	r4, [sp, #16]
 8000db4:	695c      	ldr	r4, [r3, #20]
 8000db6:	9404      	str	r4, [sp, #16]
 8000db8:	699c      	ldr	r4, [r3, #24]
 8000dba:	9404      	str	r4, [sp, #16]
 8000dbc:	9c04      	ldr	r4, [sp, #16]
 8000dbe:	e7d7      	b.n	8000d70 <HAL_I2C_EV_IRQHandler+0x170>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8000dc0:	2e04      	cmp	r6, #4
 8000dc2:	d015      	beq.n	8000df0 <HAL_I2C_EV_IRQHandler+0x1f0>
 8000dc4:	2e08      	cmp	r6, #8
 8000dc6:	d013      	beq.n	8000df0 <HAL_I2C_EV_IRQHandler+0x1f0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8000dc8:	f1be 0f12 	cmp.w	lr, #18
 8000dcc:	d010      	beq.n	8000df0 <HAL_I2C_EV_IRQHandler+0x1f0>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8000dce:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000dd0:	2c02      	cmp	r4, #2
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000dd2:	681c      	ldr	r4, [r3, #0]
 8000dd4:	bf14      	ite	ne
 8000dd6:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000dda:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 8000dde:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000de0:	2400      	movs	r4, #0
 8000de2:	9405      	str	r4, [sp, #20]
 8000de4:	695c      	ldr	r4, [r3, #20]
 8000de6:	9405      	str	r4, [sp, #20]
 8000de8:	699c      	ldr	r4, [r3, #24]
 8000dea:	9405      	str	r4, [sp, #20]
 8000dec:	9c05      	ldr	r4, [sp, #20]
 8000dee:	e7de      	b.n	8000dae <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000df0:	681c      	ldr	r4, [r3, #0]
 8000df2:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8000df6:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000df8:	2400      	movs	r4, #0
 8000dfa:	9406      	str	r4, [sp, #24]
 8000dfc:	695c      	ldr	r4, [r3, #20]
 8000dfe:	9406      	str	r4, [sp, #24]
 8000e00:	699c      	ldr	r4, [r3, #24]
 8000e02:	9406      	str	r4, [sp, #24]
 8000e04:	9c06      	ldr	r4, [sp, #24]
 8000e06:	e7b3      	b.n	8000d70 <HAL_I2C_EV_IRQHandler+0x170>
      else if(hi2c->XferCount == 2U)
 8000e08:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	2c02      	cmp	r4, #2
 8000e0e:	d123      	bne.n	8000e58 <HAL_I2C_EV_IRQHandler+0x258>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8000e10:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000e12:	2600      	movs	r6, #0
 8000e14:	2c02      	cmp	r4, #2
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8000e16:	681c      	ldr	r4, [r3, #0]
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8000e18:	d014      	beq.n	8000e44 <HAL_I2C_EV_IRQHandler+0x244>
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8000e1a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8000e1e:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e20:	9607      	str	r6, [sp, #28]
 8000e22:	695c      	ldr	r4, [r3, #20]
 8000e24:	9407      	str	r4, [sp, #28]
 8000e26:	699c      	ldr	r4, [r3, #24]
 8000e28:	9407      	str	r4, [sp, #28]
 8000e2a:	9c07      	ldr	r4, [sp, #28]
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000e2c:	681c      	ldr	r4, [r3, #0]
 8000e2e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8000e32:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8000e34:	685c      	ldr	r4, [r3, #4]
 8000e36:	0527      	lsls	r7, r4, #20
 8000e38:	d5b9      	bpl.n	8000dae <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8000e3a:	685c      	ldr	r4, [r3, #4]
 8000e3c:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 8000e40:	605c      	str	r4, [r3, #4]
 8000e42:	e7b4      	b.n	8000dae <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000e44:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8000e48:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e4a:	9608      	str	r6, [sp, #32]
 8000e4c:	695c      	ldr	r4, [r3, #20]
 8000e4e:	9408      	str	r4, [sp, #32]
 8000e50:	699c      	ldr	r4, [r3, #24]
 8000e52:	9408      	str	r4, [sp, #32]
 8000e54:	9c08      	ldr	r4, [sp, #32]
 8000e56:	e7ed      	b.n	8000e34 <HAL_I2C_EV_IRQHandler+0x234>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000e58:	681c      	ldr	r4, [r3, #0]
 8000e5a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8000e5e:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8000e60:	685c      	ldr	r4, [r3, #4]
 8000e62:	0526      	lsls	r6, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8000e64:	bf42      	ittt	mi
 8000e66:	685c      	ldrmi	r4, [r3, #4]
 8000e68:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8000e6c:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e6e:	2400      	movs	r4, #0
 8000e70:	9409      	str	r4, [sp, #36]	; 0x24
 8000e72:	695c      	ldr	r4, [r3, #20]
 8000e74:	9409      	str	r4, [sp, #36]	; 0x24
 8000e76:	699c      	ldr	r4, [r3, #24]
 8000e78:	9409      	str	r4, [sp, #36]	; 0x24
 8000e7a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8000e7c:	e797      	b.n	8000dae <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e7e:	2400      	movs	r4, #0
 8000e80:	940a      	str	r4, [sp, #40]	; 0x28
 8000e82:	695c      	ldr	r4, [r3, #20]
 8000e84:	940a      	str	r4, [sp, #40]	; 0x28
 8000e86:	699c      	ldr	r4, [r3, #24]
 8000e88:	940a      	str	r4, [sp, #40]	; 0x28
 8000e8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8000e8c:	e6d6      	b.n	8000c3c <HAL_I2C_EV_IRQHandler+0x3c>
 8000e8e:	bf00      	nop
 8000e90:	00100004 	.word	0x00100004
 8000e94:	00010004 	.word	0x00010004
 8000e98:	00010080 	.word	0x00010080
 8000e9c:	00010008 	.word	0x00010008
 8000ea0:	00010002 	.word	0x00010002
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8000ea4:	2a21      	cmp	r2, #33	; 0x21
 8000ea6:	d003      	beq.n	8000eb0 <HAL_I2C_EV_IRQHandler+0x2b0>
 8000ea8:	2940      	cmp	r1, #64	; 0x40
 8000eaa:	d118      	bne.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8000eac:	2a22      	cmp	r2, #34	; 0x22
 8000eae:	d116      	bne.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
    if(hi2c->XferCount == 0U)
 8000eb0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	b922      	cbnz	r2, 8000ec0 <HAL_I2C_EV_IRQHandler+0x2c0>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	e00e      	b.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8000ec0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8000ec4:	2a40      	cmp	r2, #64	; 0x40
 8000ec6:	d128      	bne.n	8000f1a <HAL_I2C_EV_IRQHandler+0x31a>
        if(hi2c->EventCount == 0)
 8000ec8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8000eca:	b982      	cbnz	r2, 8000eee <HAL_I2C_EV_IRQHandler+0x2ee>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8000ecc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8000ece:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000ed0:	6c82      	ldr	r2, [r0, #72]	; 0x48
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8000ed2:	d106      	bne.n	8000ee2 <HAL_I2C_EV_IRQHandler+0x2e2>
 8000ed4:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000ed6:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2;
 8000ed8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000eda:	3302      	adds	r3, #2
            hi2c->EventCount++;
 8000edc:	6503      	str	r3, [r0, #80]	; 0x50
}
 8000ede:	b00d      	add	sp, #52	; 0x34
 8000ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8000ee2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000ee6:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8000ee8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000eea:	3301      	adds	r3, #1
 8000eec:	e7f6      	b.n	8000edc <HAL_I2C_EV_IRQHandler+0x2dc>
        else if(hi2c->EventCount == 1)
 8000eee:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8000ef0:	2a01      	cmp	r2, #1
 8000ef2:	d102      	bne.n	8000efa <HAL_I2C_EV_IRQHandler+0x2fa>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000ef4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	e7f5      	b.n	8000ee6 <HAL_I2C_EV_IRQHandler+0x2e6>
        else if(hi2c->EventCount == 2)
 8000efa:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8000efc:	2a02      	cmp	r2, #2
 8000efe:	d1ee      	bne.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000f00:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8000f04:	2a22      	cmp	r2, #34	; 0x22
 8000f06:	d104      	bne.n	8000f12 <HAL_I2C_EV_IRQHandler+0x312>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	e7e5      	b.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8000f12:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8000f16:	2a21      	cmp	r2, #33	; 0x21
 8000f18:	d1e1      	bne.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000f1a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000f1c:	1c51      	adds	r1, r2, #1
 8000f1e:	6241      	str	r1, [r0, #36]	; 0x24
 8000f20:	7812      	ldrb	r2, [r2, #0]
 8000f22:	611a      	str	r2, [r3, #16]
 8000f24:	e099      	b.n	800105a <HAL_I2C_EV_IRQHandler+0x45a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8000f26:	2c00      	cmp	r4, #0
 8000f28:	d0d9      	beq.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
 8000f2a:	0594      	lsls	r4, r2, #22
 8000f2c:	d5d7      	bpl.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000f2e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8000f30:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8000f34:	2a21      	cmp	r2, #33	; 0x21
 8000f36:	d1d2      	bne.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
    if(hi2c->XferCount != 0U)
 8000f38:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8000f3a:	b292      	uxth	r2, r2
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d1ec      	bne.n	8000f1a <HAL_I2C_EV_IRQHandler+0x31a>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8000f40:	2904      	cmp	r1, #4
 8000f42:	d00d      	beq.n	8000f60 <HAL_I2C_EV_IRQHandler+0x360>
 8000f44:	2908      	cmp	r1, #8
 8000f46:	d00b      	beq.n	8000f60 <HAL_I2C_EV_IRQHandler+0x360>
 8000f48:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8000f4c:	d008      	beq.n	8000f60 <HAL_I2C_EV_IRQHandler+0x360>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000f4e:	6859      	ldr	r1, [r3, #4]
 8000f50:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8000f54:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8000f56:	2311      	movs	r3, #17
 8000f58:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f5a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 8000f5e:	e69f      	b.n	8000ca0 <HAL_I2C_EV_IRQHandler+0xa0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000f66:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f6e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f70:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8000f72:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f74:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8000f76:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8000f7a:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f7e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8000f82:	2a40      	cmp	r2, #64	; 0x40
 8000f84:	f47f ae8f 	bne.w	8000ca6 <HAL_I2C_EV_IRQHandler+0xa6>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8000f88:	f7ff fda2 	bl	8000ad0 <HAL_I2C_MemTxCpltCallback>
 8000f8c:	e7a7      	b.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8000f8e:	4d8f      	ldr	r5, [pc, #572]	; (80011cc <HAL_I2C_EV_IRQHandler+0x5cc>)
 8000f90:	400d      	ands	r5, r1
 8000f92:	2d00      	cmp	r5, #0
 8000f94:	d046      	beq.n	8001024 <HAL_I2C_EV_IRQHandler+0x424>
 8000f96:	0551      	lsls	r1, r2, #21
 8000f98:	d544      	bpl.n	8001024 <HAL_I2C_EV_IRQHandler+0x424>
 8000f9a:	2c00      	cmp	r4, #0
 8000f9c:	d142      	bne.n	8001024 <HAL_I2C_EV_IRQHandler+0x424>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000f9e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8000fa2:	2a22      	cmp	r2, #34	; 0x22
 8000fa4:	d19b      	bne.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
    tmp = hi2c->XferCount;
 8000fa6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8000fa8:	b292      	uxth	r2, r2
    if(tmp > 3U)
 8000faa:	2a03      	cmp	r2, #3
 8000fac:	d905      	bls.n	8000fba <HAL_I2C_EV_IRQHandler+0x3ba>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000fae:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	1c51      	adds	r1, r2, #1
 8000fb4:	6241      	str	r1, [r0, #36]	; 0x24
 8000fb6:	7013      	strb	r3, [r2, #0]
 8000fb8:	e04f      	b.n	800105a <HAL_I2C_EV_IRQHandler+0x45a>
    else if((tmp == 2U) || (tmp == 3U))
 8000fba:	3a02      	subs	r2, #2
 8000fbc:	2a01      	cmp	r2, #1
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8000fbe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    else if((tmp == 2U) || (tmp == 3U))
 8000fc0:	d80d      	bhi.n	8000fde <HAL_I2C_EV_IRQHandler+0x3de>
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8000fc2:	2a02      	cmp	r2, #2
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	bf1d      	ittte	ne
 8000fc8:	f422 6280 	bicne.w	r2, r2, #1024	; 0x400
 8000fcc:	601a      	strne	r2, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 8000fce:	681a      	ldrne	r2, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000fd0:	f442 6280 	orreq.w	r2, r2, #1024	; 0x400
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 8000fd4:	bf18      	it	ne
 8000fd6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	e76b      	b.n	8000eb6 <HAL_I2C_EV_IRQHandler+0x2b6>
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8000fde:	2a02      	cmp	r2, #2
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	bf14      	ite	ne
 8000fe4:	f422 6280 	bicne.w	r2, r2, #1024	; 0x400
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000fe8:	f442 6280 	orreq.w	r2, r2, #1024	; 0x400
 8000fec:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000ff4:	605a      	str	r2, [r3, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000ff6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	1c51      	adds	r1, r2, #1
 8000ffc:	6241      	str	r1, [r0, #36]	; 0x24
 8000ffe:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8001000:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001002:	3b01      	subs	r3, #1
 8001004:	b29b      	uxth	r3, r3
 8001006:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 8001008:	2320      	movs	r3, #32
 800100a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 800100e:	2300      	movs	r3, #0
 8001010:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001012:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001016:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800101a:	2a40      	cmp	r2, #64	; 0x40
 800101c:	d151      	bne.n	80010c2 <HAL_I2C_EV_IRQHandler+0x4c2>
      HAL_I2C_MemRxCpltCallback(hi2c);
 800101e:	f7ff fd58 	bl	8000ad2 <HAL_I2C_MemRxCpltCallback>
 8001022:	e75c      	b.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001024:	2c00      	cmp	r4, #0
 8001026:	f43f af5a 	beq.w	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
 800102a:	0597      	lsls	r7, r2, #22
 800102c:	f57f af57 	bpl.w	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001030:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 3U)
 8001032:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8001034:	b289      	uxth	r1, r1
 8001036:	2903      	cmp	r1, #3
 8001038:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800103a:	d113      	bne.n	8001064 <HAL_I2C_EV_IRQHandler+0x464>
    if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800103c:	2a04      	cmp	r2, #4
 800103e:	d004      	beq.n	800104a <HAL_I2C_EV_IRQHandler+0x44a>
 8001040:	2a08      	cmp	r2, #8
 8001042:	d002      	beq.n	800104a <HAL_I2C_EV_IRQHandler+0x44a>
 8001044:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001048:	d103      	bne.n	8001052 <HAL_I2C_EV_IRQHandler+0x452>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001050:	601a      	str	r2, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	1c4a      	adds	r2, r1, #1
 8001056:	6242      	str	r2, [r0, #36]	; 0x24
 8001058:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 800105a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800105c:	3b01      	subs	r3, #1
 800105e:	b29b      	uxth	r3, r3
 8001060:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8001062:	e73c      	b.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
  else if(hi2c->XferCount == 2U)
 8001064:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001066:	b2a4      	uxth	r4, r4
 8001068:	2c02      	cmp	r4, #2
 800106a:	d1f2      	bne.n	8001052 <HAL_I2C_EV_IRQHandler+0x452>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800106c:	2a04      	cmp	r2, #4
 800106e:	d01f      	beq.n	80010b0 <HAL_I2C_EV_IRQHandler+0x4b0>
 8001070:	2a08      	cmp	r2, #8
 8001072:	d01d      	beq.n	80010b0 <HAL_I2C_EV_IRQHandler+0x4b0>
 8001074:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001078:	d01a      	beq.n	80010b0 <HAL_I2C_EV_IRQHandler+0x4b0>
      if(CurrentXferOptions != I2C_NEXT_FRAME)
 800107a:	2a02      	cmp	r2, #2
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	bf14      	ite	ne
 8001080:	f422 6280 	bicne.w	r2, r2, #1024	; 0x400
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001084:	f442 6280 	orreq.w	r2, r2, #1024	; 0x400
 8001088:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001090:	605a      	str	r2, [r3, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	1c4a      	adds	r2, r1, #1
 8001096:	6242      	str	r2, [r0, #36]	; 0x24
 8001098:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 800109a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800109c:	3b01      	subs	r3, #1
 800109e:	b29b      	uxth	r3, r3
 80010a0:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80010a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	6242      	str	r2, [r0, #36]	; 0x24
 80010a8:	6802      	ldr	r2, [r0, #0]
 80010aa:	6912      	ldr	r2, [r2, #16]
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	e7a7      	b.n	8001000 <HAL_I2C_EV_IRQHandler+0x400>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80010b6:	605a      	str	r2, [r3, #4]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e7e7      	b.n	8001092 <HAL_I2C_EV_IRQHandler+0x492>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80010c2:	f7ff fd00 	bl	8000ac6 <HAL_I2C_MasterRxCpltCallback>
 80010c6:	e70a      	b.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80010c8:	4c41      	ldr	r4, [pc, #260]	; (80011d0 <HAL_I2C_EV_IRQHandler+0x5d0>)
 80010ca:	400c      	ands	r4, r1
 80010cc:	b174      	cbz	r4, 80010ec <HAL_I2C_EV_IRQHandler+0x4ec>
 80010ce:	0596      	lsls	r6, r2, #22
 80010d0:	d50c      	bpl.n	80010ec <HAL_I2C_EV_IRQHandler+0x4ec>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 80010d2:	6999      	ldr	r1, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 80010d4:	699b      	ldr	r3, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 80010d6:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 80010da:	061d      	lsls	r5, r3, #24
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80010dc:	f3c1 0180 	ubfx	r1, r1, #2, #1
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 80010e0:	bf54      	ite	pl
 80010e2:	8982      	ldrhpl	r2, [r0, #12]
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 80010e4:	8b02      	ldrhmi	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80010e6:	f7ff fcf1 	bl	8000acc <HAL_I2C_AddrCallback>
 80010ea:	e6f8      	b.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80010ec:	4c39      	ldr	r4, [pc, #228]	; (80011d4 <HAL_I2C_EV_IRQHandler+0x5d4>)
 80010ee:	400c      	ands	r4, r1
 80010f0:	2c00      	cmp	r4, #0
 80010f2:	d073      	beq.n	80011dc <HAL_I2C_EV_IRQHandler+0x5dc>
 80010f4:	0594      	lsls	r4, r2, #22
 80010f6:	d571      	bpl.n	80011dc <HAL_I2C_EV_IRQHandler+0x5dc>
  uint32_t CurrentState = hi2c->State;
 80010f8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80010fc:	6859      	ldr	r1, [r3, #4]
  uint32_t CurrentState = hi2c->State;
 80010fe:	b2d2      	uxtb	r2, r2
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001100:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8001104:	6059      	str	r1, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001106:	2100      	movs	r1, #0
 8001108:	910b      	str	r1, [sp, #44]	; 0x2c
 800110a:	6959      	ldr	r1, [r3, #20]
 800110c:	910b      	str	r1, [sp, #44]	; 0x2c
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	f041 0101 	orr.w	r1, r1, #1
 8001114:	6019      	str	r1, [r3, #0]
 8001116:	990b      	ldr	r1, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001118:	6819      	ldr	r1, [r3, #0]
 800111a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800111e:	6019      	str	r1, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001120:	6859      	ldr	r1, [r3, #4]
 8001122:	0509      	lsls	r1, r1, #20
 8001124:	d50c      	bpl.n	8001140 <HAL_I2C_EV_IRQHandler+0x540>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001126:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800112a:	2922      	cmp	r1, #34	; 0x22
 800112c:	d003      	beq.n	8001136 <HAL_I2C_EV_IRQHandler+0x536>
 800112e:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8001132:	292a      	cmp	r1, #42	; 0x2a
 8001134:	d129      	bne.n	800118a <HAL_I2C_EV_IRQHandler+0x58a>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001136:	6b81      	ldr	r1, [r0, #56]	; 0x38
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001138:	6809      	ldr	r1, [r1, #0]
 800113a:	6849      	ldr	r1, [r1, #4]
 800113c:	b289      	uxth	r1, r1
 800113e:	8541      	strh	r1, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 8001140:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8001142:	b289      	uxth	r1, r1
 8001144:	b1e1      	cbz	r1, 8001180 <HAL_I2C_EV_IRQHandler+0x580>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001146:	6959      	ldr	r1, [r3, #20]
 8001148:	074f      	lsls	r7, r1, #29
 800114a:	d508      	bpl.n	800115e <HAL_I2C_EV_IRQHandler+0x55e>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800114c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	1c4c      	adds	r4, r1, #1
 8001152:	6244      	str	r4, [r0, #36]	; 0x24
 8001154:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 8001156:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001158:	3b01      	subs	r3, #1
 800115a:	b29b      	uxth	r3, r3
 800115c:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800115e:	6801      	ldr	r1, [r0, #0]
 8001160:	694b      	ldr	r3, [r1, #20]
 8001162:	065e      	lsls	r6, r3, #25
 8001164:	d508      	bpl.n	8001178 <HAL_I2C_EV_IRQHandler+0x578>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001166:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001168:	6909      	ldr	r1, [r1, #16]
 800116a:	1c5c      	adds	r4, r3, #1
 800116c:	6244      	str	r4, [r0, #36]	; 0x24
 800116e:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 8001170:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001172:	3b01      	subs	r3, #1
 8001174:	b29b      	uxth	r3, r3
 8001176:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001178:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	6403      	str	r3, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001180:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001182:	b123      	cbz	r3, 800118e <HAL_I2C_EV_IRQHandler+0x58e>
    I2C_ITError(hi2c);
 8001184:	f7ff fca8 	bl	8000ad8 <I2C_ITError>
 8001188:	e6a9      	b.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800118a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800118c:	e7d4      	b.n	8001138 <HAL_I2C_EV_IRQHandler+0x538>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 800118e:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 8001192:	2902      	cmp	r1, #2
 8001194:	d80a      	bhi.n	80011ac <HAL_I2C_EV_IRQHandler+0x5ac>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8001198:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 800119a:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800119c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800119e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80011a6:	f7ff fc92 	bl	8000ace <HAL_I2C_ListenCpltCallback>
 80011aa:	e698      	b.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80011ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80011ae:	2b22      	cmp	r3, #34	; 0x22
 80011b0:	d002      	beq.n	80011b8 <HAL_I2C_EV_IRQHandler+0x5b8>
 80011b2:	2a22      	cmp	r2, #34	; 0x22
 80011b4:	f47f ae93 	bne.w	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
        hi2c->PreviousState = I2C_STATE_NONE;
 80011b8:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80011ba:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80011bc:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80011be:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80011c2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80011c6:	f7ff fc80 	bl	8000aca <HAL_I2C_SlaveRxCpltCallback>
 80011ca:	e688      	b.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
 80011cc:	00010040 	.word	0x00010040
 80011d0:	00010002 	.word	0x00010002
 80011d4:	00010010 	.word	0x00010010
 80011d8:	ffff0000 	.word	0xffff0000
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80011dc:	4e39      	ldr	r6, [pc, #228]	; (80012c4 <HAL_I2C_EV_IRQHandler+0x6c4>)
 80011de:	4c3a      	ldr	r4, [pc, #232]	; (80012c8 <HAL_I2C_EV_IRQHandler+0x6c8>)
 80011e0:	402e      	ands	r6, r5
 80011e2:	400c      	ands	r4, r1
 80011e4:	2e00      	cmp	r6, #0
 80011e6:	d036      	beq.n	8001256 <HAL_I2C_EV_IRQHandler+0x656>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80011e8:	4d38      	ldr	r5, [pc, #224]	; (80012cc <HAL_I2C_EV_IRQHandler+0x6cc>)
 80011ea:	400d      	ands	r5, r1
 80011ec:	b33d      	cbz	r5, 800123e <HAL_I2C_EV_IRQHandler+0x63e>
 80011ee:	0555      	lsls	r5, r2, #21
 80011f0:	d525      	bpl.n	800123e <HAL_I2C_EV_IRQHandler+0x63e>
 80011f2:	bb24      	cbnz	r4, 800123e <HAL_I2C_EV_IRQHandler+0x63e>
  uint32_t CurrentState = hi2c->State;
 80011f4:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 80011f8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
  uint32_t CurrentState = hi2c->State;
 80011fa:	b2c9      	uxtb	r1, r1
  if(hi2c->XferCount != 0U)
 80011fc:	b292      	uxth	r2, r2
 80011fe:	2a00      	cmp	r2, #0
 8001200:	f43f ae6d 	beq.w	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001204:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001206:	1c54      	adds	r4, r2, #1
 8001208:	6244      	str	r4, [r0, #36]	; 0x24
 800120a:	7812      	ldrb	r2, [r2, #0]
 800120c:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 800120e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001210:	3a01      	subs	r2, #1
 8001212:	b292      	uxth	r2, r2
 8001214:	8542      	strh	r2, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001216:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001218:	b292      	uxth	r2, r2
 800121a:	2a00      	cmp	r2, #0
 800121c:	f47f ae5f 	bne.w	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
 8001220:	2929      	cmp	r1, #41	; 0x29
 8001222:	f47f ae5c 	bne.w	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800122c:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800122e:	2321      	movs	r3, #33	; 0x21
 8001230:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001232:	2328      	movs	r3, #40	; 0x28
 8001234:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001238:	f7ff fc46 	bl	8000ac8 <HAL_I2C_SlaveTxCpltCallback>
 800123c:	e64f      	b.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800123e:	2c00      	cmp	r4, #0
 8001240:	f43f ae4d 	beq.w	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
 8001244:	0594      	lsls	r4, r2, #22
 8001246:	f57f ae4a 	bpl.w	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
  if(hi2c->XferCount != 0U)
 800124a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800124c:	b292      	uxth	r2, r2
 800124e:	2a00      	cmp	r2, #0
 8001250:	f47f ae63 	bne.w	8000f1a <HAL_I2C_EV_IRQHandler+0x31a>
 8001254:	e643      	b.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001256:	4d1e      	ldr	r5, [pc, #120]	; (80012d0 <HAL_I2C_EV_IRQHandler+0x6d0>)
 8001258:	400d      	ands	r5, r1
 800125a:	b335      	cbz	r5, 80012aa <HAL_I2C_EV_IRQHandler+0x6aa>
 800125c:	0551      	lsls	r1, r2, #21
 800125e:	d524      	bpl.n	80012aa <HAL_I2C_EV_IRQHandler+0x6aa>
 8001260:	bb1c      	cbnz	r4, 80012aa <HAL_I2C_EV_IRQHandler+0x6aa>
  uint32_t CurrentState = hi2c->State;
 8001262:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8001266:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
  uint32_t CurrentState = hi2c->State;
 8001268:	b2d2      	uxtb	r2, r2
  if(hi2c->XferCount != 0U)
 800126a:	b289      	uxth	r1, r1
 800126c:	2900      	cmp	r1, #0
 800126e:	f43f ae36 	beq.w	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001272:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	1c4c      	adds	r4, r1, #1
 8001278:	6244      	str	r4, [r0, #36]	; 0x24
 800127a:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 800127c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800127e:	3b01      	subs	r3, #1
 8001280:	b29b      	uxth	r3, r3
 8001282:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001284:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001286:	b29b      	uxth	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	f47f ae28 	bne.w	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
 800128e:	2a2a      	cmp	r2, #42	; 0x2a
 8001290:	f47f ae25 	bne.w	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001294:	6802      	ldr	r2, [r0, #0]
 8001296:	6853      	ldr	r3, [r2, #4]
 8001298:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800129c:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800129e:	2322      	movs	r3, #34	; 0x22
 80012a0:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80012a2:	2328      	movs	r3, #40	; 0x28
 80012a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80012a8:	e78d      	b.n	80011c6 <HAL_I2C_EV_IRQHandler+0x5c6>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80012aa:	2c00      	cmp	r4, #0
 80012ac:	f43f ae17 	beq.w	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
 80012b0:	0592      	lsls	r2, r2, #22
 80012b2:	f57f ae14 	bpl.w	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
  if(hi2c->XferCount != 0U)
 80012b6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80012b8:	b292      	uxth	r2, r2
 80012ba:	2a00      	cmp	r2, #0
 80012bc:	f47f ae77 	bne.w	8000fae <HAL_I2C_EV_IRQHandler+0x3ae>
 80012c0:	e60d      	b.n	8000ede <HAL_I2C_EV_IRQHandler+0x2de>
 80012c2:	bf00      	nop
 80012c4:	00100004 	.word	0x00100004
 80012c8:	00010004 	.word	0x00010004
 80012cc:	00010080 	.word	0x00010080
 80012d0:	00010040 	.word	0x00010040

080012d4 <HAL_I2C_ER_IRQHandler>:
{
 80012d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80012d6:	6803      	ldr	r3, [r0, #0]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80012d8:	4a4b      	ldr	r2, [pc, #300]	; (8001408 <HAL_I2C_ER_IRQHandler+0x134>)
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80012da:	695e      	ldr	r6, [r3, #20]
{
 80012dc:	4604      	mov	r4, r0
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80012de:	4216      	tst	r6, r2
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80012e0:	685d      	ldr	r5, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80012e2:	d00c      	beq.n	80012fe <HAL_I2C_ER_IRQHandler+0x2a>
 80012e4:	05e8      	lsls	r0, r5, #23
 80012e6:	d50a      	bpl.n	80012fe <HAL_I2C_ER_IRQHandler+0x2a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80012e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80012ea:	f042 0201 	orr.w	r2, r2, #1
 80012ee:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80012f0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80012f4:	615a      	str	r2, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012fc:	601a      	str	r2, [r3, #0]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80012fe:	f416 3f81 	tst.w	r6, #66048	; 0x10200
 8001302:	d008      	beq.n	8001316 <HAL_I2C_ER_IRQHandler+0x42>
 8001304:	05e9      	lsls	r1, r5, #23
 8001306:	d506      	bpl.n	8001316 <HAL_I2C_ER_IRQHandler+0x42>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001308:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800130a:	f042 0202 	orr.w	r2, r2, #2
 800130e:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001310:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001314:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001316:	f416 3f82 	tst.w	r6, #66560	; 0x10400
 800131a:	d036      	beq.n	800138a <HAL_I2C_ER_IRQHandler+0xb6>
 800131c:	05ea      	lsls	r2, r5, #23
 800131e:	d534      	bpl.n	800138a <HAL_I2C_ER_IRQHandler+0xb6>
    tmp1 = hi2c->Mode;
 8001320:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8001324:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8001326:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800132a:	2f20      	cmp	r7, #32
    tmp2 = hi2c->XferCount;
 800132c:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 800132e:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 8001330:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001332:	d158      	bne.n	80013e6 <HAL_I2C_ER_IRQHandler+0x112>
 8001334:	2900      	cmp	r1, #0
 8001336:	d156      	bne.n	80013e6 <HAL_I2C_ER_IRQHandler+0x112>
 8001338:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 800133c:	2921      	cmp	r1, #33	; 0x21
 800133e:	d003      	beq.n	8001348 <HAL_I2C_ER_IRQHandler+0x74>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001340:	2a28      	cmp	r2, #40	; 0x28
 8001342:	d150      	bne.n	80013e6 <HAL_I2C_ER_IRQHandler+0x112>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001344:	2821      	cmp	r0, #33	; 0x21
 8001346:	d14e      	bne.n	80013e6 <HAL_I2C_ER_IRQHandler+0x112>
  uint32_t CurrentState       = hi2c->State;
 8001348:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800134c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  uint32_t CurrentState       = hi2c->State;
 800134e:	b2d2      	uxtb	r2, r2
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001350:	2904      	cmp	r1, #4
 8001352:	d001      	beq.n	8001358 <HAL_I2C_ER_IRQHandler+0x84>
 8001354:	2908      	cmp	r1, #8
 8001356:	d12c      	bne.n	80013b2 <HAL_I2C_ER_IRQHandler+0xde>
 8001358:	2a28      	cmp	r2, #40	; 0x28
 800135a:	d12a      	bne.n	80013b2 <HAL_I2C_ER_IRQHandler+0xde>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800135c:	4a2b      	ldr	r2, [pc, #172]	; (800140c <HAL_I2C_ER_IRQHandler+0x138>)
    HAL_I2C_ListenCpltCallback(hi2c);
 800135e:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001360:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001368:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800136a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800136e:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001376:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001378:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800137a:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800137c:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800137e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001382:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001386:	f7ff fba2 	bl	8000ace <HAL_I2C_ListenCpltCallback>
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800138a:	f416 3f84 	tst.w	r6, #67584	; 0x10800
 800138e:	d009      	beq.n	80013a4 <HAL_I2C_ER_IRQHandler+0xd0>
 8001390:	05eb      	lsls	r3, r5, #23
 8001392:	d507      	bpl.n	80013a4 <HAL_I2C_ER_IRQHandler+0xd0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001394:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001398:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80013a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013a6:	b373      	cbz	r3, 8001406 <HAL_I2C_ER_IRQHandler+0x132>
    I2C_ITError(hi2c);
 80013a8:	4620      	mov	r0, r4
}
 80013aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80013ae:	f7ff bb93 	b.w	8000ad8 <I2C_ITError>
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 80013b2:	2a21      	cmp	r2, #33	; 0x21
 80013b4:	d123      	bne.n	80013fe <HAL_I2C_ER_IRQHandler+0x12a>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013b6:	4915      	ldr	r1, [pc, #84]	; (800140c <HAL_I2C_ER_IRQHandler+0x138>)
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80013b8:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013ba:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80013bc:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80013be:	2220      	movs	r2, #32
 80013c0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c4:	2200      	movs	r2, #0
 80013c6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80013d0:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80013d6:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013de:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80013e0:	f7ff fb72 	bl	8000ac8 <HAL_I2C_SlaveTxCpltCallback>
 80013e4:	e7d1      	b.n	800138a <HAL_I2C_ER_IRQHandler+0xb6>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80013e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80013e8:	f042 0204 	orr.w	r2, r2, #4
 80013ec:	6422      	str	r2, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 80013ee:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80013f2:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 80013f4:	bf02      	ittt	eq
 80013f6:	681a      	ldreq	r2, [r3, #0]
 80013f8:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 80013fc:	601a      	streq	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	e7c1      	b.n	800138a <HAL_I2C_ER_IRQHandler+0xb6>
 8001406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001408:	00010100 	.word	0x00010100
 800140c:	ffff0000 	.word	0xffff0000

08001410 <I2C_DMAAbort>:
  * @param hdma: DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001410:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001412:	b508      	push	{r3, lr}
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001414:	6803      	ldr	r3, [r0, #0]

  hi2c->XferCount = 0U;

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001416:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800141e:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 8001420:	2200      	movs	r2, #0
 8001422:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001424:	634a      	str	r2, [r1, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001426:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001428:	634a      	str	r2, [r1, #52]	; 0x34

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 800142a:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800142e:	2960      	cmp	r1, #96	; 0x60
 8001430:	f04f 0120 	mov.w	r1, #32
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001434:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001438:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 800143c:	d107      	bne.n	800144e <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800143e:	6402      	str	r2, [r0, #64]	; 0x40

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	f022 0201 	bic.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8001448:	f7ff fb45 	bl	8000ad6 <HAL_I2C_AbortCpltCallback>
 800144c:	bd08      	pop	{r3, pc}
  {
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	f022 0201 	bic.w	r2, r2, #1
 8001454:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
 8001456:	f7ff fb3d 	bl	8000ad4 <HAL_I2C_ErrorCallback>
 800145a:	bd08      	pop	{r3, pc}

0800145c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145c:	6803      	ldr	r3, [r0, #0]
{
 800145e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001462:	07db      	lsls	r3, r3, #31
{
 8001464:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001466:	d410      	bmi.n	800148a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001468:	682b      	ldr	r3, [r5, #0]
 800146a:	079f      	lsls	r7, r3, #30
 800146c:	d45e      	bmi.n	800152c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146e:	682b      	ldr	r3, [r5, #0]
 8001470:	0719      	lsls	r1, r3, #28
 8001472:	f100 8095 	bmi.w	80015a0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001476:	682b      	ldr	r3, [r5, #0]
 8001478:	075a      	lsls	r2, r3, #29
 800147a:	f100 80bf 	bmi.w	80015fc <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800147e:	69ea      	ldr	r2, [r5, #28]
 8001480:	2a00      	cmp	r2, #0
 8001482:	f040 812d 	bne.w	80016e0 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001486:	2000      	movs	r0, #0
 8001488:	e014      	b.n	80014b4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800148a:	4c90      	ldr	r4, [pc, #576]	; (80016cc <HAL_RCC_OscConfig+0x270>)
 800148c:	6863      	ldr	r3, [r4, #4]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b04      	cmp	r3, #4
 8001494:	d007      	beq.n	80014a6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001496:	6863      	ldr	r3, [r4, #4]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d10c      	bne.n	80014ba <HAL_RCC_OscConfig+0x5e>
 80014a0:	6863      	ldr	r3, [r4, #4]
 80014a2:	03de      	lsls	r6, r3, #15
 80014a4:	d509      	bpl.n	80014ba <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	039c      	lsls	r4, r3, #14
 80014aa:	d5dd      	bpl.n	8001468 <HAL_RCC_OscConfig+0xc>
 80014ac:	686b      	ldr	r3, [r5, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1da      	bne.n	8001468 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80014b2:	2001      	movs	r0, #1
}
 80014b4:	b002      	add	sp, #8
 80014b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ba:	686b      	ldr	r3, [r5, #4]
 80014bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c0:	d110      	bne.n	80014e4 <HAL_RCC_OscConfig+0x88>
 80014c2:	6823      	ldr	r3, [r4, #0]
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014ca:	f7fe fe81 	bl	80001d0 <HAL_GetTick>
 80014ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d0:	6823      	ldr	r3, [r4, #0]
 80014d2:	0398      	lsls	r0, r3, #14
 80014d4:	d4c8      	bmi.n	8001468 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d6:	f7fe fe7b 	bl	80001d0 <HAL_GetTick>
 80014da:	1b80      	subs	r0, r0, r6
 80014dc:	2864      	cmp	r0, #100	; 0x64
 80014de:	d9f7      	bls.n	80014d0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80014e0:	2003      	movs	r0, #3
 80014e2:	e7e7      	b.n	80014b4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e4:	b99b      	cbnz	r3, 800150e <HAL_RCC_OscConfig+0xb2>
 80014e6:	6823      	ldr	r3, [r4, #0]
 80014e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014f6:	f7fe fe6b 	bl	80001d0 <HAL_GetTick>
 80014fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	0399      	lsls	r1, r3, #14
 8001500:	d5b2      	bpl.n	8001468 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001502:	f7fe fe65 	bl	80001d0 <HAL_GetTick>
 8001506:	1b80      	subs	r0, r0, r6
 8001508:	2864      	cmp	r0, #100	; 0x64
 800150a:	d9f7      	bls.n	80014fc <HAL_RCC_OscConfig+0xa0>
 800150c:	e7e8      	b.n	80014e0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001512:	6823      	ldr	r3, [r4, #0]
 8001514:	d103      	bne.n	800151e <HAL_RCC_OscConfig+0xc2>
 8001516:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151a:	6023      	str	r3, [r4, #0]
 800151c:	e7d1      	b.n	80014c2 <HAL_RCC_OscConfig+0x66>
 800151e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001522:	6023      	str	r3, [r4, #0]
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152a:	e7cd      	b.n	80014c8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800152c:	4c67      	ldr	r4, [pc, #412]	; (80016cc <HAL_RCC_OscConfig+0x270>)
 800152e:	6863      	ldr	r3, [r4, #4]
 8001530:	f013 0f0c 	tst.w	r3, #12
 8001534:	d007      	beq.n	8001546 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001536:	6863      	ldr	r3, [r4, #4]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b08      	cmp	r3, #8
 800153e:	d110      	bne.n	8001562 <HAL_RCC_OscConfig+0x106>
 8001540:	6863      	ldr	r3, [r4, #4]
 8001542:	03da      	lsls	r2, r3, #15
 8001544:	d40d      	bmi.n	8001562 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	079b      	lsls	r3, r3, #30
 800154a:	d502      	bpl.n	8001552 <HAL_RCC_OscConfig+0xf6>
 800154c:	692b      	ldr	r3, [r5, #16]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d1af      	bne.n	80014b2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	696a      	ldr	r2, [r5, #20]
 8001556:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800155a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800155e:	6023      	str	r3, [r4, #0]
 8001560:	e785      	b.n	800146e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001562:	692a      	ldr	r2, [r5, #16]
 8001564:	4b5a      	ldr	r3, [pc, #360]	; (80016d0 <HAL_RCC_OscConfig+0x274>)
 8001566:	b16a      	cbz	r2, 8001584 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800156c:	f7fe fe30 	bl	80001d0 <HAL_GetTick>
 8001570:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	079f      	lsls	r7, r3, #30
 8001576:	d4ec      	bmi.n	8001552 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001578:	f7fe fe2a 	bl	80001d0 <HAL_GetTick>
 800157c:	1b80      	subs	r0, r0, r6
 800157e:	2802      	cmp	r0, #2
 8001580:	d9f7      	bls.n	8001572 <HAL_RCC_OscConfig+0x116>
 8001582:	e7ad      	b.n	80014e0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001584:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001586:	f7fe fe23 	bl	80001d0 <HAL_GetTick>
 800158a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	0798      	lsls	r0, r3, #30
 8001590:	f57f af6d 	bpl.w	800146e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001594:	f7fe fe1c 	bl	80001d0 <HAL_GetTick>
 8001598:	1b80      	subs	r0, r0, r6
 800159a:	2802      	cmp	r0, #2
 800159c:	d9f6      	bls.n	800158c <HAL_RCC_OscConfig+0x130>
 800159e:	e79f      	b.n	80014e0 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a0:	69aa      	ldr	r2, [r5, #24]
 80015a2:	4c4a      	ldr	r4, [pc, #296]	; (80016cc <HAL_RCC_OscConfig+0x270>)
 80015a4:	4b4b      	ldr	r3, [pc, #300]	; (80016d4 <HAL_RCC_OscConfig+0x278>)
 80015a6:	b1da      	cbz	r2, 80015e0 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015ac:	f7fe fe10 	bl	80001d0 <HAL_GetTick>
 80015b0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015b4:	079b      	lsls	r3, r3, #30
 80015b6:	d50d      	bpl.n	80015d4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015b8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80015bc:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <HAL_RCC_OscConfig+0x27c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80015c4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80015c6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80015c8:	9b01      	ldr	r3, [sp, #4]
 80015ca:	1e5a      	subs	r2, r3, #1
 80015cc:	9201      	str	r2, [sp, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f9      	bne.n	80015c6 <HAL_RCC_OscConfig+0x16a>
 80015d2:	e750      	b.n	8001476 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d4:	f7fe fdfc 	bl	80001d0 <HAL_GetTick>
 80015d8:	1b80      	subs	r0, r0, r6
 80015da:	2802      	cmp	r0, #2
 80015dc:	d9e9      	bls.n	80015b2 <HAL_RCC_OscConfig+0x156>
 80015de:	e77f      	b.n	80014e0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80015e0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015e2:	f7fe fdf5 	bl	80001d0 <HAL_GetTick>
 80015e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015ea:	079f      	lsls	r7, r3, #30
 80015ec:	f57f af43 	bpl.w	8001476 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f0:	f7fe fdee 	bl	80001d0 <HAL_GetTick>
 80015f4:	1b80      	subs	r0, r0, r6
 80015f6:	2802      	cmp	r0, #2
 80015f8:	d9f6      	bls.n	80015e8 <HAL_RCC_OscConfig+0x18c>
 80015fa:	e771      	b.n	80014e0 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fc:	4c33      	ldr	r4, [pc, #204]	; (80016cc <HAL_RCC_OscConfig+0x270>)
 80015fe:	69e3      	ldr	r3, [r4, #28]
 8001600:	00d8      	lsls	r0, r3, #3
 8001602:	d424      	bmi.n	800164e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001604:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	69e3      	ldr	r3, [r4, #28]
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	61e3      	str	r3, [r4, #28]
 800160e:	69e3      	ldr	r3, [r4, #28]
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001618:	4e30      	ldr	r6, [pc, #192]	; (80016dc <HAL_RCC_OscConfig+0x280>)
 800161a:	6833      	ldr	r3, [r6, #0]
 800161c:	05d9      	lsls	r1, r3, #23
 800161e:	d518      	bpl.n	8001652 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001620:	68eb      	ldr	r3, [r5, #12]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d126      	bne.n	8001674 <HAL_RCC_OscConfig+0x218>
 8001626:	6a23      	ldr	r3, [r4, #32]
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800162e:	f7fe fdcf 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001636:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001638:	6a23      	ldr	r3, [r4, #32]
 800163a:	079b      	lsls	r3, r3, #30
 800163c:	d53f      	bpl.n	80016be <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800163e:	2f00      	cmp	r7, #0
 8001640:	f43f af1d 	beq.w	800147e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001644:	69e3      	ldr	r3, [r4, #28]
 8001646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800164a:	61e3      	str	r3, [r4, #28]
 800164c:	e717      	b.n	800147e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800164e:	2700      	movs	r7, #0
 8001650:	e7e2      	b.n	8001618 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001652:	6833      	ldr	r3, [r6, #0]
 8001654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001658:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800165a:	f7fe fdb9 	bl	80001d0 <HAL_GetTick>
 800165e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	6833      	ldr	r3, [r6, #0]
 8001662:	05da      	lsls	r2, r3, #23
 8001664:	d4dc      	bmi.n	8001620 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001666:	f7fe fdb3 	bl	80001d0 <HAL_GetTick>
 800166a:	eba0 0008 	sub.w	r0, r0, r8
 800166e:	2864      	cmp	r0, #100	; 0x64
 8001670:	d9f6      	bls.n	8001660 <HAL_RCC_OscConfig+0x204>
 8001672:	e735      	b.n	80014e0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001674:	b9ab      	cbnz	r3, 80016a2 <HAL_RCC_OscConfig+0x246>
 8001676:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	6223      	str	r3, [r4, #32]
 8001682:	6a23      	ldr	r3, [r4, #32]
 8001684:	f023 0304 	bic.w	r3, r3, #4
 8001688:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800168a:	f7fe fda1 	bl	80001d0 <HAL_GetTick>
 800168e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001690:	6a23      	ldr	r3, [r4, #32]
 8001692:	0798      	lsls	r0, r3, #30
 8001694:	d5d3      	bpl.n	800163e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7fe fd9b 	bl	80001d0 <HAL_GetTick>
 800169a:	1b80      	subs	r0, r0, r6
 800169c:	4540      	cmp	r0, r8
 800169e:	d9f7      	bls.n	8001690 <HAL_RCC_OscConfig+0x234>
 80016a0:	e71e      	b.n	80014e0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	6a23      	ldr	r3, [r4, #32]
 80016a6:	d103      	bne.n	80016b0 <HAL_RCC_OscConfig+0x254>
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6223      	str	r3, [r4, #32]
 80016ae:	e7ba      	b.n	8001626 <HAL_RCC_OscConfig+0x1ca>
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6223      	str	r3, [r4, #32]
 80016b6:	6a23      	ldr	r3, [r4, #32]
 80016b8:	f023 0304 	bic.w	r3, r3, #4
 80016bc:	e7b6      	b.n	800162c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7fe fd87 	bl	80001d0 <HAL_GetTick>
 80016c2:	eba0 0008 	sub.w	r0, r0, r8
 80016c6:	42b0      	cmp	r0, r6
 80016c8:	d9b6      	bls.n	8001638 <HAL_RCC_OscConfig+0x1dc>
 80016ca:	e709      	b.n	80014e0 <HAL_RCC_OscConfig+0x84>
 80016cc:	40021000 	.word	0x40021000
 80016d0:	42420000 	.word	0x42420000
 80016d4:	42420480 	.word	0x42420480
 80016d8:	20000008 	.word	0x20000008
 80016dc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e0:	4c22      	ldr	r4, [pc, #136]	; (800176c <HAL_RCC_OscConfig+0x310>)
 80016e2:	6863      	ldr	r3, [r4, #4]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	f43f aee2 	beq.w	80014b2 <HAL_RCC_OscConfig+0x56>
 80016ee:	2300      	movs	r3, #0
 80016f0:	4e1f      	ldr	r6, [pc, #124]	; (8001770 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80016f4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f6:	d12b      	bne.n	8001750 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80016f8:	f7fe fd6a 	bl	80001d0 <HAL_GetTick>
 80016fc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	0199      	lsls	r1, r3, #6
 8001702:	d41f      	bmi.n	8001744 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001704:	6a2b      	ldr	r3, [r5, #32]
 8001706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170a:	d105      	bne.n	8001718 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800170c:	6862      	ldr	r2, [r4, #4]
 800170e:	68a9      	ldr	r1, [r5, #8]
 8001710:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001714:	430a      	orrs	r2, r1
 8001716:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001718:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800171a:	6862      	ldr	r2, [r4, #4]
 800171c:	430b      	orrs	r3, r1
 800171e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001722:	4313      	orrs	r3, r2
 8001724:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001726:	2301      	movs	r3, #1
 8001728:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800172a:	f7fe fd51 	bl	80001d0 <HAL_GetTick>
 800172e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	019a      	lsls	r2, r3, #6
 8001734:	f53f aea7 	bmi.w	8001486 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001738:	f7fe fd4a 	bl	80001d0 <HAL_GetTick>
 800173c:	1b40      	subs	r0, r0, r5
 800173e:	2802      	cmp	r0, #2
 8001740:	d9f6      	bls.n	8001730 <HAL_RCC_OscConfig+0x2d4>
 8001742:	e6cd      	b.n	80014e0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001744:	f7fe fd44 	bl	80001d0 <HAL_GetTick>
 8001748:	1bc0      	subs	r0, r0, r7
 800174a:	2802      	cmp	r0, #2
 800174c:	d9d7      	bls.n	80016fe <HAL_RCC_OscConfig+0x2a2>
 800174e:	e6c7      	b.n	80014e0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001750:	f7fe fd3e 	bl	80001d0 <HAL_GetTick>
 8001754:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	019b      	lsls	r3, r3, #6
 800175a:	f57f ae94 	bpl.w	8001486 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175e:	f7fe fd37 	bl	80001d0 <HAL_GetTick>
 8001762:	1b40      	subs	r0, r0, r5
 8001764:	2802      	cmp	r0, #2
 8001766:	d9f6      	bls.n	8001756 <HAL_RCC_OscConfig+0x2fa>
 8001768:	e6ba      	b.n	80014e0 <HAL_RCC_OscConfig+0x84>
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
 8001770:	42420060 	.word	0x42420060

08001774 <HAL_RCC_GetSysClockFreq>:
{
 8001774:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001776:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001778:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800177a:	ac02      	add	r4, sp, #8
 800177c:	f103 0510 	add.w	r5, r3, #16
 8001780:	4622      	mov	r2, r4
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	6859      	ldr	r1, [r3, #4]
 8001786:	3308      	adds	r3, #8
 8001788:	c203      	stmia	r2!, {r0, r1}
 800178a:	42ab      	cmp	r3, r5
 800178c:	4614      	mov	r4, r2
 800178e:	d1f7      	bne.n	8001780 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001790:	2301      	movs	r3, #1
 8001792:	f88d 3004 	strb.w	r3, [sp, #4]
 8001796:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001798:	4911      	ldr	r1, [pc, #68]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800179a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800179e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80017a0:	f003 020c 	and.w	r2, r3, #12
 80017a4:	2a08      	cmp	r2, #8
 80017a6:	d117      	bne.n	80017d8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017a8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80017ac:	a806      	add	r0, sp, #24
 80017ae:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017b0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017b2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017b6:	d50c      	bpl.n	80017d2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017b8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ba:	480a      	ldr	r0, [pc, #40]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017bc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017c0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017c2:	aa06      	add	r2, sp, #24
 80017c4:	4413      	add	r3, r2
 80017c6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ca:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80017ce:	b007      	add	sp, #28
 80017d0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x74>)
 80017d4:	4350      	muls	r0, r2
 80017d6:	e7fa      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80017da:	e7f8      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x5a>
 80017dc:	08002740 	.word	0x08002740
 80017e0:	40021000 	.word	0x40021000
 80017e4:	007a1200 	.word	0x007a1200
 80017e8:	003d0900 	.word	0x003d0900

080017ec <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017ec:	4a54      	ldr	r2, [pc, #336]	; (8001940 <HAL_RCC_ClockConfig+0x154>)
{
 80017ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017f2:	6813      	ldr	r3, [r2, #0]
{
 80017f4:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	428b      	cmp	r3, r1
{
 80017fc:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80017fe:	d32a      	bcc.n	8001856 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001800:	6829      	ldr	r1, [r5, #0]
 8001802:	078c      	lsls	r4, r1, #30
 8001804:	d434      	bmi.n	8001870 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001806:	07ca      	lsls	r2, r1, #31
 8001808:	d447      	bmi.n	800189a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800180a:	4a4d      	ldr	r2, [pc, #308]	; (8001940 <HAL_RCC_ClockConfig+0x154>)
 800180c:	6813      	ldr	r3, [r2, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	429e      	cmp	r6, r3
 8001814:	f0c0 8082 	bcc.w	800191c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001818:	682a      	ldr	r2, [r5, #0]
 800181a:	4c4a      	ldr	r4, [pc, #296]	; (8001944 <HAL_RCC_ClockConfig+0x158>)
 800181c:	f012 0f04 	tst.w	r2, #4
 8001820:	f040 8087 	bne.w	8001932 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001824:	0713      	lsls	r3, r2, #28
 8001826:	d506      	bpl.n	8001836 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001828:	6863      	ldr	r3, [r4, #4]
 800182a:	692a      	ldr	r2, [r5, #16]
 800182c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001830:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001834:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001836:	f7ff ff9d 	bl	8001774 <HAL_RCC_GetSysClockFreq>
 800183a:	6863      	ldr	r3, [r4, #4]
 800183c:	4a42      	ldr	r2, [pc, #264]	; (8001948 <HAL_RCC_ClockConfig+0x15c>)
 800183e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	40d8      	lsrs	r0, r3
 8001846:	4b41      	ldr	r3, [pc, #260]	; (800194c <HAL_RCC_ClockConfig+0x160>)
 8001848:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800184a:	2000      	movs	r0, #0
 800184c:	f7fe fc7e 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8001850:	2000      	movs	r0, #0
}
 8001852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	6813      	ldr	r3, [r2, #0]
 8001858:	f023 0307 	bic.w	r3, r3, #7
 800185c:	430b      	orrs	r3, r1
 800185e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001860:	6813      	ldr	r3, [r2, #0]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	4299      	cmp	r1, r3
 8001868:	d0ca      	beq.n	8001800 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800186a:	2001      	movs	r0, #1
 800186c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001870:	4b34      	ldr	r3, [pc, #208]	; (8001944 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001872:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001876:	bf1e      	ittt	ne
 8001878:	685a      	ldrne	r2, [r3, #4]
 800187a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800187e:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001880:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001882:	bf42      	ittt	mi
 8001884:	685a      	ldrmi	r2, [r3, #4]
 8001886:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800188a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	68a8      	ldr	r0, [r5, #8]
 8001890:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001894:	4302      	orrs	r2, r0
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	e7b5      	b.n	8001806 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189a:	686a      	ldr	r2, [r5, #4]
 800189c:	4c29      	ldr	r4, [pc, #164]	; (8001944 <HAL_RCC_ClockConfig+0x158>)
 800189e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a2:	d11c      	bne.n	80018de <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	d0df      	beq.n	800186a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018aa:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b0:	f023 0303 	bic.w	r3, r3, #3
 80018b4:	4313      	orrs	r3, r2
 80018b6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80018b8:	f7fe fc8a 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018bc:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80018be:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d114      	bne.n	80018ee <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018c4:	6863      	ldr	r3, [r4, #4]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d09d      	beq.n	800180a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ce:	f7fe fc7f 	bl	80001d0 <HAL_GetTick>
 80018d2:	1bc0      	subs	r0, r0, r7
 80018d4:	4540      	cmp	r0, r8
 80018d6:	d9f5      	bls.n	80018c4 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80018d8:	2003      	movs	r0, #3
 80018da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018de:	2a02      	cmp	r2, #2
 80018e0:	d102      	bne.n	80018e8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80018e6:	e7df      	b.n	80018a8 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e8:	f013 0f02 	tst.w	r3, #2
 80018ec:	e7dc      	b.n	80018a8 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d10f      	bne.n	8001912 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f2:	6863      	ldr	r3, [r4, #4]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d086      	beq.n	800180a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fc:	f7fe fc68 	bl	80001d0 <HAL_GetTick>
 8001900:	1bc0      	subs	r0, r0, r7
 8001902:	4540      	cmp	r0, r8
 8001904:	d9f5      	bls.n	80018f2 <HAL_RCC_ClockConfig+0x106>
 8001906:	e7e7      	b.n	80018d8 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001908:	f7fe fc62 	bl	80001d0 <HAL_GetTick>
 800190c:	1bc0      	subs	r0, r0, r7
 800190e:	4540      	cmp	r0, r8
 8001910:	d8e2      	bhi.n	80018d8 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001912:	6863      	ldr	r3, [r4, #4]
 8001914:	f013 0f0c 	tst.w	r3, #12
 8001918:	d1f6      	bne.n	8001908 <HAL_RCC_ClockConfig+0x11c>
 800191a:	e776      	b.n	800180a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191c:	6813      	ldr	r3, [r2, #0]
 800191e:	f023 0307 	bic.w	r3, r3, #7
 8001922:	4333      	orrs	r3, r6
 8001924:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001926:	6813      	ldr	r3, [r2, #0]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	429e      	cmp	r6, r3
 800192e:	d19c      	bne.n	800186a <HAL_RCC_ClockConfig+0x7e>
 8001930:	e772      	b.n	8001818 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001932:	6863      	ldr	r3, [r4, #4]
 8001934:	68e9      	ldr	r1, [r5, #12]
 8001936:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800193a:	430b      	orrs	r3, r1
 800193c:	6063      	str	r3, [r4, #4]
 800193e:	e771      	b.n	8001824 <HAL_RCC_ClockConfig+0x38>
 8001940:	40022000 	.word	0x40022000
 8001944:	40021000 	.word	0x40021000
 8001948:	08002750 	.word	0x08002750
 800194c:	20000008 	.word	0x20000008

08001950 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	4a03      	ldr	r2, [pc, #12]	; (800196c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800195e:	6810      	ldr	r0, [r2, #0]
}    
 8001960:	40d8      	lsrs	r0, r3
 8001962:	4770      	bx	lr
 8001964:	40021000 	.word	0x40021000
 8001968:	08002760 	.word	0x08002760
 800196c:	20000008 	.word	0x20000008

08001970 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001970:	6803      	ldr	r3, [r0, #0]
{
 8001972:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001976:	07d9      	lsls	r1, r3, #31
{
 8001978:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800197a:	d520      	bpl.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197c:	4c35      	ldr	r4, [pc, #212]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800197e:	69e3      	ldr	r3, [r4, #28]
 8001980:	00da      	lsls	r2, r3, #3
 8001982:	d432      	bmi.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001984:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	69e3      	ldr	r3, [r4, #28]
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	61e3      	str	r3, [r4, #28]
 800198e:	69e3      	ldr	r3, [r4, #28]
 8001990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001998:	4e2f      	ldr	r6, [pc, #188]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800199a:	6833      	ldr	r3, [r6, #0]
 800199c:	05db      	lsls	r3, r3, #23
 800199e:	d526      	bpl.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019a0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019a2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80019a6:	d136      	bne.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80019a8:	6a23      	ldr	r3, [r4, #32]
 80019aa:	686a      	ldr	r2, [r5, #4]
 80019ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019b0:	4313      	orrs	r3, r2
 80019b2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019b4:	b11f      	cbz	r7, 80019be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b6:	69e3      	ldr	r3, [r4, #28]
 80019b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019bc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80019be:	6828      	ldr	r0, [r5, #0]
 80019c0:	0783      	lsls	r3, r0, #30
 80019c2:	d506      	bpl.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019c4:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80019c6:	68a9      	ldr	r1, [r5, #8]
 80019c8:	6853      	ldr	r3, [r2, #4]
 80019ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019ce:	430b      	orrs	r3, r1
 80019d0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80019d2:	f010 0010 	ands.w	r0, r0, #16
 80019d6:	d01b      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019d8:	4a1e      	ldr	r2, [pc, #120]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80019da:	68e9      	ldr	r1, [r5, #12]
 80019dc:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80019de:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019e4:	430b      	orrs	r3, r1
 80019e6:	6053      	str	r3, [r2, #4]
 80019e8:	e012      	b.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80019ea:	2700      	movs	r7, #0
 80019ec:	e7d4      	b.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ee:	6833      	ldr	r3, [r6, #0]
 80019f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80019f6:	f7fe fbeb 	bl	80001d0 <HAL_GetTick>
 80019fa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fc:	6833      	ldr	r3, [r6, #0]
 80019fe:	05d8      	lsls	r0, r3, #23
 8001a00:	d4ce      	bmi.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a02:	f7fe fbe5 	bl	80001d0 <HAL_GetTick>
 8001a06:	eba0 0008 	sub.w	r0, r0, r8
 8001a0a:	2864      	cmp	r0, #100	; 0x64
 8001a0c:	d9f6      	bls.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001a0e:	2003      	movs	r0, #3
}
 8001a10:	b002      	add	sp, #8
 8001a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a16:	686a      	ldr	r2, [r5, #4]
 8001a18:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d0c3      	beq.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a20:	2001      	movs	r0, #1
 8001a22:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a24:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a26:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a28:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a2e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001a30:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a32:	07d9      	lsls	r1, r3, #31
 8001a34:	d5b8      	bpl.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001a36:	f7fe fbcb 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001a3e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a40:	6a23      	ldr	r3, [r4, #32]
 8001a42:	079a      	lsls	r2, r3, #30
 8001a44:	d4b0      	bmi.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a46:	f7fe fbc3 	bl	80001d0 <HAL_GetTick>
 8001a4a:	1b80      	subs	r0, r0, r6
 8001a4c:	4540      	cmp	r0, r8
 8001a4e:	d9f7      	bls.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001a50:	e7dd      	b.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40007000 	.word	0x40007000
 8001a5c:	42420440 	.word	0x42420440

08001a60 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a60:	6a03      	ldr	r3, [r0, #32]
{
 8001a62:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a6a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a6c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a6e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a72:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001a76:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a78:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001a7a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001a7e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a80:	4d0a      	ldr	r5, [pc, #40]	; (8001aac <TIM_OC1_SetConfig+0x4c>)
 8001a82:	42a8      	cmp	r0, r5
 8001a84:	d10b      	bne.n	8001a9e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001a86:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001a88:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001a8c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a8e:	698e      	ldr	r6, [r1, #24]
 8001a90:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001a92:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a96:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a98:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a9c:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a9e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001aa0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001aa2:	684a      	ldr	r2, [r1, #4]
 8001aa4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001aa6:	6203      	str	r3, [r0, #32]
 8001aa8:	bd70      	pop	{r4, r5, r6, pc}
 8001aaa:	bf00      	nop
 8001aac:	40012c00 	.word	0x40012c00

08001ab0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ab0:	6a03      	ldr	r3, [r0, #32]
{
 8001ab2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ab8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001aba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001abc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001abe:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ac0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ac2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001ac6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ac8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001aca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ace:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ad2:	4d0b      	ldr	r5, [pc, #44]	; (8001b00 <TIM_OC3_SetConfig+0x50>)
 8001ad4:	42a8      	cmp	r0, r5
 8001ad6:	d10d      	bne.n	8001af4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ad8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ada:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ade:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ae2:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001ae4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001ae6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001aea:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001aec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001af0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001af4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001af6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001af8:	684a      	ldr	r2, [r1, #4]
 8001afa:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001afc:	6203      	str	r3, [r0, #32]
 8001afe:	bd70      	pop	{r4, r5, r6, pc}
 8001b00:	40012c00 	.word	0x40012c00

08001b04 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b04:	6a03      	ldr	r3, [r0, #32]
{
 8001b06:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b0c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b0e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b10:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b12:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b14:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b16:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b1a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b1e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b24:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b28:	4d06      	ldr	r5, [pc, #24]	; (8001b44 <TIM_OC4_SetConfig+0x40>)
 8001b2a:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001b2c:	bf02      	ittt	eq
 8001b2e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b30:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001b34:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b38:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b3a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b3c:	684a      	ldr	r2, [r1, #4]
 8001b3e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b40:	6203      	str	r3, [r0, #32]
 8001b42:	bd30      	pop	{r4, r5, pc}
 8001b44:	40012c00 	.word	0x40012c00

08001b48 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b48:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001b4a:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001b4c:	689a      	ldr	r2, [r3, #8]
{
 8001b4e:	b530      	push	{r4, r5, lr}
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b50:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001b54:	680c      	ldr	r4, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001b56:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001b58:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001b5c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001b5e:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8001b60:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 8001b62:	d021      	beq.n	8001ba8 <TIM_SlaveTimer_SetConfig+0x60>
 8001b64:	d802      	bhi.n	8001b6c <TIM_SlaveTimer_SetConfig+0x24>
 8001b66:	2840      	cmp	r0, #64	; 0x40
 8001b68:	d010      	beq.n	8001b8c <TIM_SlaveTimer_SetConfig+0x44>
 8001b6a:	bd30      	pop	{r4, r5, pc}
 8001b6c:	2860      	cmp	r0, #96	; 0x60
 8001b6e:	d02d      	beq.n	8001bcc <TIM_SlaveTimer_SetConfig+0x84>
 8001b70:	2870      	cmp	r0, #112	; 0x70
 8001b72:	d13d      	bne.n	8001bf0 <TIM_SlaveTimer_SetConfig+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b74:	68ca      	ldr	r2, [r1, #12]
 8001b76:	688c      	ldr	r4, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8001b78:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b7a:	6909      	ldr	r1, [r1, #16]
 8001b7c:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b7e:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b82:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b86:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	bd30      	pop	{r4, r5, pc}
      tmpccer = htim->Instance->CCER;
 8001b8c:	6a18      	ldr	r0, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001b8e:	6a1a      	ldr	r2, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001b90:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001b98:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b9a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001b9e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8001ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001ba4:	6218      	str	r0, [r3, #32]
    break;
 8001ba6:	bd30      	pop	{r4, r5, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ba8:	6888      	ldr	r0, [r1, #8]
 8001baa:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8001bac:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bae:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bb0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bb4:	f024 0401 	bic.w	r4, r4, #1
 8001bb8:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bba:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001bbc:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bbe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bc2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bc8:	6219      	str	r1, [r3, #32]
 8001bca:	bd30      	pop	{r4, r5, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bcc:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bce:	688c      	ldr	r4, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bd0:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bd4:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bd6:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bd8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001bda:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001bdc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001be0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001be4:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8001be8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001bec:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bee:	621a      	str	r2, [r3, #32]
 8001bf0:	bd30      	pop	{r4, r5, pc}

08001bf2 <HAL_TIM_OC_MspInit>:
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_TIM_SlaveConfigSynchronization>:
{
 8001bf4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001bf6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001bfa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	f04f 0302 	mov.w	r3, #2
 8001c02:	d015      	beq.n	8001c30 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 8001c04:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001c06:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001c0a:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8001c0e:	f7ff ff9b 	bl	8001b48 <TIM_SlaveTimer_SetConfig>
  __HAL_UNLOCK(htim);
 8001c12:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c1c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c24:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8001c26:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001c2a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8001c2e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8001c30:	4618      	mov	r0, r3
    }
 8001c32:	bd38      	pop	{r3, r4, r5, pc}

08001c34 <HAL_TIM_PeriodElapsedCallback>:
 8001c34:	4770      	bx	lr

08001c36 <HAL_TIM_OC_DelayElapsedCallback>:
 8001c36:	4770      	bx	lr

08001c38 <HAL_TIM_IC_CaptureCallback>:
 8001c38:	4770      	bx	lr

08001c3a <HAL_TIM_PWM_PulseFinishedCallback>:
 8001c3a:	4770      	bx	lr

08001c3c <HAL_TIM_TriggerCallback>:
 8001c3c:	4770      	bx	lr

08001c3e <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c3e:	6803      	ldr	r3, [r0, #0]
{
 8001c40:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c42:	691a      	ldr	r2, [r3, #16]
{
 8001c44:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c46:	0791      	lsls	r1, r2, #30
 8001c48:	d50e      	bpl.n	8001c68 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	0792      	lsls	r2, r2, #30
 8001c4e:	d50b      	bpl.n	8001c68 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c50:	f06f 0202 	mvn.w	r2, #2
 8001c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c56:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c58:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c5a:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c5c:	079b      	lsls	r3, r3, #30
 8001c5e:	d077      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001c60:	f7ff ffea 	bl	8001c38 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c64:	2300      	movs	r3, #0
 8001c66:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	0750      	lsls	r0, r2, #29
 8001c6e:	d510      	bpl.n	8001c92 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	0751      	lsls	r1, r2, #29
 8001c74:	d50d      	bpl.n	8001c92 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c76:	f06f 0204 	mvn.w	r2, #4
 8001c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c7c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c7e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c80:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c82:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001c86:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c88:	d068      	beq.n	8001d5c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c8a:	f7ff ffd5 	bl	8001c38 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	691a      	ldr	r2, [r3, #16]
 8001c96:	0712      	lsls	r2, r2, #28
 8001c98:	d50f      	bpl.n	8001cba <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	0710      	lsls	r0, r2, #28
 8001c9e:	d50c      	bpl.n	8001cba <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ca0:	f06f 0208 	mvn.w	r2, #8
 8001ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ca6:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ca8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001caa:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cac:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cb0:	d05a      	beq.n	8001d68 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb2:	f7ff ffc1 	bl	8001c38 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	06d2      	lsls	r2, r2, #27
 8001cc0:	d510      	bpl.n	8001ce4 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	06d0      	lsls	r0, r2, #27
 8001cc6:	d50d      	bpl.n	8001ce4 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cc8:	f06f 0210 	mvn.w	r2, #16
 8001ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cce:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cd2:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cd4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cda:	d04b      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001cdc:	f7ff ffac 	bl	8001c38 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	07d1      	lsls	r1, r2, #31
 8001cea:	d508      	bpl.n	8001cfe <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	07d2      	lsls	r2, r2, #31
 8001cf0:	d505      	bpl.n	8001cfe <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cf2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cf6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cf8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cfa:	f7ff ff9b 	bl	8001c34 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cfe:	6823      	ldr	r3, [r4, #0]
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	0610      	lsls	r0, r2, #24
 8001d04:	d508      	bpl.n	8001d18 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	0611      	lsls	r1, r2, #24
 8001d0a:	d505      	bpl.n	8001d18 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001d10:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d12:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001d14:	f000 f945 	bl	8001fa2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	0652      	lsls	r2, r2, #25
 8001d1e:	d508      	bpl.n	8001d32 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	0650      	lsls	r0, r2, #25
 8001d24:	d505      	bpl.n	8001d32 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d26:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001d2a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d2c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001d2e:	f7ff ff85 	bl	8001c3c <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	0691      	lsls	r1, r2, #26
 8001d38:	d522      	bpl.n	8001d80 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	0692      	lsls	r2, r2, #26
 8001d3e:	d51f      	bpl.n	8001d80 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d40:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001d44:	4620      	mov	r0, r4
}
 8001d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d4a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001d4c:	f000 b928 	b.w	8001fa0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d50:	f7ff ff71 	bl	8001c36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d54:	4620      	mov	r0, r4
 8001d56:	f7ff ff70 	bl	8001c3a <HAL_TIM_PWM_PulseFinishedCallback>
 8001d5a:	e783      	b.n	8001c64 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5c:	f7ff ff6b 	bl	8001c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d60:	4620      	mov	r0, r4
 8001d62:	f7ff ff6a 	bl	8001c3a <HAL_TIM_PWM_PulseFinishedCallback>
 8001d66:	e792      	b.n	8001c8e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d68:	f7ff ff65 	bl	8001c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7ff ff64 	bl	8001c3a <HAL_TIM_PWM_PulseFinishedCallback>
 8001d72:	e7a0      	b.n	8001cb6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d74:	f7ff ff5f 	bl	8001c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f7ff ff5e 	bl	8001c3a <HAL_TIM_PWM_PulseFinishedCallback>
 8001d7e:	e7af      	b.n	8001ce0 <HAL_TIM_IRQHandler+0xa2>
 8001d80:	bd10      	pop	{r4, pc}
	...

08001d84 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d84:	4a1a      	ldr	r2, [pc, #104]	; (8001df0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001d86:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d88:	4290      	cmp	r0, r2
 8001d8a:	d00a      	beq.n	8001da2 <TIM_Base_SetConfig+0x1e>
 8001d8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d90:	d007      	beq.n	8001da2 <TIM_Base_SetConfig+0x1e>
 8001d92:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d96:	4290      	cmp	r0, r2
 8001d98:	d003      	beq.n	8001da2 <TIM_Base_SetConfig+0x1e>
 8001d9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d9e:	4290      	cmp	r0, r2
 8001da0:	d115      	bne.n	8001dce <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001da2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001da8:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001daa:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <TIM_Base_SetConfig+0x6c>)
 8001dac:	4290      	cmp	r0, r2
 8001dae:	d00a      	beq.n	8001dc6 <TIM_Base_SetConfig+0x42>
 8001db0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001db4:	d007      	beq.n	8001dc6 <TIM_Base_SetConfig+0x42>
 8001db6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001dba:	4290      	cmp	r0, r2
 8001dbc:	d003      	beq.n	8001dc6 <TIM_Base_SetConfig+0x42>
 8001dbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dc2:	4290      	cmp	r0, r2
 8001dc4:	d103      	bne.n	8001dce <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dc6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dcc:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001dce:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001dd4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001dd6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dd8:	688b      	ldr	r3, [r1, #8]
 8001dda:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001ddc:	680b      	ldr	r3, [r1, #0]
 8001dde:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <TIM_Base_SetConfig+0x6c>)
 8001de2:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001de4:	bf04      	itt	eq
 8001de6:	690b      	ldreq	r3, [r1, #16]
 8001de8:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001dea:	2301      	movs	r3, #1
 8001dec:	6143      	str	r3, [r0, #20]
 8001dee:	4770      	bx	lr
 8001df0:	40012c00 	.word	0x40012c00

08001df4 <HAL_TIM_Base_Init>:
{
 8001df4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001df6:	4604      	mov	r4, r0
 8001df8:	b1a0      	cbz	r0, 8001e24 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001dfa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001dfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e02:	b91b      	cbnz	r3, 8001e0c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e04:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001e08:	f000 fb0a 	bl	8002420 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001e0c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e0e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001e10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e14:	1d21      	adds	r1, r4, #4
 8001e16:	f7ff ffb5 	bl	8001d84 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001e1a:	2301      	movs	r3, #1
  return HAL_OK;
 8001e1c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001e1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e22:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e24:	2001      	movs	r0, #1
}
 8001e26:	bd10      	pop	{r4, pc}

08001e28 <HAL_TIM_OC_Init>:
{
 8001e28:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001e2a:	4604      	mov	r4, r0
 8001e2c:	b1a0      	cbz	r0, 8001e58 <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e36:	b91b      	cbnz	r3, 8001e40 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8001e3c:	f7ff fed9 	bl	8001bf2 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001e40:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001e42:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001e44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001e48:	1d21      	adds	r1, r4, #4
 8001e4a:	f7ff ff9b 	bl	8001d84 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001e4e:	2301      	movs	r3, #1
  return HAL_OK;
 8001e50:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001e52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e56:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e58:	2001      	movs	r0, #1
}
 8001e5a:	bd10      	pop	{r4, pc}

08001e5c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e5c:	6a03      	ldr	r3, [r0, #32]
{
 8001e5e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e60:	f023 0310 	bic.w	r3, r3, #16
 8001e64:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001e66:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001e68:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001e6a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e6c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e6e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e72:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e76:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001e78:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e7c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e80:	4d0b      	ldr	r5, [pc, #44]	; (8001eb0 <TIM_OC2_SetConfig+0x54>)
 8001e82:	42a8      	cmp	r0, r5
 8001e84:	d10d      	bne.n	8001ea2 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e86:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001e90:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001e92:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e94:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001e98:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001e9e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001ea2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001ea4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001ea6:	684a      	ldr	r2, [r1, #4]
 8001ea8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001eaa:	6203      	str	r3, [r0, #32]
 8001eac:	bd70      	pop	{r4, r5, r6, pc}
 8001eae:	bf00      	nop
 8001eb0:	40012c00 	.word	0x40012c00

08001eb4 <HAL_TIM_OC_ConfigChannel>:
{
 8001eb4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001eb6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001eba:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	f04f 0002 	mov.w	r0, #2
 8001ec2:	d018      	beq.n	8001ef6 <HAL_TIM_OC_ConfigChannel+0x42>
 8001ec4:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001eca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001ece:	461d      	mov	r5, r3
  switch (Channel)
 8001ed0:	2a0c      	cmp	r2, #12
 8001ed2:	d80b      	bhi.n	8001eec <HAL_TIM_OC_ConfigChannel+0x38>
 8001ed4:	e8df f002 	tbb	[pc, r2]
 8001ed8:	0a0a0a07 	.word	0x0a0a0a07
 8001edc:	0a0a0a10 	.word	0x0a0a0a10
 8001ee0:	0a0a0a14 	.word	0x0a0a0a14
 8001ee4:	18          	.byte	0x18
 8001ee5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ee6:	6820      	ldr	r0, [r4, #0]
 8001ee8:	f7ff fdba 	bl	8001a60 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8001eec:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001eee:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001ef2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001ef6:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ef8:	6820      	ldr	r0, [r4, #0]
 8001efa:	f7ff ffaf 	bl	8001e5c <TIM_OC2_SetConfig>
    break;
 8001efe:	e7f5      	b.n	8001eec <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f00:	6820      	ldr	r0, [r4, #0]
 8001f02:	f7ff fdd5 	bl	8001ab0 <TIM_OC3_SetConfig>
    break;
 8001f06:	e7f1      	b.n	8001eec <HAL_TIM_OC_ConfigChannel+0x38>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f08:	6820      	ldr	r0, [r4, #0]
 8001f0a:	f7ff fdfb 	bl	8001b04 <TIM_OC4_SetConfig>
    break;
 8001f0e:	e7ed      	b.n	8001eec <HAL_TIM_OC_ConfigChannel+0x38>

08001f10 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d01f      	beq.n	8001f58 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001f18:	68cb      	ldr	r3, [r1, #12]
 8001f1a:	688a      	ldr	r2, [r1, #8]
 8001f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001f22:	684a      	ldr	r2, [r1, #4]
 8001f24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f28:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001f2a:	680a      	ldr	r2, [r1, #0]
 8001f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f30:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001f32:	690a      	ldr	r2, [r1, #16]
 8001f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f38:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001f3a:	694a      	ldr	r2, [r1, #20]
 8001f3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f40:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001f42:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001f44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f48:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001f4a:	6802      	ldr	r2, [r0, #0]
 8001f4c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001f54:	4618      	mov	r0, r3
 8001f56:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001f58:	2002      	movs	r0, #2
}
 8001f5a:	4770      	bx	lr

08001f5c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001f5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001f60:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	f04f 0302 	mov.w	r3, #2
 8001f68:	d018      	beq.n	8001f9c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001f6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f6e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001f70:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f72:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001f74:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f7a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	4322      	orrs	r2, r4
 8001f80:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f88:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001f90:	2301      	movs	r3, #1
 8001f92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f96:	2300      	movs	r3, #0
 8001f98:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001f9c:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001f9e:	bd10      	pop	{r4, pc}

08001fa0 <HAL_TIMEx_CommutationCallback>:
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fa2:	4770      	bx	lr

08001fa4 <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /**Common config 
  */
  hadc1.Instance = ADC1;
 8001fa4:	4824      	ldr	r0, [pc, #144]	; (8002038 <MX_ADC1_Init+0x94>)
 8001fa6:	4b25      	ldr	r3, [pc, #148]	; (800203c <MX_ADC1_Init+0x98>)
{
 8001fa8:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8001faa:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb0:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001fb2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001fb6:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fb8:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001fba:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8001fbc:	2304      	movs	r3, #4
{
 8001fbe:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001fc0:	9401      	str	r4, [sp, #4]
 8001fc2:	9402      	str	r4, [sp, #8]
 8001fc4:	9403      	str	r4, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fc6:	60c5      	str	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fc8:	6144      	str	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fca:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001fcc:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fce:	f7fe fa23 	bl	8000418 <HAL_ADC_Init>
 8001fd2:	b108      	cbz	r0, 8001fd8 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 8001fd4:	f000 f9a2 	bl	800231c <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001fd8:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fda:	a901      	add	r1, sp, #4
 8001fdc:	4816      	ldr	r0, [pc, #88]	; (8002038 <MX_ADC1_Init+0x94>)
  sConfig.Channel = ADC_CHANNEL_0;
 8001fde:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fe0:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001fe2:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fe4:	f7fe f972 	bl	80002cc <HAL_ADC_ConfigChannel>
 8001fe8:	b108      	cbz	r0, 8001fee <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8001fea:	f000 f997 	bl	800231c <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ff2:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ff4:	a901      	add	r1, sp, #4
 8001ff6:	4810      	ldr	r0, [pc, #64]	; (8002038 <MX_ADC1_Init+0x94>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ff8:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ffa:	f7fe f967 	bl	80002cc <HAL_ADC_ConfigChannel>
 8001ffe:	b108      	cbz	r0, 8002004 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8002000:	f000 f98c 	bl	800231c <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002004:	2310      	movs	r3, #16
 8002006:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002008:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800200a:	a901      	add	r1, sp, #4
 800200c:	480a      	ldr	r0, [pc, #40]	; (8002038 <MX_ADC1_Init+0x94>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800200e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002010:	f7fe f95c 	bl	80002cc <HAL_ADC_ConfigChannel>
 8002014:	b108      	cbz	r0, 800201a <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8002016:	f000 f981 	bl	800231c <Error_Handler>
  }
  /**Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800201a:	2311      	movs	r3, #17
 800201c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800201e:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002020:	4805      	ldr	r0, [pc, #20]	; (8002038 <MX_ADC1_Init+0x94>)
 8002022:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002026:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002028:	f7fe f950 	bl	80002cc <HAL_ADC_ConfigChannel>
 800202c:	b108      	cbz	r0, 8002032 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800202e:	f000 f975 	bl	800231c <Error_Handler>
  }

}
 8002032:	b005      	add	sp, #20
 8002034:	bd30      	pop	{r4, r5, pc}
 8002036:	bf00      	nop
 8002038:	2000002c 	.word	0x2000002c
 800203c:	40012400 	.word	0x40012400

08002040 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002040:	b530      	push	{r4, r5, lr}
 8002042:	4605      	mov	r5, r0
 8002044:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002046:	2210      	movs	r2, #16
 8002048:	2100      	movs	r1, #0
 800204a:	a802      	add	r0, sp, #8
 800204c:	f000 fb64 	bl	8002718 <memset>
  if(adcHandle->Instance==ADC1)
 8002050:	682a      	ldr	r2, [r5, #0]
 8002052:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <HAL_ADC_MspInit+0x94>)
 8002054:	429a      	cmp	r2, r3
 8002056:	d13a      	bne.n	80020ce <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002058:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800205c:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = ADC1_IN0_Pin|ADC1_IN1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	481e      	ldr	r0, [pc, #120]	; (80020d8 <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002064:	619a      	str	r2, [r3, #24]
 8002066:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800206a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800206e:	9200      	str	r2, [sp, #0]
 8002070:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002074:	4c19      	ldr	r4, [pc, #100]	; (80020dc <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	f042 0204 	orr.w	r2, r2, #4
 800207a:	619a      	str	r2, [r3, #24]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ADC1_IN0_Pin|ADC1_IN1_Pin;
 8002086:	2303      	movs	r3, #3
 8002088:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f7fe fbba 	bl	8000804 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002090:	2280      	movs	r2, #128	; 0x80
 8002092:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002094:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Instance = DMA1_Channel1;
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800209a:	6122      	str	r2, [r4, #16]
    hdma_adc1.Instance = DMA1_Channel1;
 800209c:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800209e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a2:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020a4:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a6:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a8:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020aa:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80020ac:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020ae:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020b0:	f7fe fa9c 	bl	80005ec <HAL_DMA_Init>
 80020b4:	b108      	cbz	r0, 80020ba <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80020b6:	f000 f931 	bl	800231c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80020ba:	622c      	str	r4, [r5, #32]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 3);
 80020bc:	2012      	movs	r0, #18
 80020be:	2203      	movs	r2, #3
 80020c0:	2101      	movs	r1, #1
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80020c2:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 3);
 80020c4:	f7fe fa3c 	bl	8000540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80020c8:	2012      	movs	r0, #18
 80020ca:	f7fe fa6d 	bl	80005a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80020ce:	b007      	add	sp, #28
 80020d0:	bd30      	pop	{r4, r5, pc}
 80020d2:	bf00      	nop
 80020d4:	40012400 	.word	0x40012400
 80020d8:	40010800 	.word	0x40010800
 80020dc:	2000005c 	.word	0x2000005c
 80020e0:	40020008 	.word	0x40020008

080020e4 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <MX_DMA_Init+0x3c>)
{
 80020e6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020e8:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 2);
 80020ea:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020ec:	f042 0201 	orr.w	r2, r2, #1
 80020f0:	615a      	str	r2, [r3, #20]
 80020f2:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 2);
 80020f4:	2202      	movs	r2, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 2);
 80020fc:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020fe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 2);
 8002100:	f7fe fa1e 	bl	8000540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002104:	200b      	movs	r0, #11
 8002106:	f7fe fa4f 	bl	80005a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 3);
 800210a:	2203      	movs	r2, #3
 800210c:	2100      	movs	r1, #0
 800210e:	2011      	movs	r0, #17
 8002110:	f7fe fa16 	bl	8000540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002114:	2011      	movs	r0, #17
 8002116:	f7fe fa47 	bl	80005a8 <HAL_NVIC_EnableIRQ>

}
 800211a:	b003      	add	sp, #12
 800211c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002120:	40021000 	.word	0x40021000

08002124 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	2210      	movs	r2, #16
{
 8002126:	b500      	push	{lr}
 8002128:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212a:	eb0d 0002 	add.w	r0, sp, r2
 800212e:	2100      	movs	r1, #0
 8002130:	f000 faf2 	bl	8002718 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <MX_GPIO_Init+0x60>)

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TRIGGER1_Pin|TRIGGER2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002136:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002138:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213a:	4813      	ldr	r0, [pc, #76]	; (8002188 <MX_GPIO_Init+0x64>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800213c:	f042 0220 	orr.w	r2, r2, #32
 8002140:	619a      	str	r2, [r3, #24]
 8002142:	699a      	ldr	r2, [r3, #24]
 8002144:	f002 0220 	and.w	r2, r2, #32
 8002148:	9201      	str	r2, [sp, #4]
 800214a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	f042 0204 	orr.w	r2, r2, #4
 8002152:	619a      	str	r2, [r3, #24]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	f002 0204 	and.w	r2, r2, #4
 800215a:	9202      	str	r2, [sp, #8]
 800215c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	f042 0208 	orr.w	r2, r2, #8
 8002164:	619a      	str	r2, [r3, #24]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	9303      	str	r3, [sp, #12]
 800216e:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = TRIGGER1_Pin|TRIGGER2_Pin;
 8002170:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002174:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <MX_GPIO_Init+0x68>)
 8002178:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217a:	f7fe fb43 	bl	8000804 <HAL_GPIO_Init>

}
 800217e:	b009      	add	sp, #36	; 0x24
 8002180:	f85d fb04 	ldr.w	pc, [sp], #4
 8002184:	40021000 	.word	0x40021000
 8002188:	40010c00 	.word	0x40010c00
 800218c:	10210000 	.word	0x10210000

08002190 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002190:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8002192:	480c      	ldr	r0, [pc, #48]	; (80021c4 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <MX_I2C1_Init+0x38>)
 8002196:	f8df e034 	ldr.w	lr, [pc, #52]	; 80021cc <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800219a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 800219e:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021a2:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021a4:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021a6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021a8:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021aa:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021ac:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021ae:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021b0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021b2:	f7fe fc07 	bl	80009c4 <HAL_I2C_Init>
 80021b6:	b118      	cbz	r0, 80021c0 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 80021b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80021bc:	f000 b8ae 	b.w	800231c <Error_Handler>
 80021c0:	bd08      	pop	{r3, pc}
 80021c2:	bf00      	nop
 80021c4:	200000a0 	.word	0x200000a0
 80021c8:	40005400 	.word	0x40005400
 80021cc:	000186a0 	.word	0x000186a0

080021d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021d0:	b530      	push	{r4, r5, lr}
 80021d2:	4605      	mov	r5, r0
 80021d4:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d6:	2210      	movs	r2, #16
 80021d8:	2100      	movs	r1, #0
 80021da:	a802      	add	r0, sp, #8
 80021dc:	f000 fa9c 	bl	8002718 <memset>
  if(i2cHandle->Instance==I2C1)
 80021e0:	682a      	ldr	r2, [r5, #0]
 80021e2:	4b23      	ldr	r3, [pc, #140]	; (8002270 <HAL_I2C_MspInit+0xa0>)
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d140      	bne.n	800226a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e8:	4c22      	ldr	r4, [pc, #136]	; (8002274 <HAL_I2C_MspInit+0xa4>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ea:	4823      	ldr	r0, [pc, #140]	; (8002278 <HAL_I2C_MspInit+0xa8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ec:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ee:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f0:	f043 0308 	orr.w	r3, r3, #8
 80021f4:	61a3      	str	r3, [r4, #24]
 80021f6:	69a3      	ldr	r3, [r4, #24]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002200:	23c0      	movs	r3, #192	; 0xc0
 8002202:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002204:	2312      	movs	r3, #18
 8002206:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220c:	f7fe fafa 	bl	8000804 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002210:	69e3      	ldr	r3, [r4, #28]
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002212:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002214:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002218:	61e3      	str	r3, [r4, #28]
 800221a:	69e3      	ldr	r3, [r4, #28]
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800221c:	4c17      	ldr	r4, [pc, #92]	; (800227c <HAL_I2C_MspInit+0xac>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 800221e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8002226:	4b16      	ldr	r3, [pc, #88]	; (8002280 <HAL_I2C_MspInit+0xb0>)
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002228:	4620      	mov	r0, r4
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800222a:	6023      	str	r3, [r4, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800222c:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800222e:	60e2      	str	r2, [r4, #12]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002230:	6063      	str	r3, [r4, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002232:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002234:	6123      	str	r3, [r4, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002236:	6163      	str	r3, [r4, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002238:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800223a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800223c:	f7fe f9d6 	bl	80005ec <HAL_DMA_Init>
 8002240:	b108      	cbz	r0, 8002246 <HAL_I2C_MspInit+0x76>
    {
      Error_Handler();
 8002242:	f000 f86b 	bl	800231c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 1);
 8002246:	2201      	movs	r2, #1
 8002248:	201f      	movs	r0, #31
 800224a:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800224c:	63ac      	str	r4, [r5, #56]	; 0x38
 800224e:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 1);
 8002250:	f7fe f976 	bl	8000540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002254:	201f      	movs	r0, #31
 8002256:	f7fe f9a7 	bl	80005a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
 800225a:	2020      	movs	r0, #32
 800225c:	2200      	movs	r2, #0
 800225e:	2101      	movs	r1, #1
 8002260:	f7fe f96e 	bl	8000540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002264:	2020      	movs	r0, #32
 8002266:	f7fe f99f 	bl	80005a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800226a:	b007      	add	sp, #28
 800226c:	bd30      	pop	{r4, r5, pc}
 800226e:	bf00      	nop
 8002270:	40005400 	.word	0x40005400
 8002274:	40021000 	.word	0x40021000
 8002278:	40010c00 	.word	0x40010c00
 800227c:	200000f4 	.word	0x200000f4
 8002280:	40020080 	.word	0x40020080

08002284 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002284:	2228      	movs	r2, #40	; 0x28
{
 8002286:	b510      	push	{r4, lr}
 8002288:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800228a:	eb0d 0002 	add.w	r0, sp, r2
 800228e:	2100      	movs	r1, #0
 8002290:	f000 fa42 	bl	8002718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002294:	2214      	movs	r2, #20
 8002296:	2100      	movs	r1, #0
 8002298:	eb0d 0002 	add.w	r0, sp, r2
 800229c:	f000 fa3c 	bl	8002718 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a0:	2100      	movs	r1, #0
 80022a2:	2210      	movs	r2, #16
 80022a4:	a801      	add	r0, sp, #4
 80022a6:	f000 fa37 	bl	8002718 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022aa:	2301      	movs	r3, #1
 80022ac:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022ae:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b4:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80022b6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022ba:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c0:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80022c2:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022c4:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022c6:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c8:	f7ff f8c8 	bl	800145c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022cc:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022d2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d4:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022d6:	4621      	mov	r1, r4
 80022d8:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022da:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022dc:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022de:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e0:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022e2:	f7ff fa83 	bl	80017ec <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80022e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ea:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022ec:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80022ee:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022f0:	f7ff fb3e 	bl	8001970 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80022f4:	b014      	add	sp, #80	; 0x50
 80022f6:	bd10      	pop	{r4, pc}

080022f8 <main>:
{
 80022f8:	b508      	push	{r3, lr}
  HAL_Init();
 80022fa:	f7fd ff4b 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80022fe:	f7ff ffc1 	bl	8002284 <SystemClock_Config>
  MX_GPIO_Init();
 8002302:	f7ff ff0f 	bl	8002124 <MX_GPIO_Init>
  MX_DMA_Init();
 8002306:	f7ff feed 	bl	80020e4 <MX_DMA_Init>
  MX_TIM1_Init();
 800230a:	f000 f8f7 	bl	80024fc <MX_TIM1_Init>
  MX_ADC1_Init();
 800230e:	f7ff fe49 	bl	8001fa4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002312:	f7ff ff3d 	bl	8002190 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002316:	f000 f969 	bl	80025ec <MX_TIM3_Init>
 800231a:	e7fe      	b.n	800231a <main+0x22>

0800231c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800231c:	4770      	bx	lr
	...

08002320 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002320:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_MspInit+0x44>)
{
 8002322:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002324:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002326:	2005      	movs	r0, #5
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002328:	f042 0201 	orr.w	r2, r2, #1
 800232c:	619a      	str	r2, [r3, #24]
 800232e:	699a      	ldr	r2, [r3, #24]
 8002330:	f002 0201 	and.w	r2, r2, #1
 8002334:	9200      	str	r2, [sp, #0]
 8002336:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002338:	69da      	ldr	r2, [r3, #28]
 800233a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800233e:	61da      	str	r2, [r3, #28]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800234a:	f7fe f8e7 	bl	800051c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /**NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST 
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 800234e:	4a06      	ldr	r2, [pc, #24]	; (8002368 <HAL_MspInit+0x48>)
 8002350:	6853      	ldr	r3, [r2, #4]
 8002352:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800235c:	b003      	add	sp, #12
 800235e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000
 8002368:	40010000 	.word	0x40010000

0800236c <NMI_Handler>:
 800236c:	4770      	bx	lr

0800236e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800236e:	e7fe      	b.n	800236e <HardFault_Handler>

08002370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002370:	e7fe      	b.n	8002370 <MemManage_Handler>

08002372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002372:	e7fe      	b.n	8002372 <BusFault_Handler>

08002374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002374:	e7fe      	b.n	8002374 <UsageFault_Handler>

08002376 <SVC_Handler>:
 8002376:	4770      	bx	lr

08002378 <DebugMon_Handler>:
 8002378:	4770      	bx	lr

0800237a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800237a:	4770      	bx	lr

0800237c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800237c:	f7fd bf1c 	b.w	80001b8 <HAL_IncTick>

08002380 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002380:	4801      	ldr	r0, [pc, #4]	; (8002388 <DMA1_Channel1_IRQHandler+0x8>)
 8002382:	f7fe b9ab 	b.w	80006dc <HAL_DMA_IRQHandler>
 8002386:	bf00      	nop
 8002388:	2000005c 	.word	0x2000005c

0800238c <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800238c:	4801      	ldr	r0, [pc, #4]	; (8002394 <DMA1_Channel7_IRQHandler+0x8>)
 800238e:	f7fe b9a5 	b.w	80006dc <HAL_DMA_IRQHandler>
 8002392:	bf00      	nop
 8002394:	200000f4 	.word	0x200000f4

08002398 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002398:	4801      	ldr	r0, [pc, #4]	; (80023a0 <ADC1_2_IRQHandler+0x8>)
 800239a:	f7fd bf21 	b.w	80001e0 <HAL_ADC_IRQHandler>
 800239e:	bf00      	nop
 80023a0:	2000002c 	.word	0x2000002c

080023a4 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023a4:	4801      	ldr	r0, [pc, #4]	; (80023ac <TIM1_UP_IRQHandler+0x8>)
 80023a6:	f7ff bc4a 	b.w	8001c3e <HAL_TIM_IRQHandler>
 80023aa:	bf00      	nop
 80023ac:	20000178 	.word	0x20000178

080023b0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023b0:	4801      	ldr	r0, [pc, #4]	; (80023b8 <TIM3_IRQHandler+0x8>)
 80023b2:	f7ff bc44 	b.w	8001c3e <HAL_TIM_IRQHandler>
 80023b6:	bf00      	nop
 80023b8:	20000138 	.word	0x20000138

080023bc <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80023bc:	4801      	ldr	r0, [pc, #4]	; (80023c4 <I2C1_EV_IRQHandler+0x8>)
 80023be:	f7fe bc1f 	b.w	8000c00 <HAL_I2C_EV_IRQHandler>
 80023c2:	bf00      	nop
 80023c4:	200000a0 	.word	0x200000a0

080023c8 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80023c8:	4801      	ldr	r0, [pc, #4]	; (80023d0 <I2C1_ER_IRQHandler+0x8>)
 80023ca:	f7fe bf83 	b.w	80012d4 <HAL_I2C_ER_IRQHandler>
 80023ce:	bf00      	nop
 80023d0:	200000a0 	.word	0x200000a0

080023d4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <SystemInit+0x40>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	f042 0201 	orr.w	r2, r2, #1
 80023dc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	4a0d      	ldr	r2, [pc, #52]	; (8002418 <SystemInit+0x44>)
 80023e2:	400a      	ands	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80023ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023f0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023f8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002400:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002402:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002406:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002408:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <SystemInit+0x48>)
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	f8ff0000 	.word	0xf8ff0000
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002420:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM1)
 8002422:	6803      	ldr	r3, [r0, #0]
 8002424:	4a15      	ldr	r2, [pc, #84]	; (800247c <HAL_TIM_Base_MspInit+0x5c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d114      	bne.n	8002454 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_TIM_Base_MspInit+0x60>)

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 2);
 800242c:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 800242e:	699a      	ldr	r2, [r3, #24]
 8002430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002434:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 2);
 8002436:	2202      	movs	r2, #2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002438:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 2);
 800243a:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800243c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 2);
 8002444:	f7fe f87c 	bl	8000540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002448:	2019      	movs	r0, #25
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 3);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800244a:	f7fe f8ad 	bl	80005a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800244e:	b003      	add	sp, #12
 8002450:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM3)
 8002454:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <HAL_TIM_Base_MspInit+0x64>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d1f9      	bne.n	800244e <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_TIM_Base_MspInit+0x60>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 3);
 800245c:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 800245e:	69da      	ldr	r2, [r3, #28]
 8002460:	f042 0202 	orr.w	r2, r2, #2
 8002464:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 3);
 8002466:	2203      	movs	r2, #3
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002468:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 3);
 800246a:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 3);
 8002474:	f7fe f864 	bl	8000540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002478:	201d      	movs	r0, #29
 800247a:	e7e6      	b.n	800244a <HAL_TIM_Base_MspInit+0x2a>
 800247c:	40012c00 	.word	0x40012c00
 8002480:	40021000 	.word	0x40021000
 8002484:	40000400 	.word	0x40000400

08002488 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002488:	b510      	push	{r4, lr}
 800248a:	4604      	mov	r4, r0
 800248c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248e:	2210      	movs	r2, #16
 8002490:	2100      	movs	r1, #0
 8002492:	a802      	add	r0, sp, #8
 8002494:	f000 f940 	bl	8002718 <memset>
  if(timHandle->Instance==TIM1)
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	4a14      	ldr	r2, [pc, #80]	; (80024ec <HAL_TIM_MspPostInit+0x64>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d116      	bne.n	80024ce <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <HAL_TIM_MspPostInit+0x68>)
 80024a2:	699a      	ldr	r2, [r3, #24]
 80024a4:	f042 0204 	orr.w	r2, r2, #4
 80024a8:	619a      	str	r2, [r3, #24]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	9b00      	ldr	r3, [sp, #0]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Pin|TIM1_CH2_Pin|TIM1_CH3_Pin;
 80024b4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = TIM3_CH1_Pin;
 80024b8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80024be:	2301      	movs	r3, #1
    HAL_GPIO_Init(TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 80024c0:	a902      	add	r1, sp, #8
 80024c2:	480c      	ldr	r0, [pc, #48]	; (80024f4 <HAL_TIM_MspPostInit+0x6c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80024c4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 80024c6:	f7fe f99d 	bl	8000804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80024ca:	b006      	add	sp, #24
 80024cc:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM3)
 80024ce:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_TIM_MspPostInit+0x70>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d1fa      	bne.n	80024ca <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_TIM_MspPostInit+0x68>)
 80024d6:	699a      	ldr	r2, [r3, #24]
 80024d8:	f042 0204 	orr.w	r2, r2, #4
 80024dc:	619a      	str	r2, [r3, #24]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	9301      	str	r3, [sp, #4]
 80024e6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = TIM3_CH1_Pin;
 80024e8:	2340      	movs	r3, #64	; 0x40
 80024ea:	e7e5      	b.n	80024b8 <HAL_TIM_MspPostInit+0x30>
 80024ec:	40012c00 	.word	0x40012c00
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40010800 	.word	0x40010800
 80024f8:	40000400 	.word	0x40000400

080024fc <MX_TIM1_Init>:
{
 80024fc:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fe:	2400      	movs	r4, #0
{
 8002500:	b096      	sub	sp, #88	; 0x58
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002502:	2214      	movs	r2, #20
 8002504:	2100      	movs	r1, #0
 8002506:	a803      	add	r0, sp, #12
 8002508:	f000 f906 	bl	8002718 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800250c:	221c      	movs	r2, #28
 800250e:	4621      	mov	r1, r4
 8002510:	a808      	add	r0, sp, #32
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002512:	9401      	str	r4, [sp, #4]
 8002514:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002516:	f000 f8ff 	bl	8002718 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800251a:	221c      	movs	r2, #28
 800251c:	4621      	mov	r1, r4
 800251e:	a80f      	add	r0, sp, #60	; 0x3c
 8002520:	f000 f8fa 	bl	8002718 <memset>
  htim1.Init.Prescaler = 0x0a;
 8002524:	230a      	movs	r3, #10
  htim1.Instance = TIM1;
 8002526:	482f      	ldr	r0, [pc, #188]	; (80025e4 <MX_TIM1_Init+0xe8>)
  htim1.Init.Prescaler = 0x0a;
 8002528:	4a2f      	ldr	r2, [pc, #188]	; (80025e8 <MX_TIM1_Init+0xec>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252a:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 0x0a;
 800252c:	e880 000c 	stmia.w	r0, {r2, r3}
  htim1.Init.Period = 0xff;
 8002530:	23ff      	movs	r3, #255	; 0xff
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002532:	6104      	str	r4, [r0, #16]
  htim1.Init.Period = 0xff;
 8002534:	60c3      	str	r3, [r0, #12]
  htim1.Init.RepetitionCounter = 0;
 8002536:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002538:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800253a:	f7ff fc5b 	bl	8001df4 <HAL_TIM_Base_Init>
 800253e:	b108      	cbz	r0, 8002544 <MX_TIM1_Init+0x48>
    Error_Handler();
 8002540:	f7ff feec 	bl	800231c <Error_Handler>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002544:	4827      	ldr	r0, [pc, #156]	; (80025e4 <MX_TIM1_Init+0xe8>)
 8002546:	f7ff fc6f 	bl	8001e28 <HAL_TIM_OC_Init>
 800254a:	b108      	cbz	r0, 8002550 <MX_TIM1_Init+0x54>
    Error_Handler();
 800254c:	f7ff fee6 	bl	800231c <Error_Handler>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002550:	2306      	movs	r3, #6
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002552:	2400      	movs	r4, #0
  if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
 8002554:	a903      	add	r1, sp, #12
 8002556:	4823      	ldr	r0, [pc, #140]	; (80025e4 <MX_TIM1_Init+0xe8>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002558:	9303      	str	r3, [sp, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800255a:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
 800255c:	f7ff fb4a 	bl	8001bf4 <HAL_TIM_SlaveConfigSynchronization>
 8002560:	b108      	cbz	r0, 8002566 <MX_TIM1_Init+0x6a>
    Error_Handler();
 8002562:	f7ff fedb 	bl	800231c <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002566:	a901      	add	r1, sp, #4
 8002568:	481e      	ldr	r0, [pc, #120]	; (80025e4 <MX_TIM1_Init+0xe8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800256a:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256c:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800256e:	f7ff fcf5 	bl	8001f5c <HAL_TIMEx_MasterConfigSynchronization>
 8002572:	b108      	cbz	r0, 8002578 <MX_TIM1_Init+0x7c>
    Error_Handler();
 8002574:	f7ff fed2 	bl	800231c <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002578:	2200      	movs	r2, #0
  sConfigOC.Pulse = 0x0c;
 800257a:	230c      	movs	r3, #12
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800257c:	a908      	add	r1, sp, #32
 800257e:	4819      	ldr	r0, [pc, #100]	; (80025e4 <MX_TIM1_Init+0xe8>)
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002580:	9208      	str	r2, [sp, #32]
  sConfigOC.Pulse = 0x0c;
 8002582:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002584:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002586:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002588:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800258a:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800258c:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800258e:	f7ff fc91 	bl	8001eb4 <HAL_TIM_OC_ConfigChannel>
 8002592:	b108      	cbz	r0, 8002598 <MX_TIM1_Init+0x9c>
    Error_Handler();
 8002594:	f7ff fec2 	bl	800231c <Error_Handler>
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002598:	2204      	movs	r2, #4
 800259a:	a908      	add	r1, sp, #32
 800259c:	4811      	ldr	r0, [pc, #68]	; (80025e4 <MX_TIM1_Init+0xe8>)
 800259e:	f7ff fc89 	bl	8001eb4 <HAL_TIM_OC_ConfigChannel>
 80025a2:	b108      	cbz	r0, 80025a8 <MX_TIM1_Init+0xac>
    Error_Handler();
 80025a4:	f7ff feba 	bl	800231c <Error_Handler>
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025a8:	2208      	movs	r2, #8
 80025aa:	a908      	add	r1, sp, #32
 80025ac:	480d      	ldr	r0, [pc, #52]	; (80025e4 <MX_TIM1_Init+0xe8>)
 80025ae:	f7ff fc81 	bl	8001eb4 <HAL_TIM_OC_ConfigChannel>
 80025b2:	b108      	cbz	r0, 80025b8 <MX_TIM1_Init+0xbc>
    Error_Handler();
 80025b4:	f7ff feb2 	bl	800231c <Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025b8:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025be:	a90f      	add	r1, sp, #60	; 0x3c
 80025c0:	4808      	ldr	r0, [pc, #32]	; (80025e4 <MX_TIM1_Init+0xe8>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025c2:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025c4:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025c6:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 80025c8:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025ca:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025cc:	9214      	str	r2, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025ce:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025d0:	f7ff fc9e 	bl	8001f10 <HAL_TIMEx_ConfigBreakDeadTime>
 80025d4:	b108      	cbz	r0, 80025da <MX_TIM1_Init+0xde>
    Error_Handler();
 80025d6:	f7ff fea1 	bl	800231c <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 80025da:	4802      	ldr	r0, [pc, #8]	; (80025e4 <MX_TIM1_Init+0xe8>)
 80025dc:	f7ff ff54 	bl	8002488 <HAL_TIM_MspPostInit>
}
 80025e0:	b016      	add	sp, #88	; 0x58
 80025e2:	bd10      	pop	{r4, pc}
 80025e4:	20000178 	.word	0x20000178
 80025e8:	40012c00 	.word	0x40012c00

080025ec <MX_TIM3_Init>:
{
 80025ec:	b510      	push	{r4, lr}
 80025ee:	b08e      	sub	sp, #56	; 0x38
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80025f0:	2214      	movs	r2, #20
 80025f2:	2100      	movs	r1, #0
 80025f4:	a802      	add	r0, sp, #8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f6:	2400      	movs	r4, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80025f8:	f000 f88e 	bl	8002718 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025fc:	221c      	movs	r2, #28
 80025fe:	4621      	mov	r1, r4
 8002600:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002604:	9400      	str	r4, [sp, #0]
 8002606:	9401      	str	r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002608:	f000 f886 	bl	8002718 <memset>
  htim3.Instance = TIM3;
 800260c:	481b      	ldr	r0, [pc, #108]	; (800267c <MX_TIM3_Init+0x90>)
 800260e:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <MX_TIM3_Init+0x94>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002610:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 0;
 8002612:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.Period = 0;
 8002616:	60c4      	str	r4, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002618:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800261a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800261c:	f7ff fbea 	bl	8001df4 <HAL_TIM_Base_Init>
 8002620:	b108      	cbz	r0, 8002626 <MX_TIM3_Init+0x3a>
    Error_Handler();
 8002622:	f7ff fe7b 	bl	800231c <Error_Handler>
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002626:	4815      	ldr	r0, [pc, #84]	; (800267c <MX_TIM3_Init+0x90>)
 8002628:	f7ff fbfe 	bl	8001e28 <HAL_TIM_OC_Init>
 800262c:	b108      	cbz	r0, 8002632 <MX_TIM3_Init+0x46>
    Error_Handler();
 800262e:	f7ff fe75 	bl	800231c <Error_Handler>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002632:	2306      	movs	r3, #6
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002634:	2400      	movs	r4, #0
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 8002636:	a902      	add	r1, sp, #8
 8002638:	4810      	ldr	r0, [pc, #64]	; (800267c <MX_TIM3_Init+0x90>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800263a:	9302      	str	r3, [sp, #8]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800263c:	9403      	str	r4, [sp, #12]
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 800263e:	f7ff fad9 	bl	8001bf4 <HAL_TIM_SlaveConfigSynchronization>
 8002642:	b108      	cbz	r0, 8002648 <MX_TIM3_Init+0x5c>
    Error_Handler();
 8002644:	f7ff fe6a 	bl	800231c <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002648:	4669      	mov	r1, sp
 800264a:	480c      	ldr	r0, [pc, #48]	; (800267c <MX_TIM3_Init+0x90>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800264c:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264e:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002650:	f7ff fc84 	bl	8001f5c <HAL_TIMEx_MasterConfigSynchronization>
 8002654:	b108      	cbz	r0, 800265a <MX_TIM3_Init+0x6e>
    Error_Handler();
 8002656:	f7ff fe61 	bl	800231c <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800265a:	2200      	movs	r2, #0
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800265c:	a907      	add	r1, sp, #28
 800265e:	4807      	ldr	r0, [pc, #28]	; (800267c <MX_TIM3_Init+0x90>)
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002660:	9207      	str	r2, [sp, #28]
  sConfigOC.Pulse = 0;
 8002662:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002664:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002666:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002668:	f7ff fc24 	bl	8001eb4 <HAL_TIM_OC_ConfigChannel>
 800266c:	b108      	cbz	r0, 8002672 <MX_TIM3_Init+0x86>
    Error_Handler();
 800266e:	f7ff fe55 	bl	800231c <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8002672:	4802      	ldr	r0, [pc, #8]	; (800267c <MX_TIM3_Init+0x90>)
 8002674:	f7ff ff08 	bl	8002488 <HAL_TIM_MspPostInit>
}
 8002678:	b00e      	add	sp, #56	; 0x38
 800267a:	bd10      	pop	{r4, pc}
 800267c:	20000138 	.word	0x20000138
 8002680:	40000400 	.word	0x40000400

08002684 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002684:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002686:	e003      	b.n	8002690 <LoopCopyDataInit>

08002688 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800268a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800268c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800268e:	3104      	adds	r1, #4

08002690 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002690:	480a      	ldr	r0, [pc, #40]	; (80026bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002694:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002696:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002698:	d3f6      	bcc.n	8002688 <CopyDataInit>
  ldr r2, =_sbss
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800269c:	e002      	b.n	80026a4 <LoopFillZerobss>

0800269e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80026a0:	f842 3b04 	str.w	r3, [r2], #4

080026a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80026a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80026a8:	d3f9      	bcc.n	800269e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026aa:	f7ff fe93 	bl	80023d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ae:	f000 f80f 	bl	80026d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026b2:	f7ff fe21 	bl	80022f8 <main>
  bx lr
 80026b6:	4770      	bx	lr
  ldr r3, =_sidata
 80026b8:	08002770 	.word	0x08002770
  ldr r0, =_sdata
 80026bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80026c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80026c4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80026c8:	200001b8 	.word	0x200001b8

080026cc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026cc:	e7fe      	b.n	80026cc <CAN1_RX1_IRQHandler>
	...

080026d0 <__libc_init_array>:
 80026d0:	b570      	push	{r4, r5, r6, lr}
 80026d2:	2500      	movs	r5, #0
 80026d4:	4e0c      	ldr	r6, [pc, #48]	; (8002708 <__libc_init_array+0x38>)
 80026d6:	4c0d      	ldr	r4, [pc, #52]	; (800270c <__libc_init_array+0x3c>)
 80026d8:	1ba4      	subs	r4, r4, r6
 80026da:	10a4      	asrs	r4, r4, #2
 80026dc:	42a5      	cmp	r5, r4
 80026de:	d109      	bne.n	80026f4 <__libc_init_array+0x24>
 80026e0:	f000 f822 	bl	8002728 <_init>
 80026e4:	2500      	movs	r5, #0
 80026e6:	4e0a      	ldr	r6, [pc, #40]	; (8002710 <__libc_init_array+0x40>)
 80026e8:	4c0a      	ldr	r4, [pc, #40]	; (8002714 <__libc_init_array+0x44>)
 80026ea:	1ba4      	subs	r4, r4, r6
 80026ec:	10a4      	asrs	r4, r4, #2
 80026ee:	42a5      	cmp	r5, r4
 80026f0:	d105      	bne.n	80026fe <__libc_init_array+0x2e>
 80026f2:	bd70      	pop	{r4, r5, r6, pc}
 80026f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026f8:	4798      	blx	r3
 80026fa:	3501      	adds	r5, #1
 80026fc:	e7ee      	b.n	80026dc <__libc_init_array+0xc>
 80026fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002702:	4798      	blx	r3
 8002704:	3501      	adds	r5, #1
 8002706:	e7f2      	b.n	80026ee <__libc_init_array+0x1e>
 8002708:	08002768 	.word	0x08002768
 800270c:	08002768 	.word	0x08002768
 8002710:	08002768 	.word	0x08002768
 8002714:	0800276c 	.word	0x0800276c

08002718 <memset>:
 8002718:	4603      	mov	r3, r0
 800271a:	4402      	add	r2, r0
 800271c:	4293      	cmp	r3, r2
 800271e:	d100      	bne.n	8002722 <memset+0xa>
 8002720:	4770      	bx	lr
 8002722:	f803 1b01 	strb.w	r1, [r3], #1
 8002726:	e7f9      	b.n	800271c <memset+0x4>

08002728 <_init>:
 8002728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272a:	bf00      	nop
 800272c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272e:	bc08      	pop	{r3}
 8002730:	469e      	mov	lr, r3
 8002732:	4770      	bx	lr

08002734 <_fini>:
 8002734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002736:	bf00      	nop
 8002738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800273a:	bc08      	pop	{r3}
 800273c:	469e      	mov	lr, r3
 800273e:	4770      	bx	lr
