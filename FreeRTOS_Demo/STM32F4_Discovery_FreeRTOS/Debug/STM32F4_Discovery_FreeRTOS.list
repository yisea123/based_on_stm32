
STM32F4_Discovery_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004958  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08004b18  08004b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004dd0  08004dd0  00014dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004dd8  08004dd8  00014dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004ddc  08004ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08004de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          00008614  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20008624  20008624  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   00033e93  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005822  00000000  00000000  00053ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000f1a2  00000000  00000000  000596f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017d0  00000000  00000000  00068898  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016e8  00000000  00000000  0006a068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003397a  00000000  00000000  0006b750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c5e1  00000000  00000000  0009f0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010dc8f  00000000  00000000  000bb6ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  001c933a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004278  00000000  00000000  001c93b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004b00 	.word	0x08004b00

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	08004b00 	.word	0x08004b00

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b97a 	b.w	800050c <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	468c      	mov	ip, r1
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	9e08      	ldr	r6, [sp, #32]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d151      	bne.n	80002e4 <__udivmoddi4+0xb4>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d96d      	bls.n	8000322 <__udivmoddi4+0xf2>
 8000246:	fab2 fe82 	clz	lr, r2
 800024a:	f1be 0f00 	cmp.w	lr, #0
 800024e:	d00b      	beq.n	8000268 <__udivmoddi4+0x38>
 8000250:	f1ce 0c20 	rsb	ip, lr, #32
 8000254:	fa01 f50e 	lsl.w	r5, r1, lr
 8000258:	fa20 fc0c 	lsr.w	ip, r0, ip
 800025c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000260:	ea4c 0c05 	orr.w	ip, ip, r5
 8000264:	fa00 f40e 	lsl.w	r4, r0, lr
 8000268:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800026c:	0c25      	lsrs	r5, r4, #16
 800026e:	fbbc f8fa 	udiv	r8, ip, sl
 8000272:	fa1f f987 	uxth.w	r9, r7
 8000276:	fb0a cc18 	mls	ip, sl, r8, ip
 800027a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800027e:	fb08 f309 	mul.w	r3, r8, r9
 8000282:	42ab      	cmp	r3, r5
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x6c>
 8000286:	19ed      	adds	r5, r5, r7
 8000288:	f108 32ff 	add.w	r2, r8, #4294967295
 800028c:	f080 8123 	bcs.w	80004d6 <__udivmoddi4+0x2a6>
 8000290:	42ab      	cmp	r3, r5
 8000292:	f240 8120 	bls.w	80004d6 <__udivmoddi4+0x2a6>
 8000296:	f1a8 0802 	sub.w	r8, r8, #2
 800029a:	443d      	add	r5, r7
 800029c:	1aed      	subs	r5, r5, r3
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ac:	fb00 f909 	mul.w	r9, r0, r9
 80002b0:	45a1      	cmp	r9, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x98>
 80002b4:	19e4      	adds	r4, r4, r7
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ba:	f080 810a 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80002be:	45a1      	cmp	r9, r4
 80002c0:	f240 8107 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80002c4:	3802      	subs	r0, #2
 80002c6:	443c      	add	r4, r7
 80002c8:	eba4 0409 	sub.w	r4, r4, r9
 80002cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d0:	2100      	movs	r1, #0
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d061      	beq.n	800039a <__udivmoddi4+0x16a>
 80002d6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002da:	2300      	movs	r3, #0
 80002dc:	6034      	str	r4, [r6, #0]
 80002de:	6073      	str	r3, [r6, #4]
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xc8>
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d054      	beq.n	8000396 <__udivmoddi4+0x166>
 80002ec:	2100      	movs	r1, #0
 80002ee:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f2:	4608      	mov	r0, r1
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	fab3 f183 	clz	r1, r3
 80002fc:	2900      	cmp	r1, #0
 80002fe:	f040 808e 	bne.w	800041e <__udivmoddi4+0x1ee>
 8000302:	42ab      	cmp	r3, r5
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xdc>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2d0>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb65 0503 	sbc.w	r5, r5, r3
 8000312:	2001      	movs	r0, #1
 8000314:	46ac      	mov	ip, r5
 8000316:	2e00      	cmp	r6, #0
 8000318:	d03f      	beq.n	800039a <__udivmoddi4+0x16a>
 800031a:	e886 1010 	stmia.w	r6, {r4, ip}
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	b912      	cbnz	r2, 800032a <__udivmoddi4+0xfa>
 8000324:	2701      	movs	r7, #1
 8000326:	fbb7 f7f2 	udiv	r7, r7, r2
 800032a:	fab7 fe87 	clz	lr, r7
 800032e:	f1be 0f00 	cmp.w	lr, #0
 8000332:	d134      	bne.n	800039e <__udivmoddi4+0x16e>
 8000334:	1beb      	subs	r3, r5, r7
 8000336:	0c3a      	lsrs	r2, r7, #16
 8000338:	fa1f fc87 	uxth.w	ip, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000342:	0c25      	lsrs	r5, r4, #16
 8000344:	fb02 3318 	mls	r3, r2, r8, r3
 8000348:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800034c:	fb0c f308 	mul.w	r3, ip, r8
 8000350:	42ab      	cmp	r3, r5
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x134>
 8000354:	19ed      	adds	r5, r5, r7
 8000356:	f108 30ff 	add.w	r0, r8, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x132>
 800035c:	42ab      	cmp	r3, r5
 800035e:	f200 80d1 	bhi.w	8000504 <__udivmoddi4+0x2d4>
 8000362:	4680      	mov	r8, r0
 8000364:	1aed      	subs	r5, r5, r3
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb5 f0f2 	udiv	r0, r5, r2
 800036c:	fb02 5510 	mls	r5, r2, r0, r5
 8000370:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000374:	fb0c fc00 	mul.w	ip, ip, r0
 8000378:	45a4      	cmp	ip, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x15c>
 800037c:	19e4      	adds	r4, r4, r7
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x15a>
 8000384:	45a4      	cmp	ip, r4
 8000386:	f200 80b8 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 040c 	sub.w	r4, r4, ip
 8000390:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000394:	e79d      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000396:	4631      	mov	r1, r6
 8000398:	4630      	mov	r0, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	f1ce 0420 	rsb	r4, lr, #32
 80003a2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003aa:	fa20 f804 	lsr.w	r8, r0, r4
 80003ae:	0c3a      	lsrs	r2, r7, #16
 80003b0:	fa25 f404 	lsr.w	r4, r5, r4
 80003b4:	ea48 0803 	orr.w	r8, r8, r3
 80003b8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003bc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c0:	fb02 4411 	mls	r4, r2, r1, r4
 80003c4:	fa1f fc87 	uxth.w	ip, r7
 80003c8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003cc:	fb01 f30c 	mul.w	r3, r1, ip
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x1bc>
 80003d8:	19ed      	adds	r5, r5, r7
 80003da:	f101 30ff 	add.w	r0, r1, #4294967295
 80003de:	f080 808a 	bcs.w	80004f6 <__udivmoddi4+0x2c6>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	f240 8087 	bls.w	80004f6 <__udivmoddi4+0x2c6>
 80003e8:	3902      	subs	r1, #2
 80003ea:	443d      	add	r5, r7
 80003ec:	1aeb      	subs	r3, r5, r3
 80003ee:	fa1f f588 	uxth.w	r5, r8
 80003f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003f6:	fb02 3310 	mls	r3, r2, r0, r3
 80003fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fe:	fb00 f30c 	mul.w	r3, r0, ip
 8000402:	42ab      	cmp	r3, r5
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1e6>
 8000406:	19ed      	adds	r5, r5, r7
 8000408:	f100 38ff 	add.w	r8, r0, #4294967295
 800040c:	d26f      	bcs.n	80004ee <__udivmoddi4+0x2be>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d96d      	bls.n	80004ee <__udivmoddi4+0x2be>
 8000412:	3802      	subs	r0, #2
 8000414:	443d      	add	r5, r7
 8000416:	1aeb      	subs	r3, r5, r3
 8000418:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041c:	e78f      	b.n	800033e <__udivmoddi4+0x10e>
 800041e:	f1c1 0720 	rsb	r7, r1, #32
 8000422:	fa22 f807 	lsr.w	r8, r2, r7
 8000426:	408b      	lsls	r3, r1
 8000428:	fa05 f401 	lsl.w	r4, r5, r1
 800042c:	ea48 0303 	orr.w	r3, r8, r3
 8000430:	fa20 fe07 	lsr.w	lr, r0, r7
 8000434:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000438:	40fd      	lsrs	r5, r7
 800043a:	ea4e 0e04 	orr.w	lr, lr, r4
 800043e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000442:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000446:	fb0c 5519 	mls	r5, ip, r9, r5
 800044a:	fa1f f883 	uxth.w	r8, r3
 800044e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000452:	fb09 f408 	mul.w	r4, r9, r8
 8000456:	42ac      	cmp	r4, r5
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x244>
 8000462:	18ed      	adds	r5, r5, r3
 8000464:	f109 30ff 	add.w	r0, r9, #4294967295
 8000468:	d243      	bcs.n	80004f2 <__udivmoddi4+0x2c2>
 800046a:	42ac      	cmp	r4, r5
 800046c:	d941      	bls.n	80004f2 <__udivmoddi4+0x2c2>
 800046e:	f1a9 0902 	sub.w	r9, r9, #2
 8000472:	441d      	add	r5, r3
 8000474:	1b2d      	subs	r5, r5, r4
 8000476:	fa1f fe8e 	uxth.w	lr, lr
 800047a:	fbb5 f0fc 	udiv	r0, r5, ip
 800047e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000482:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000486:	fb00 f808 	mul.w	r8, r0, r8
 800048a:	45a0      	cmp	r8, r4
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x26e>
 800048e:	18e4      	adds	r4, r4, r3
 8000490:	f100 35ff 	add.w	r5, r0, #4294967295
 8000494:	d229      	bcs.n	80004ea <__udivmoddi4+0x2ba>
 8000496:	45a0      	cmp	r8, r4
 8000498:	d927      	bls.n	80004ea <__udivmoddi4+0x2ba>
 800049a:	3802      	subs	r0, #2
 800049c:	441c      	add	r4, r3
 800049e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a2:	eba4 0408 	sub.w	r4, r4, r8
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	454c      	cmp	r4, r9
 80004ac:	46c6      	mov	lr, r8
 80004ae:	464d      	mov	r5, r9
 80004b0:	d315      	bcc.n	80004de <__udivmoddi4+0x2ae>
 80004b2:	d012      	beq.n	80004da <__udivmoddi4+0x2aa>
 80004b4:	b156      	cbz	r6, 80004cc <__udivmoddi4+0x29c>
 80004b6:	ebba 030e 	subs.w	r3, sl, lr
 80004ba:	eb64 0405 	sbc.w	r4, r4, r5
 80004be:	fa04 f707 	lsl.w	r7, r4, r7
 80004c2:	40cb      	lsrs	r3, r1
 80004c4:	431f      	orrs	r7, r3
 80004c6:	40cc      	lsrs	r4, r1
 80004c8:	6037      	str	r7, [r6, #0]
 80004ca:	6074      	str	r4, [r6, #4]
 80004cc:	2100      	movs	r1, #0
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	4618      	mov	r0, r3
 80004d4:	e6f8      	b.n	80002c8 <__udivmoddi4+0x98>
 80004d6:	4690      	mov	r8, r2
 80004d8:	e6e0      	b.n	800029c <__udivmoddi4+0x6c>
 80004da:	45c2      	cmp	sl, r8
 80004dc:	d2ea      	bcs.n	80004b4 <__udivmoddi4+0x284>
 80004de:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e2:	eb69 0503 	sbc.w	r5, r9, r3
 80004e6:	3801      	subs	r0, #1
 80004e8:	e7e4      	b.n	80004b4 <__udivmoddi4+0x284>
 80004ea:	4628      	mov	r0, r5
 80004ec:	e7d7      	b.n	800049e <__udivmoddi4+0x26e>
 80004ee:	4640      	mov	r0, r8
 80004f0:	e791      	b.n	8000416 <__udivmoddi4+0x1e6>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e7be      	b.n	8000474 <__udivmoddi4+0x244>
 80004f6:	4601      	mov	r1, r0
 80004f8:	e778      	b.n	80003ec <__udivmoddi4+0x1bc>
 80004fa:	3802      	subs	r0, #2
 80004fc:	443c      	add	r4, r7
 80004fe:	e745      	b.n	800038c <__udivmoddi4+0x15c>
 8000500:	4608      	mov	r0, r1
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xe6>
 8000504:	f1a8 0802 	sub.w	r8, r8, #2
 8000508:	443d      	add	r5, r7
 800050a:	e72b      	b.n	8000364 <__udivmoddi4+0x134>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x30>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000522:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800052a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f81b 	bl	8000568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	200f      	movs	r0, #15
 8000534:	f004 f908 	bl	8004748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f004 f8d7 	bl	80046ea <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800053c:	2000      	movs	r0, #0
 800053e:	bd08      	pop	{r3, pc}
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <HAL_IncTick+0x10>)
 8000546:	6811      	ldr	r1, [r2, #0]
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <HAL_IncTick+0x14>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	440b      	add	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20008178 	.word	0x20008178
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800055c:	4b01      	ldr	r3, [pc, #4]	; (8000564 <HAL_GetTick+0x8>)
 800055e:	6818      	ldr	r0, [r3, #0]
}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20008178 	.word	0x20008178

08000568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000568:	b510      	push	{r4, lr}
 800056a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800056c:	1ec3      	subs	r3, r0, #3
 800056e:	2b04      	cmp	r3, #4
 8000570:	d80f      	bhi.n	8000592 <HAL_NVIC_SetPriorityGrouping+0x2a>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000572:	4a0a      	ldr	r2, [pc, #40]	; (800059c <HAL_NVIC_SetPriorityGrouping+0x34>)
 8000574:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000576:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800057a:	041b      	lsls	r3, r3, #16
 800057c:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800057e:	0224      	lsls	r4, r4, #8
 8000580:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000584:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 8000586:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800058a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800058e:	60d3      	str	r3, [r2, #12]
 8000590:	bd10      	pop	{r4, pc}
 8000592:	21a2      	movs	r1, #162	; 0xa2
 8000594:	4802      	ldr	r0, [pc, #8]	; (80005a0 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8000596:	f004 f8a7 	bl	80046e8 <assert_failed>
 800059a:	e7ea      	b.n	8000572 <HAL_NVIC_SetPriorityGrouping+0xa>
 800059c:	e000ed00 	.word	0xe000ed00
 80005a0:	08004b6c 	.word	0x08004b6c

080005a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	4605      	mov	r5, r0
 80005a8:	460c      	mov	r4, r1
 80005aa:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80005ac:	2a0f      	cmp	r2, #15
 80005ae:	d824      	bhi.n	80005fa <HAL_NVIC_SetPriority+0x56>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80005b0:	2c0f      	cmp	r4, #15
 80005b2:	d827      	bhi.n	8000604 <HAL_NVIC_SetPriority+0x60>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b4:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <HAL_NVIC_SetPriority+0x7c>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005bc:	f1c3 0207 	rsb	r2, r3, #7
 80005c0:	2a04      	cmp	r2, #4
 80005c2:	bf28      	it	cs
 80005c4:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c6:	1d19      	adds	r1, r3, #4
 80005c8:	2906      	cmp	r1, #6
 80005ca:	d920      	bls.n	800060e <HAL_NVIC_SetPriority+0x6a>
 80005cc:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ce:	2101      	movs	r1, #1
 80005d0:	fa01 f202 	lsl.w	r2, r1, r2
 80005d4:	3a01      	subs	r2, #1
 80005d6:	4014      	ands	r4, r2
 80005d8:	409c      	lsls	r4, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005da:	fa01 f303 	lsl.w	r3, r1, r3
 80005de:	3b01      	subs	r3, #1
 80005e0:	4033      	ands	r3, r6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e2:	431c      	orrs	r4, r3
  if ((int32_t)(IRQn) < 0)
 80005e4:	2d00      	cmp	r5, #0
 80005e6:	db14      	blt.n	8000612 <HAL_NVIC_SetPriority+0x6e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e8:	0124      	lsls	r4, r4, #4
 80005ea:	b2e4      	uxtb	r4, r4
 80005ec:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 80005f0:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 80005f4:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
 80005f8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80005fa:	21ba      	movs	r1, #186	; 0xba
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <HAL_NVIC_SetPriority+0x80>)
 80005fe:	f004 f873 	bl	80046e8 <assert_failed>
 8000602:	e7d5      	b.n	80005b0 <HAL_NVIC_SetPriority+0xc>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000604:	21bb      	movs	r1, #187	; 0xbb
 8000606:	4807      	ldr	r0, [pc, #28]	; (8000624 <HAL_NVIC_SetPriority+0x80>)
 8000608:	f004 f86e 	bl	80046e8 <assert_failed>
 800060c:	e7d2      	b.n	80005b4 <HAL_NVIC_SetPriority+0x10>
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060e:	2300      	movs	r3, #0
 8000610:	e7dd      	b.n	80005ce <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000612:	f005 050f 	and.w	r5, r5, #15
 8000616:	0124      	lsls	r4, r4, #4
 8000618:	b2e4      	uxtb	r4, r4
 800061a:	4b03      	ldr	r3, [pc, #12]	; (8000628 <HAL_NVIC_SetPriority+0x84>)
 800061c:	555c      	strb	r4, [r3, r5]
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	e000ed00 	.word	0xe000ed00
 8000624:	08004b6c 	.word	0x08004b6c
 8000628:	e000ed14 	.word	0xe000ed14

0800062c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800062c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800062e:	1e04      	subs	r4, r0, #0
 8000630:	db09      	blt.n	8000646 <HAL_NVIC_EnableIRQ+0x1a>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000632:	0962      	lsrs	r2, r4, #5
 8000634:	f004 041f 	and.w	r4, r4, #31
 8000638:	2301      	movs	r3, #1
 800063a:	fa03 f404 	lsl.w	r4, r3, r4
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <HAL_NVIC_EnableIRQ+0x24>)
 8000640:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8000644:	bd10      	pop	{r4, pc}
 8000646:	21ce      	movs	r1, #206	; 0xce
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <HAL_NVIC_EnableIRQ+0x28>)
 800064a:	f004 f84d 	bl	80046e8 <assert_failed>
 800064e:	e7f0      	b.n	8000632 <HAL_NVIC_EnableIRQ+0x6>
 8000650:	e000e100 	.word	0xe000e100
 8000654:	08004b6c 	.word	0x08004b6c

08000658 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000658:	3801      	subs	r0, #1
 800065a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800065e:	d20a      	bcs.n	8000676 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_SYSTICK_Config+0x24>)
 8000662:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	21f0      	movs	r1, #240	; 0xf0
 8000666:	4a06      	ldr	r2, [pc, #24]	; (8000680 <HAL_SYSTICK_Config+0x28>)
 8000668:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800066c:	2000      	movs	r0, #0
 800066e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000670:	2207      	movs	r2, #7
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000676:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e010 	.word	0xe000e010
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000684:	b510      	push	{r4, lr}
 8000686:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8000688:	2804      	cmp	r0, #4
 800068a:	d000      	beq.n	800068e <HAL_SYSTICK_CLKSourceConfig+0xa>
 800068c:	b938      	cbnz	r0, 800069e <HAL_SYSTICK_CLKSourceConfig+0x1a>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800068e:	2c04      	cmp	r4, #4
 8000690:	d00b      	beq.n	80006aa <HAL_SYSTICK_CLKSourceConfig+0x26>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000692:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000694:	6813      	ldr	r3, [r2, #0]
 8000696:	f023 0304 	bic.w	r3, r3, #4
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	bd10      	pop	{r4, pc}
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 800069e:	f240 11d9 	movw	r1, #473	; 0x1d9
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <HAL_SYSTICK_CLKSourceConfig+0x38>)
 80006a4:	f004 f820 	bl	80046e8 <assert_failed>
 80006a8:	e7f1      	b.n	800068e <HAL_SYSTICK_CLKSourceConfig+0xa>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006aa:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80006ac:	6813      	ldr	r3, [r2, #0]
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	bd10      	pop	{r4, pc}
 80006b6:	bf00      	nop
 80006b8:	e000e010 	.word	0xe000e010
 80006bc:	08004b6c 	.word	0x08004b6c

080006c0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80006c0:	b1b0      	cbz	r0, 80006f0 <HAL_CRC_Init+0x30>
{
 80006c2:	b510      	push	{r4, lr}
 80006c4:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80006c6:	6802      	ldr	r2, [r0, #0]
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <HAL_CRC_Init+0x34>)
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d003      	beq.n	80006d6 <HAL_CRC_Init+0x16>
 80006ce:	2177      	movs	r1, #119	; 0x77
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <HAL_CRC_Init+0x38>)
 80006d2:	f004 f809 	bl	80046e8 <assert_failed>

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80006d6:	7963      	ldrb	r3, [r4, #5]
 80006d8:	b12b      	cbz	r3, 80006e6 <HAL_CRC_Init+0x26>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80006da:	2302      	movs	r3, #2
 80006dc:	7163      	strb	r3, [r4, #5]
   
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80006de:	2301      	movs	r3, #1
 80006e0:	7163      	strb	r3, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
 80006e2:	2000      	movs	r0, #0
 80006e4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80006e6:	7123      	strb	r3, [r4, #4]
    HAL_CRC_MspInit(hcrc);
 80006e8:	4620      	mov	r0, r4
 80006ea:	f003 fd45 	bl	8004178 <HAL_CRC_MspInit>
 80006ee:	e7f4      	b.n	80006da <HAL_CRC_Init+0x1a>
    return HAL_ERROR;
 80006f0:	2001      	movs	r0, #1
 80006f2:	4770      	bx	lr
 80006f4:	40023000 	.word	0x40023000
 80006f8:	08004ba8 	.word	0x08004ba8

080006fc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80006fc:	4770      	bx	lr

080006fe <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80006fe:	4770      	bx	lr

08000700 <HAL_DMA2D_IRQHandler>:
{
 8000700:	b570      	push	{r4, r5, r6, lr}
 8000702:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000704:	6803      	ldr	r3, [r0, #0]
 8000706:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000708:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 800070a:	f015 0f01 	tst.w	r5, #1
 800070e:	d016      	beq.n	800073e <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != RESET)
 8000710:	f416 7f80 	tst.w	r6, #256	; 0x100
 8000714:	d013      	beq.n	800073e <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800071c:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800071e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000726:	6803      	ldr	r3, [r0, #0]
 8000728:	2201      	movs	r2, #1
 800072a:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800072c:	2304      	movs	r3, #4
 800072e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8000732:	2300      	movs	r3, #0
 8000734:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8000738:	6943      	ldr	r3, [r0, #20]
 800073a:	b103      	cbz	r3, 800073e <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 800073c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 800073e:	f015 0f20 	tst.w	r5, #32
 8000742:	d018      	beq.n	8000776 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != RESET)
 8000744:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8000748:	d015      	beq.n	8000776 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800074a:	6822      	ldr	r2, [r4, #0]
 800074c:	6813      	ldr	r3, [r2, #0]
 800074e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000752:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000754:	6823      	ldr	r3, [r4, #0]
 8000756:	2220      	movs	r2, #32
 8000758:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800075a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000762:	2304      	movs	r3, #4
 8000764:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8000768:	2300      	movs	r3, #0
 800076a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 800076e:	6963      	ldr	r3, [r4, #20]
 8000770:	b10b      	cbz	r3, 8000776 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8000772:	4620      	mov	r0, r4
 8000774:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000776:	f015 0f08 	tst.w	r5, #8
 800077a:	d018      	beq.n	80007ae <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != RESET)
 800077c:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8000780:	d015      	beq.n	80007ae <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000782:	6822      	ldr	r2, [r4, #0]
 8000784:	6813      	ldr	r3, [r2, #0]
 8000786:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800078a:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	2208      	movs	r2, #8
 8000790:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000792:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800079a:	2304      	movs	r3, #4
 800079c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80007a0:	2300      	movs	r3, #0
 80007a2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 80007a6:	6963      	ldr	r3, [r4, #20]
 80007a8:	b10b      	cbz	r3, 80007ae <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 80007aa:	4620      	mov	r0, r4
 80007ac:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 80007ae:	f015 0f04 	tst.w	r5, #4
 80007b2:	d002      	beq.n	80007ba <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != RESET)
 80007b4:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80007b8:	d120      	bne.n	80007fc <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 80007ba:	f015 0f02 	tst.w	r5, #2
 80007be:	d016      	beq.n	80007ee <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != RESET)
 80007c0:	f416 7f00 	tst.w	r6, #512	; 0x200
 80007c4:	d013      	beq.n	80007ee <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80007c6:	6822      	ldr	r2, [r4, #0]
 80007c8:	6813      	ldr	r3, [r2, #0]
 80007ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007ce:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	2202      	movs	r2, #2
 80007d4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80007d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80007d8:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80007da:	2301      	movs	r3, #1
 80007dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80007e0:	2300      	movs	r3, #0
 80007e2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferCpltCallback != NULL)
 80007e6:	6923      	ldr	r3, [r4, #16]
 80007e8:	b10b      	cbz	r3, 80007ee <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 80007ea:	4620      	mov	r0, r4
 80007ec:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 80007ee:	f015 0f10 	tst.w	r5, #16
 80007f2:	d002      	beq.n	80007fa <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != RESET)
 80007f4:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 80007f8:	d10c      	bne.n	8000814 <HAL_DMA2D_IRQHandler+0x114>
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80007fc:	6822      	ldr	r2, [r4, #0]
 80007fe:	6813      	ldr	r3, [r2, #0]
 8000800:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000804:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8000806:	6823      	ldr	r3, [r4, #0]
 8000808:	2204      	movs	r2, #4
 800080a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800080c:	4620      	mov	r0, r4
 800080e:	f7ff ff75 	bl	80006fc <HAL_DMA2D_LineEventCallback>
 8000812:	e7d2      	b.n	80007ba <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8000814:	6822      	ldr	r2, [r4, #0]
 8000816:	6813      	ldr	r3, [r2, #0]
 8000818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800081c:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800081e:	6823      	ldr	r3, [r4, #0]
 8000820:	2210      	movs	r2, #16
 8000822:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8000824:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000826:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000828:	2301      	movs	r3, #1
 800082a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800082e:	2300      	movs	r3, #0
 8000830:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8000834:	4620      	mov	r0, r4
 8000836:	f7ff ff62 	bl	80006fe <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800083a:	e7de      	b.n	80007fa <HAL_DMA2D_IRQHandler+0xfa>

0800083c <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 800083c:	4770      	bx	lr

0800083e <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 800083e:	4770      	bx	lr

08000840 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8000840:	4770      	bx	lr

08000842 <HAL_DSI_IRQHandler>:
{
 8000842:	b510      	push	{r4, lr}
 8000844:	4604      	mov	r4, r0
  if(__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != RESET)
 8000846:	6803      	ldr	r3, [r0, #0]
 8000848:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800084c:	f012 0f01 	tst.w	r2, #1
 8000850:	d004      	beq.n	800085c <HAL_DSI_IRQHandler+0x1a>
    if(__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != RESET)
 8000852:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8000856:	f012 0f01 	tst.w	r2, #1
 800085a:	d160      	bne.n	800091e <HAL_DSI_IRQHandler+0xdc>
  if(__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != RESET)
 800085c:	6823      	ldr	r3, [r4, #0]
 800085e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8000862:	f012 0f02 	tst.w	r2, #2
 8000866:	d004      	beq.n	8000872 <HAL_DSI_IRQHandler+0x30>
    if(__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != RESET)
 8000868:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800086c:	f012 0f02 	tst.w	r2, #2
 8000870:	d15b      	bne.n	800092a <HAL_DSI_IRQHandler+0xe8>
  if(hdsi->ErrorMsk != 0U)
 8000872:	69a3      	ldr	r3, [r4, #24]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d051      	beq.n	800091c <HAL_DSI_IRQHandler+0xda>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8000878:	6821      	ldr	r1, [r4, #0]
 800087a:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800087e:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
 8000882:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8000884:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8000888:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
 800088c:	4003      	ands	r3, r0
    if((ErrorStatus0 & DSI_ERROR_ACK_MASK) != RESET)
 800088e:	b291      	uxth	r1, r2
 8000890:	b119      	cbz	r1, 800089a <HAL_DSI_IRQHandler+0x58>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8000892:	6961      	ldr	r1, [r4, #20]
 8000894:	f041 0101 	orr.w	r1, r1, #1
 8000898:	6161      	str	r1, [r4, #20]
    if((ErrorStatus0 & DSI_ERROR_PHY_MASK) != RESET)
 800089a:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800089e:	d003      	beq.n	80008a8 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80008a0:	6962      	ldr	r2, [r4, #20]
 80008a2:	f042 0202 	orr.w	r2, r2, #2
 80008a6:	6162      	str	r2, [r4, #20]
    if((ErrorStatus1 & DSI_ERROR_TX_MASK) != RESET)
 80008a8:	f013 0f01 	tst.w	r3, #1
 80008ac:	d003      	beq.n	80008b6 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80008ae:	6962      	ldr	r2, [r4, #20]
 80008b0:	f042 0204 	orr.w	r2, r2, #4
 80008b4:	6162      	str	r2, [r4, #20]
    if((ErrorStatus1 & DSI_ERROR_RX_MASK) != RESET)
 80008b6:	f013 0f02 	tst.w	r3, #2
 80008ba:	d003      	beq.n	80008c4 <HAL_DSI_IRQHandler+0x82>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80008bc:	6962      	ldr	r2, [r4, #20]
 80008be:	f042 0208 	orr.w	r2, r2, #8
 80008c2:	6162      	str	r2, [r4, #20]
    if((ErrorStatus1 & DSI_ERROR_ECC_MASK) != RESET)
 80008c4:	f013 0f0c 	tst.w	r3, #12
 80008c8:	d003      	beq.n	80008d2 <HAL_DSI_IRQHandler+0x90>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80008ca:	6962      	ldr	r2, [r4, #20]
 80008cc:	f042 0210 	orr.w	r2, r2, #16
 80008d0:	6162      	str	r2, [r4, #20]
    if((ErrorStatus1 & DSI_ERROR_CRC_MASK) != RESET)
 80008d2:	f013 0f10 	tst.w	r3, #16
 80008d6:	d003      	beq.n	80008e0 <HAL_DSI_IRQHandler+0x9e>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80008d8:	6962      	ldr	r2, [r4, #20]
 80008da:	f042 0220 	orr.w	r2, r2, #32
 80008de:	6162      	str	r2, [r4, #20]
    if((ErrorStatus1 & DSI_ERROR_PSE_MASK) != RESET)
 80008e0:	f013 0f20 	tst.w	r3, #32
 80008e4:	d003      	beq.n	80008ee <HAL_DSI_IRQHandler+0xac>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80008e6:	6962      	ldr	r2, [r4, #20]
 80008e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008ec:	6162      	str	r2, [r4, #20]
    if((ErrorStatus1 & DSI_ERROR_EOT_MASK) != RESET)
 80008ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80008f2:	d003      	beq.n	80008fc <HAL_DSI_IRQHandler+0xba>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80008f4:	6962      	ldr	r2, [r4, #20]
 80008f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80008fa:	6162      	str	r2, [r4, #20]
    if((ErrorStatus1 & DSI_ERROR_OVF_MASK) != RESET)
 80008fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000900:	d003      	beq.n	800090a <HAL_DSI_IRQHandler+0xc8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8000902:	6962      	ldr	r2, [r4, #20]
 8000904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000908:	6162      	str	r2, [r4, #20]
    if((ErrorStatus1 & DSI_ERROR_GEN_MASK) != RESET)
 800090a:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800090e:	d003      	beq.n	8000918 <HAL_DSI_IRQHandler+0xd6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8000910:	6963      	ldr	r3, [r4, #20]
 8000912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000916:	6163      	str	r3, [r4, #20]
    if(hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8000918:	6963      	ldr	r3, [r4, #20]
 800091a:	b96b      	cbnz	r3, 8000938 <HAL_DSI_IRQHandler+0xf6>
 800091c:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800091e:	2201      	movs	r2, #1
 8000920:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8000924:	f7ff ff8a 	bl	800083c <HAL_DSI_TearingEffectCallback>
 8000928:	e798      	b.n	800085c <HAL_DSI_IRQHandler+0x1a>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800092a:	2202      	movs	r2, #2
 800092c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8000930:	4620      	mov	r0, r4
 8000932:	f7ff ff84 	bl	800083e <HAL_DSI_EndOfRefreshCallback>
 8000936:	e79c      	b.n	8000872 <HAL_DSI_IRQHandler+0x30>
      HAL_DSI_ErrorCallback(hdsi);
 8000938:	4620      	mov	r0, r4
 800093a:	f7ff ff81 	bl	8000840 <HAL_DSI_ErrorCallback>
}
 800093e:	e7ed      	b.n	800091c <HAL_DSI_IRQHandler+0xda>

08000940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	4680      	mov	r8, r0
 8000948:	460f      	mov	r7, r1
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800094a:	4bbd      	ldr	r3, [pc, #756]	; (8000c40 <HAL_GPIO_Init+0x300>)
 800094c:	4298      	cmp	r0, r3
 800094e:	d02b      	beq.n	80009a8 <HAL_GPIO_Init+0x68>
 8000950:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000954:	4298      	cmp	r0, r3
 8000956:	d027      	beq.n	80009a8 <HAL_GPIO_Init+0x68>
 8000958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800095c:	4298      	cmp	r0, r3
 800095e:	d023      	beq.n	80009a8 <HAL_GPIO_Init+0x68>
 8000960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000964:	4298      	cmp	r0, r3
 8000966:	d01f      	beq.n	80009a8 <HAL_GPIO_Init+0x68>
 8000968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800096c:	4298      	cmp	r0, r3
 800096e:	d01b      	beq.n	80009a8 <HAL_GPIO_Init+0x68>
 8000970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000974:	4298      	cmp	r0, r3
 8000976:	d017      	beq.n	80009a8 <HAL_GPIO_Init+0x68>
 8000978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800097c:	4298      	cmp	r0, r3
 800097e:	d013      	beq.n	80009a8 <HAL_GPIO_Init+0x68>
 8000980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000984:	4298      	cmp	r0, r3
 8000986:	d00f      	beq.n	80009a8 <HAL_GPIO_Init+0x68>
 8000988:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800098c:	4298      	cmp	r0, r3
 800098e:	d00b      	beq.n	80009a8 <HAL_GPIO_Init+0x68>
 8000990:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000994:	4298      	cmp	r0, r3
 8000996:	d007      	beq.n	80009a8 <HAL_GPIO_Init+0x68>
 8000998:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800099c:	4298      	cmp	r0, r3
 800099e:	d003      	beq.n	80009a8 <HAL_GPIO_Init+0x68>
 80009a0:	21c3      	movs	r1, #195	; 0xc3
 80009a2:	48a8      	ldr	r0, [pc, #672]	; (8000c44 <HAL_GPIO_Init+0x304>)
 80009a4:	f003 fea0 	bl	80046e8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	b112      	cbz	r2, 80009b4 <HAL_GPIO_Init+0x74>
 80009ae:	0c1b      	lsrs	r3, r3, #16
 80009b0:	041b      	lsls	r3, r3, #16
 80009b2:	b11b      	cbz	r3, 80009bc <HAL_GPIO_Init+0x7c>
 80009b4:	21c4      	movs	r1, #196	; 0xc4
 80009b6:	48a3      	ldr	r0, [pc, #652]	; (8000c44 <HAL_GPIO_Init+0x304>)
 80009b8:	f003 fe96 	bl	80046e8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d922      	bls.n	8000a08 <HAL_GPIO_Init+0xc8>
 80009c2:	2b11      	cmp	r3, #17
 80009c4:	d020      	beq.n	8000a08 <HAL_GPIO_Init+0xc8>
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d01e      	beq.n	8000a08 <HAL_GPIO_Init+0xc8>
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d01c      	beq.n	8000a08 <HAL_GPIO_Init+0xc8>
 80009ce:	4a9e      	ldr	r2, [pc, #632]	; (8000c48 <HAL_GPIO_Init+0x308>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d019      	beq.n	8000a08 <HAL_GPIO_Init+0xc8>
 80009d4:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80009d8:	4293      	cmp	r3, r2
 80009da:	d015      	beq.n	8000a08 <HAL_GPIO_Init+0xc8>
 80009dc:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d011      	beq.n	8000a08 <HAL_GPIO_Init+0xc8>
 80009e4:	f5a2 12f8 	sub.w	r2, r2, #2031616	; 0x1f0000
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d00d      	beq.n	8000a08 <HAL_GPIO_Init+0xc8>
 80009ec:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d009      	beq.n	8000a08 <HAL_GPIO_Init+0xc8>
 80009f4:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d005      	beq.n	8000a08 <HAL_GPIO_Init+0xc8>
 80009fc:	2b03      	cmp	r3, #3
 80009fe:	d003      	beq.n	8000a08 <HAL_GPIO_Init+0xc8>
 8000a00:	21c5      	movs	r1, #197	; 0xc5
 8000a02:	4890      	ldr	r0, [pc, #576]	; (8000c44 <HAL_GPIO_Init+0x304>)
 8000a04:	f003 fe70 	bl	80046e8 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d801      	bhi.n	8000a12 <HAL_GPIO_Init+0xd2>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a0e:	2500      	movs	r5, #0
 8000a10:	e077      	b.n	8000b02 <HAL_GPIO_Init+0x1c2>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000a12:	21c6      	movs	r1, #198	; 0xc6
 8000a14:	488b      	ldr	r0, [pc, #556]	; (8000c44 <HAL_GPIO_Init+0x304>)
 8000a16:	f003 fe67 	bl	80046e8 <assert_failed>
 8000a1a:	e7f8      	b.n	8000a0e <HAL_GPIO_Init+0xce>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	b30b      	cbz	r3, 8000a64 <HAL_GPIO_Init+0x124>
 8000a20:	2b09      	cmp	r3, #9
 8000a22:	d01f      	beq.n	8000a64 <HAL_GPIO_Init+0x124>
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d01d      	beq.n	8000a64 <HAL_GPIO_Init+0x124>
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d01b      	beq.n	8000a64 <HAL_GPIO_Init+0x124>
 8000a2c:	2b03      	cmp	r3, #3
 8000a2e:	d019      	beq.n	8000a64 <HAL_GPIO_Init+0x124>
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	d017      	beq.n	8000a64 <HAL_GPIO_Init+0x124>
 8000a34:	2b05      	cmp	r3, #5
 8000a36:	d015      	beq.n	8000a64 <HAL_GPIO_Init+0x124>
 8000a38:	2b06      	cmp	r3, #6
 8000a3a:	d013      	beq.n	8000a64 <HAL_GPIO_Init+0x124>
 8000a3c:	2b07      	cmp	r3, #7
 8000a3e:	d011      	beq.n	8000a64 <HAL_GPIO_Init+0x124>
 8000a40:	2b08      	cmp	r3, #8
 8000a42:	d00f      	beq.n	8000a64 <HAL_GPIO_Init+0x124>
 8000a44:	2b0a      	cmp	r3, #10
 8000a46:	d00d      	beq.n	8000a64 <HAL_GPIO_Init+0x124>
 8000a48:	2b0b      	cmp	r3, #11
 8000a4a:	d00b      	beq.n	8000a64 <HAL_GPIO_Init+0x124>
 8000a4c:	2b0c      	cmp	r3, #12
 8000a4e:	d009      	beq.n	8000a64 <HAL_GPIO_Init+0x124>
 8000a50:	2b0d      	cmp	r3, #13
 8000a52:	d007      	beq.n	8000a64 <HAL_GPIO_Init+0x124>
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d005      	beq.n	8000a64 <HAL_GPIO_Init+0x124>
 8000a58:	2b0e      	cmp	r3, #14
 8000a5a:	d003      	beq.n	8000a64 <HAL_GPIO_Init+0x124>
 8000a5c:	21d7      	movs	r1, #215	; 0xd7
 8000a5e:	4879      	ldr	r0, [pc, #484]	; (8000c44 <HAL_GPIO_Init+0x304>)
 8000a60:	f003 fe42 	bl	80046e8 <assert_failed>
        temp = GPIOx->AFR[position >> 3U];
 8000a64:	08e9      	lsrs	r1, r5, #3
 8000a66:	3108      	adds	r1, #8
 8000a68:	f858 3021 	ldr.w	r3, [r8, r1, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a6c:	f005 0207 	and.w	r2, r5, #7
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	200f      	movs	r0, #15
 8000a74:	4090      	lsls	r0, r2
 8000a76:	ea23 0300 	bic.w	r3, r3, r0
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a7a:	6938      	ldr	r0, [r7, #16]
 8000a7c:	fa00 f202 	lsl.w	r2, r0, r2
 8000a80:	4313      	orrs	r3, r2
        GPIOx->AFR[position >> 3U] = temp;
 8000a82:	f848 3021 	str.w	r3, [r8, r1, lsl #2]
 8000a86:	e04d      	b.n	8000b24 <HAL_GPIO_Init+0x1e4>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000a88:	21ea      	movs	r1, #234	; 0xea
 8000a8a:	486e      	ldr	r0, [pc, #440]	; (8000c44 <HAL_GPIO_Init+0x304>)
 8000a8c:	f003 fe2c 	bl	80046e8 <assert_failed>
 8000a90:	e064      	b.n	8000b5c <HAL_GPIO_Init+0x21c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a92:	2109      	movs	r1, #9
 8000a94:	e000      	b.n	8000a98 <HAL_GPIO_Init+0x158>
 8000a96:	2100      	movs	r1, #0
 8000a98:	40a1      	lsls	r1, r4
 8000a9a:	430a      	orrs	r2, r1
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	496b      	ldr	r1, [pc, #428]	; (8000c4c <HAL_GPIO_Init+0x30c>)
 8000aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aa4:	4b6a      	ldr	r3, [pc, #424]	; (8000c50 <HAL_GPIO_Init+0x310>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000aa8:	ea6f 0309 	mvn.w	r3, r9
 8000aac:	ea02 0103 	and.w	r1, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8000ab6:	d001      	beq.n	8000abc <HAL_GPIO_Init+0x17c>
        {
          temp |= iocurrent;
 8000ab8:	ea49 0102 	orr.w	r1, r9, r2
        }
        EXTI->IMR = temp;
 8000abc:	4a64      	ldr	r2, [pc, #400]	; (8000c50 <HAL_GPIO_Init+0x310>)
 8000abe:	6011      	str	r1, [r2, #0]

        temp = EXTI->EMR;
 8000ac0:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000ac2:	ea03 0102 	and.w	r1, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8000acc:	d001      	beq.n	8000ad2 <HAL_GPIO_Init+0x192>
        {
          temp |= iocurrent;
 8000ace:	ea49 0102 	orr.w	r1, r9, r2
        }
        EXTI->EMR = temp;
 8000ad2:	4a5f      	ldr	r2, [pc, #380]	; (8000c50 <HAL_GPIO_Init+0x310>)
 8000ad4:	6051      	str	r1, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ad6:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ad8:	ea03 0102 	and.w	r1, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8000ae2:	d001      	beq.n	8000ae8 <HAL_GPIO_Init+0x1a8>
        {
          temp |= iocurrent;
 8000ae4:	ea49 0102 	orr.w	r1, r9, r2
        }
        EXTI->RTSR = temp;
 8000ae8:	4a59      	ldr	r2, [pc, #356]	; (8000c50 <HAL_GPIO_Init+0x310>)
 8000aea:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR;
 8000aec:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000aee:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af0:	6879      	ldr	r1, [r7, #4]
 8000af2:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8000af6:	d001      	beq.n	8000afc <HAL_GPIO_Init+0x1bc>
        {
          temp |= iocurrent;
 8000af8:	ea49 0302 	orr.w	r3, r9, r2
        }
        EXTI->FTSR = temp;
 8000afc:	4a54      	ldr	r2, [pc, #336]	; (8000c50 <HAL_GPIO_Init+0x310>)
 8000afe:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b00:	3501      	adds	r5, #1
 8000b02:	2d0f      	cmp	r5, #15
 8000b04:	f200 80ac 	bhi.w	8000c60 <HAL_GPIO_Init+0x320>
    ioposition = 0x01U << position;
 8000b08:	2401      	movs	r4, #1
 8000b0a:	40ac      	lsls	r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	ea04 0903 	and.w	r9, r4, r3
    if(iocurrent == ioposition)
 8000b12:	454c      	cmp	r4, r9
 8000b14:	d1f4      	bne.n	8000b00 <HAL_GPIO_Init+0x1c0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	f43f af7f 	beq.w	8000a1c <HAL_GPIO_Init+0xdc>
 8000b1e:	2b12      	cmp	r3, #18
 8000b20:	f43f af7c 	beq.w	8000a1c <HAL_GPIO_Init+0xdc>
      temp = GPIOx->MODER;
 8000b24:	f8d8 3000 	ldr.w	r3, [r8]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b28:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8000b2c:	2603      	movs	r6, #3
 8000b2e:	fa06 f60a 	lsl.w	r6, r6, sl
 8000b32:	43f6      	mvns	r6, r6
 8000b34:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	f002 0203 	and.w	r2, r2, #3
 8000b3c:	fa02 f20a 	lsl.w	r2, r2, sl
 8000b40:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 8000b42:	f8c8 3000 	str.w	r3, [r8]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	1e5a      	subs	r2, r3, #1
 8000b4a:	2a01      	cmp	r2, #1
 8000b4c:	d903      	bls.n	8000b56 <HAL_GPIO_Init+0x216>
 8000b4e:	2b11      	cmp	r3, #17
 8000b50:	d001      	beq.n	8000b56 <HAL_GPIO_Init+0x216>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b52:	2b12      	cmp	r3, #18
 8000b54:	d116      	bne.n	8000b84 <HAL_GPIO_Init+0x244>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	d895      	bhi.n	8000a88 <HAL_GPIO_Init+0x148>
        temp = GPIOx->OSPEEDR; 
 8000b5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b60:	4033      	ands	r3, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	fa02 f20a 	lsl.w	r2, r2, sl
 8000b68:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8000b6a:	f8c8 3008 	str.w	r3, [r8, #8]
        temp = GPIOx->OTYPER;
 8000b6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b72:	ea23 0404 	bic.w	r4, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000b7c:	40ab      	lsls	r3, r5
 8000b7e:	431c      	orrs	r4, r3
        GPIOx->OTYPER = temp;
 8000b80:	f8c8 4004 	str.w	r4, [r8, #4]
      temp = GPIOx->PUPDR;
 8000b84:	f8d8 300c 	ldr.w	r3, [r8, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b88:	401e      	ands	r6, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	fa03 f30a 	lsl.w	r3, r3, sl
 8000b90:	431e      	orrs	r6, r3
      GPIOx->PUPDR = temp;
 8000b92:	f8c8 600c 	str.w	r6, [r8, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000b9c:	d0b0      	beq.n	8000b00 <HAL_GPIO_Init+0x1c0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <HAL_GPIO_Init+0x314>)
 8000ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ba6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000baa:	645a      	str	r2, [r3, #68]	; 0x44
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb2:	9301      	str	r3, [sp, #4]
 8000bb4:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bb6:	08ab      	lsrs	r3, r5, #2
 8000bb8:	1c99      	adds	r1, r3, #2
 8000bba:	4a24      	ldr	r2, [pc, #144]	; (8000c4c <HAL_GPIO_Init+0x30c>)
 8000bbc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bc0:	f005 0103 	and.w	r1, r5, #3
 8000bc4:	008c      	lsls	r4, r1, #2
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	40a1      	lsls	r1, r4
 8000bca:	ea22 0201 	bic.w	r2, r2, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bce:	481c      	ldr	r0, [pc, #112]	; (8000c40 <HAL_GPIO_Init+0x300>)
 8000bd0:	4580      	cmp	r8, r0
 8000bd2:	f43f af60 	beq.w	8000a96 <HAL_GPIO_Init+0x156>
 8000bd6:	4920      	ldr	r1, [pc, #128]	; (8000c58 <HAL_GPIO_Init+0x318>)
 8000bd8:	4588      	cmp	r8, r1
 8000bda:	d022      	beq.n	8000c22 <HAL_GPIO_Init+0x2e2>
 8000bdc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000be0:	4588      	cmp	r8, r1
 8000be2:	d020      	beq.n	8000c26 <HAL_GPIO_Init+0x2e6>
 8000be4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000be8:	4588      	cmp	r8, r1
 8000bea:	d01e      	beq.n	8000c2a <HAL_GPIO_Init+0x2ea>
 8000bec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000bf0:	4588      	cmp	r8, r1
 8000bf2:	d01c      	beq.n	8000c2e <HAL_GPIO_Init+0x2ee>
 8000bf4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000bf8:	4588      	cmp	r8, r1
 8000bfa:	d01a      	beq.n	8000c32 <HAL_GPIO_Init+0x2f2>
 8000bfc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000c00:	4588      	cmp	r8, r1
 8000c02:	d018      	beq.n	8000c36 <HAL_GPIO_Init+0x2f6>
 8000c04:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000c08:	4588      	cmp	r8, r1
 8000c0a:	d016      	beq.n	8000c3a <HAL_GPIO_Init+0x2fa>
 8000c0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000c10:	4588      	cmp	r8, r1
 8000c12:	d023      	beq.n	8000c5c <HAL_GPIO_Init+0x31c>
 8000c14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000c18:	4588      	cmp	r8, r1
 8000c1a:	f43f af3a 	beq.w	8000a92 <HAL_GPIO_Init+0x152>
 8000c1e:	210a      	movs	r1, #10
 8000c20:	e73a      	b.n	8000a98 <HAL_GPIO_Init+0x158>
 8000c22:	2101      	movs	r1, #1
 8000c24:	e738      	b.n	8000a98 <HAL_GPIO_Init+0x158>
 8000c26:	2102      	movs	r1, #2
 8000c28:	e736      	b.n	8000a98 <HAL_GPIO_Init+0x158>
 8000c2a:	2103      	movs	r1, #3
 8000c2c:	e734      	b.n	8000a98 <HAL_GPIO_Init+0x158>
 8000c2e:	2104      	movs	r1, #4
 8000c30:	e732      	b.n	8000a98 <HAL_GPIO_Init+0x158>
 8000c32:	2105      	movs	r1, #5
 8000c34:	e730      	b.n	8000a98 <HAL_GPIO_Init+0x158>
 8000c36:	2106      	movs	r1, #6
 8000c38:	e72e      	b.n	8000a98 <HAL_GPIO_Init+0x158>
 8000c3a:	2107      	movs	r1, #7
 8000c3c:	e72c      	b.n	8000a98 <HAL_GPIO_Init+0x158>
 8000c3e:	bf00      	nop
 8000c40:	40020000 	.word	0x40020000
 8000c44:	08004be0 	.word	0x08004be0
 8000c48:	10110000 	.word	0x10110000
 8000c4c:	40013800 	.word	0x40013800
 8000c50:	40013c00 	.word	0x40013c00
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020400 	.word	0x40020400
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	e71b      	b.n	8000a98 <HAL_GPIO_Init+0x158>
      }
    }
  }
}
 8000c60:	b002      	add	sp, #8
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	bf00      	nop

08000c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c68:	b570      	push	{r4, r5, r6, lr}
 8000c6a:	4606      	mov	r6, r0
 8000c6c:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000c6e:	460c      	mov	r4, r1
 8000c70:	b151      	cbz	r1, 8000c88 <HAL_GPIO_WritePin+0x20>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000c72:	2d01      	cmp	r5, #1
 8000c74:	d904      	bls.n	8000c80 <HAL_GPIO_WritePin+0x18>
 8000c76:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000c7a:	4807      	ldr	r0, [pc, #28]	; (8000c98 <HAL_GPIO_WritePin+0x30>)
 8000c7c:	f003 fd34 	bl	80046e8 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8000c80:	b945      	cbnz	r5, 8000c94 <HAL_GPIO_WritePin+0x2c>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c82:	0424      	lsls	r4, r4, #16
 8000c84:	61b4      	str	r4, [r6, #24]
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000c88:	f240 11af 	movw	r1, #431	; 0x1af
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <HAL_GPIO_WritePin+0x30>)
 8000c8e:	f003 fd2b 	bl	80046e8 <assert_failed>
 8000c92:	e7ee      	b.n	8000c72 <HAL_GPIO_WritePin+0xa>
    GPIOx->BSRR = GPIO_Pin;
 8000c94:	61b4      	str	r4, [r6, #24]
 8000c96:	bd70      	pop	{r4, r5, r6, pc}
 8000c98:	08004be0 	.word	0x08004be0

08000c9c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8000c9e:	6806      	ldr	r6, [r0, #0]
  uint32_t pktsts;
  uint32_t pktcnt; 
  uint32_t temp = 0U;
  uint32_t tmpreg = 0U;
  
  temp = hhcd->Instance->GRXSTSP;
 8000ca0:	6a34      	ldr	r4, [r6, #32]
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 8000ca2:	f004 070f 	and.w	r7, r4, #15
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 8000ca6:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000caa:	f3c4 140a 	ubfx	r4, r4, #4, #11
  
  switch (pktsts)
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d12e      	bne.n	8000d10 <HCD_RXQLVL_IRQHandler+0x74>
  {
  case GRXSTS_PKTSTS_IN:
    /* Read the data into the host buffer. */
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8000cb2:	b36c      	cbz	r4, 8000d10 <HCD_RXQLVL_IRQHandler+0x74>
 8000cb4:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 8000cb8:	00d3      	lsls	r3, r2, #3
 8000cba:	4403      	add	r3, r0
 8000cbc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000cbe:	b339      	cbz	r1, 8000d10 <HCD_RXQLVL_IRQHandler+0x74>
 8000cc0:	4605      	mov	r5, r0
    {  
      
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8000cc2:	4622      	mov	r2, r4
 8000cc4:	4630      	mov	r0, r6
 8000cc6:	f002 fa83 	bl	80031d0 <USB_ReadPacket>
      
      /*manage multiple Xfer */
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8000cca:	00ba      	lsls	r2, r7, #2
 8000ccc:	443a      	add	r2, r7
 8000cce:	00d3      	lsls	r3, r2, #3
 8000cd0:	442b      	add	r3, r5
 8000cd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cd4:	4422      	add	r2, r4
 8000cd6:	645a      	str	r2, [r3, #68]	; 0x44
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8000cd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cda:	4422      	add	r2, r4
 8000cdc:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8000cde:	eb06 1347 	add.w	r3, r6, r7, lsl #5
 8000ce2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <HCD_RXQLVL_IRQHandler+0x78>)
 8000ce8:	400a      	ands	r2, r1
 8000cea:	b18a      	cbz	r2, 8000d10 <HCD_RXQLVL_IRQHandler+0x74>
      {
        /* re-activate the channel when more packets are expected */
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8000cec:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000cf0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000cf4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8000cf8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
        hhcd->hc[channelnum].toggle_in ^= 1;
 8000cfc:	00bb      	lsls	r3, r7, #2
 8000cfe:	19d9      	adds	r1, r3, r7
 8000d00:	00ca      	lsls	r2, r1, #3
 8000d02:	442a      	add	r2, r5
 8000d04:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8000d08:	f083 0301 	eor.w	r3, r3, #1
 8000d0c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 8000d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	1ff80000 	.word	0x1ff80000

08000d18 <HAL_HCD_SOF_Callback>:
{
 8000d18:	4770      	bx	lr

08000d1a <HAL_HCD_Connect_Callback>:
{
 8000d1a:	4770      	bx	lr

08000d1c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 8000d1c:	b530      	push	{r4, r5, lr}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	4605      	mov	r5, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8000d22:	6804      	ldr	r4, [r0, #0]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000d24:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8000d28:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 8000d2a:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8000d2e:	9300      	str	r3, [sp, #0]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000d30:	9b00      	ldr	r3, [sp, #0]
 8000d32:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000d36:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000d38:	9b01      	ldr	r3, [sp, #4]
 8000d3a:	f013 0f02 	tst.w	r3, #2
 8000d3e:	d007      	beq.n	8000d50 <HCD_Port_IRQHandler+0x34>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000d40:	9b01      	ldr	r3, [sp, #4]
 8000d42:	f013 0f01 	tst.w	r3, #1
 8000d46:	d125      	bne.n	8000d94 <HCD_Port_IRQHandler+0x78>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
      HAL_HCD_Connect_Callback(hhcd);
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8000d48:	9b00      	ldr	r3, [sp, #0]
 8000d4a:	f043 0302 	orr.w	r3, r3, #2
 8000d4e:	9300      	str	r3, [sp, #0]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000d50:	9b01      	ldr	r3, [sp, #4]
 8000d52:	f013 0f08 	tst.w	r3, #8
 8000d56:	d010      	beq.n	8000d7a <HCD_Port_IRQHandler+0x5e>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000d58:	9b00      	ldr	r3, [sp, #0]
 8000d5a:	f043 0308 	orr.w	r3, r3, #8
 8000d5e:	9300      	str	r3, [sp, #0]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8000d60:	9b01      	ldr	r3, [sp, #4]
 8000d62:	f013 0f04 	tst.w	r3, #4
 8000d66:	d031      	beq.n	8000dcc <HCD_Port_IRQHandler+0xb0>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8000d68:	69ab      	ldr	r3, [r5, #24]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d019      	beq.n	8000da2 <HCD_Port_IRQHandler+0x86>
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
        }
      }
      else
      {
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8000d6e:	68eb      	ldr	r3, [r5, #12]
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d026      	beq.n	8000dc2 <HCD_Port_IRQHandler+0xa6>
        {
          USBx_HOST->HFIR = 60000U;
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8000d74:	4628      	mov	r0, r5
 8000d76:	f7ff ffd0 	bl	8000d1a <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8000d7a:	9b01      	ldr	r3, [sp, #4]
 8000d7c:	f013 0f20 	tst.w	r3, #32
 8000d80:	d003      	beq.n	8000d8a <HCD_Port_IRQHandler+0x6e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8000d82:	9b00      	ldr	r3, [sp, #0]
 8000d84:	f043 0320 	orr.w	r3, r3, #32
 8000d88:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8000d8a:	9b00      	ldr	r3, [sp, #0]
 8000d8c:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 8000d90:	b003      	add	sp, #12
 8000d92:	bd30      	pop	{r4, r5, pc}
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000d94:	69a3      	ldr	r3, [r4, #24]
 8000d96:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000d9a:	61a3      	str	r3, [r4, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8000d9c:	f7ff ffbd 	bl	8000d1a <HAL_HCD_Connect_Callback>
 8000da0:	e7d2      	b.n	8000d48 <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8000da2:	9b01      	ldr	r3, [sp, #4]
 8000da4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8000da8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000dac:	d004      	beq.n	8000db8 <HCD_Port_IRQHandler+0x9c>
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8000dae:	2101      	movs	r1, #1
 8000db0:	6828      	ldr	r0, [r5, #0]
 8000db2:	f002 fa29 	bl	8003208 <USB_InitFSLSPClkSel>
 8000db6:	e7dd      	b.n	8000d74 <HCD_Port_IRQHandler+0x58>
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
 8000db8:	2102      	movs	r1, #2
 8000dba:	6828      	ldr	r0, [r5, #0]
 8000dbc:	f002 fa24 	bl	8003208 <USB_InitFSLSPClkSel>
 8000dc0:	e7d8      	b.n	8000d74 <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 8000dc2:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000dc6:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
 8000dca:	e7d3      	b.n	8000d74 <HCD_Port_IRQHandler+0x58>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000dcc:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8000dd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000dd4:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8000dd8:	682a      	ldr	r2, [r5, #0]
 8000dda:	6993      	ldr	r3, [r2, #24]
 8000ddc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000de0:	6193      	str	r3, [r2, #24]
 8000de2:	e7ca      	b.n	8000d7a <HCD_Port_IRQHandler+0x5e>

08000de4 <HAL_HCD_Disconnect_Callback>:
{
 8000de4:	4770      	bx	lr

08000de6 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
 8000de6:	4770      	bx	lr

08000de8 <HCD_HC_IN_IRQHandler>:
{
 8000de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dea:	4606      	mov	r6, r0
 8000dec:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000dee:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8000df0:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 8000df4:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 8000df8:	68a3      	ldr	r3, [r4, #8]
 8000dfa:	f013 0f04 	tst.w	r3, #4
 8000dfe:	d041      	beq.n	8000e84 <HCD_HC_IN_IRQHandler+0x9c>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8000e00:	2304      	movs	r3, #4
 8000e02:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000e04:	68e3      	ldr	r3, [r4, #12]
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	60e3      	str	r3, [r4, #12]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8000e0c:	68a3      	ldr	r3, [r4, #8]
 8000e0e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000e12:	d16d      	bne.n	8000ef0 <HCD_HC_IN_IRQHandler+0x108>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8000e14:	68a3      	ldr	r3, [r4, #8]
 8000e16:	f013 0f01 	tst.w	r3, #1
 8000e1a:	f000 808a 	beq.w	8000f32 <HCD_HC_IN_IRQHandler+0x14a>
    if (hhcd->Init.dma_enable)
 8000e1e:	6933      	ldr	r3, [r6, #16]
 8000e20:	b163      	cbz	r3, 8000e3c <HCD_HC_IN_IRQHandler+0x54>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8000e22:	00ab      	lsls	r3, r5, #2
 8000e24:	1959      	adds	r1, r3, r5
 8000e26:	00ca      	lsls	r2, r1, #3
 8000e28:	4432      	add	r2, r6
 8000e2a:	6c91      	ldr	r1, [r2, #72]	; 0x48
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000e2c:	6922      	ldr	r2, [r4, #16]
 8000e2e:	f3c2 0212 	ubfx	r2, r2, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8000e32:	1a89      	subs	r1, r1, r2
 8000e34:	442b      	add	r3, r5
 8000e36:	00da      	lsls	r2, r3, #3
 8000e38:	4432      	add	r2, r6
 8000e3a:	64d1      	str	r1, [r2, #76]	; 0x4c
    hhcd->hc[chnum].state = HC_XFRC;
 8000e3c:	00aa      	lsls	r2, r5, #2
 8000e3e:	442a      	add	r2, r5
 8000e40:	00d3      	lsls	r3, r2, #3
 8000e42:	4433      	add	r3, r6
 8000e44:	2201      	movs	r2, #1
 8000e46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[chnum].ErrCnt = 0U;
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	6599      	str	r1, [r3, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8000e4e:	60a2      	str	r2, [r4, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8000e50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d057      	beq.n	8000f08 <HCD_HC_IN_IRQHandler+0x120>
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d055      	beq.n	8000f08 <HCD_HC_IN_IRQHandler+0x120>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d15d      	bne.n	8000f1c <HCD_HC_IN_IRQHandler+0x134>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000e60:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8000e64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e68:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8000e6c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000e70:	00d3      	lsls	r3, r2, #3
 8000e72:	4433      	add	r3, r6
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8000e7a:	4629      	mov	r1, r5
 8000e7c:	4630      	mov	r0, r6
 8000e7e:	f7ff ffb2 	bl	8000de6 <HAL_HCD_HC_NotifyURBChange_Callback>
 8000e82:	e04b      	b.n	8000f1c <HCD_HC_IN_IRQHandler+0x134>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8000e84:	68a3      	ldr	r3, [r4, #8]
 8000e86:	f013 0f20 	tst.w	r3, #32
 8000e8a:	d002      	beq.n	8000e92 <HCD_HC_IN_IRQHandler+0xaa>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000e8c:	2320      	movs	r3, #32
 8000e8e:	60a3      	str	r3, [r4, #8]
 8000e90:	e7bc      	b.n	8000e0c <HCD_HC_IN_IRQHandler+0x24>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8000e92:	68a3      	ldr	r3, [r4, #8]
 8000e94:	f013 0f08 	tst.w	r3, #8
 8000e98:	d117      	bne.n	8000eca <HCD_HC_IN_IRQHandler+0xe2>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8000e9a:	68a3      	ldr	r3, [r4, #8]
 8000e9c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000ea0:	d0b4      	beq.n	8000e0c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000ea2:	68e3      	ldr	r3, [r4, #12]
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000eaa:	6800      	ldr	r0, [r0, #0]
 8000eac:	f002 f9db 	bl	8003266 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8000eb0:	2310      	movs	r3, #16
 8000eb2:	60a3      	str	r3, [r4, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8000eb4:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000eb8:	00d3      	lsls	r3, r2, #3
 8000eba:	4433      	add	r3, r6
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8000ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec6:	60a3      	str	r3, [r4, #8]
 8000ec8:	e7a0      	b.n	8000e0c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000eca:	68e3      	ldr	r3, [r4, #12]
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	60e3      	str	r3, [r4, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8000ed2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000ed6:	00d3      	lsls	r3, r2, #3
 8000ed8:	4403      	add	r3, r0
 8000eda:	2205      	movs	r2, #5
 8000edc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000ee0:	2310      	movs	r3, #16
 8000ee2:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	60a3      	str	r3, [r4, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 8000ee8:	6800      	ldr	r0, [r0, #0]
 8000eea:	f002 f9bc 	bl	8003266 <USB_HC_Halt>
 8000eee:	e78d      	b.n	8000e0c <HCD_HC_IN_IRQHandler+0x24>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000ef0:	68e3      	ldr	r3, [r4, #12]
 8000ef2:	f043 0302 	orr.w	r3, r3, #2
 8000ef6:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8000ef8:	4629      	mov	r1, r5
 8000efa:	6830      	ldr	r0, [r6, #0]
 8000efc:	f002 f9b3 	bl	8003266 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8000f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f04:	60a3      	str	r3, [r4, #8]
 8000f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8000f08:	68e3      	ldr	r3, [r4, #12]
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	60e3      	str	r3, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8000f10:	4629      	mov	r1, r5
 8000f12:	6830      	ldr	r0, [r6, #0]
 8000f14:	f002 f9a7 	bl	8003266 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000f18:	2310      	movs	r3, #16
 8000f1a:	60a3      	str	r3, [r4, #8]
    hhcd->hc[chnum].toggle_in ^= 1U;
 8000f1c:	00ab      	lsls	r3, r5, #2
 8000f1e:	1959      	adds	r1, r3, r5
 8000f20:	00ca      	lsls	r2, r1, #3
 8000f22:	4432      	add	r2, r6
 8000f24:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8000f28:	f083 0301 	eor.w	r3, r3, #1
 8000f2c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
 8000f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8000f32:	68a3      	ldr	r3, [r4, #8]
 8000f34:	f013 0f02 	tst.w	r3, #2
 8000f38:	d050      	beq.n	8000fdc <HCD_HC_IN_IRQHandler+0x1f4>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8000f3a:	68e3      	ldr	r3, [r4, #12]
 8000f3c:	f023 0302 	bic.w	r3, r3, #2
 8000f40:	60e3      	str	r3, [r4, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8000f42:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000f46:	00d3      	lsls	r3, r2, #3
 8000f48:	4433      	add	r3, r6
 8000f4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d02c      	beq.n	8000fac <HCD_HC_IN_IRQHandler+0x1c4>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d032      	beq.n	8000fbc <HCD_HC_IN_IRQHandler+0x1d4>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d001      	beq.n	8000f5e <HCD_HC_IN_IRQHandler+0x176>
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d119      	bne.n	8000f92 <HCD_HC_IN_IRQHandler+0x1aa>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8000f5e:	00aa      	lsls	r2, r5, #2
 8000f60:	442a      	add	r2, r5
 8000f62:	00d3      	lsls	r3, r2, #3
 8000f64:	4433      	add	r3, r6
 8000f66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f68:	1c51      	adds	r1, r2, #1
 8000f6a:	6599      	str	r1, [r3, #88]	; 0x58
 8000f6c:	2a03      	cmp	r2, #3
 8000f6e:	d92d      	bls.n	8000fcc <HCD_HC_IN_IRQHandler+0x1e4>
        hhcd->hc[chnum].ErrCnt = 0U;
 8000f70:	00aa      	lsls	r2, r5, #2
 8000f72:	442a      	add	r2, r5
 8000f74:	00d3      	lsls	r3, r2, #3
 8000f76:	4433      	add	r3, r6
 8000f78:	2200      	movs	r2, #0
 8000f7a:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8000f82:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000f86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000f8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8000f8e:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8000f92:	2302      	movs	r3, #2
 8000f94:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8000f96:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000f9a:	00d3      	lsls	r3, r2, #3
 8000f9c:	4433      	add	r3, r6
 8000f9e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8000fa2:	4629      	mov	r1, r5
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	f7ff ff1e 	bl	8000de6 <HAL_HCD_HC_NotifyURBChange_Callback>
 8000faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hhcd->hc[chnum].urb_state  = URB_DONE;      
 8000fac:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000fb0:	00d3      	lsls	r3, r2, #3
 8000fb2:	4433      	add	r3, r6
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8000fba:	e7ea      	b.n	8000f92 <HCD_HC_IN_IRQHandler+0x1aa>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8000fbc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000fc0:	00d3      	lsls	r3, r2, #3
 8000fc2:	4433      	add	r3, r6
 8000fc4:	2205      	movs	r2, #5
 8000fc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8000fca:	e7e2      	b.n	8000f92 <HCD_HC_IN_IRQHandler+0x1aa>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8000fcc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000fd0:	00d3      	lsls	r3, r2, #3
 8000fd2:	4433      	add	r3, r6
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8000fda:	e7d2      	b.n	8000f82 <HCD_HC_IN_IRQHandler+0x19a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8000fdc:	68a3      	ldr	r3, [r4, #8]
 8000fde:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000fe2:	d126      	bne.n	8001032 <HCD_HC_IN_IRQHandler+0x24a>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8000fe4:	68a3      	ldr	r3, [r4, #8]
 8000fe6:	f013 0f10 	tst.w	r3, #16
 8000fea:	d021      	beq.n	8001030 <HCD_HC_IN_IRQHandler+0x248>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8000fec:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000ff0:	00d3      	lsls	r3, r2, #3
 8000ff2:	4433      	add	r3, r6
 8000ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d032      	beq.n	8001062 <HCD_HC_IN_IRQHandler+0x27a>
    hhcd->hc[chnum].state = HC_NAK;
 8000ffc:	00ab      	lsls	r3, r5, #2
 8000ffe:	1959      	adds	r1, r3, r5
 8001000:	00ca      	lsls	r2, r1, #3
 8001002:	4432      	add	r2, r6
 8001004:	2103      	movs	r1, #3
 8001006:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800100a:	2210      	movs	r2, #16
 800100c:	60a2      	str	r2, [r4, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 800100e:	441d      	add	r5, r3
 8001010:	fa05 f301 	lsl.w	r3, r5, r1
 8001014:	441e      	add	r6, r3
 8001016:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
 800101a:	b10b      	cbz	r3, 8001020 <HCD_HC_IN_IRQHandler+0x238>
 800101c:	2b02      	cmp	r3, #2
 800101e:	d107      	bne.n	8001030 <HCD_HC_IN_IRQHandler+0x248>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001020:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001024:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001028:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 800102c:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8001030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001032:	68e3      	ldr	r3, [r4, #12]
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	60e3      	str	r3, [r4, #12]
    hhcd->hc[chnum].ErrCnt++;
 800103a:	00ab      	lsls	r3, r5, #2
 800103c:	1959      	adds	r1, r3, r5
 800103e:	00ca      	lsls	r2, r1, #3
 8001040:	4432      	add	r2, r6
 8001042:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8001044:	3101      	adds	r1, #1
 8001046:	6591      	str	r1, [r2, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XACTERR;
 8001048:	442b      	add	r3, r5
 800104a:	00da      	lsls	r2, r3, #3
 800104c:	4432      	add	r2, r6
 800104e:	2306      	movs	r3, #6
 8001050:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);     
 8001054:	4629      	mov	r1, r5
 8001056:	6830      	ldr	r0, [r6, #0]
 8001058:	f002 f905 	bl	8003266 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	60a3      	str	r3, [r4, #8]
 8001060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001062:	68e3      	ldr	r3, [r4, #12]
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	60e3      	str	r3, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 800106a:	4629      	mov	r1, r5
 800106c:	6830      	ldr	r0, [r6, #0]
 800106e:	f002 f8fa 	bl	8003266 <USB_HC_Halt>
 8001072:	e7c3      	b.n	8000ffc <HCD_HC_IN_IRQHandler+0x214>

08001074 <HCD_HC_OUT_IRQHandler>:
{
 8001074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001076:	6804      	ldr	r4, [r0, #0]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001078:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 800107c:	f504 64a0 	add.w	r4, r4, #1280	; 0x500
 8001080:	68a3      	ldr	r3, [r4, #8]
 8001082:	f013 0f04 	tst.w	r3, #4
 8001086:	d110      	bne.n	80010aa <HCD_HC_OUT_IRQHandler+0x36>
 8001088:	460e      	mov	r6, r1
 800108a:	4605      	mov	r5, r0
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 800108c:	68a3      	ldr	r3, [r4, #8]
 800108e:	f013 0f20 	tst.w	r3, #32
 8001092:	d026      	beq.n	80010e2 <HCD_HC_OUT_IRQHandler+0x6e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001094:	2320      	movs	r3, #32
 8001096:	60a3      	str	r3, [r4, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 8001098:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800109c:	00d3      	lsls	r3, r2, #3
 800109e:	4403      	add	r3, r0
 80010a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d007      	beq.n	80010b8 <HCD_HC_OUT_IRQHandler+0x44>
 80010a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80010aa:	2304      	movs	r3, #4
 80010ac:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80010ae:	68e3      	ldr	r3, [r4, #12]
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	60e3      	str	r3, [r4, #12]
 80010b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hhcd->hc[chnum].state = HC_NYET;     
 80010b8:	008f      	lsls	r7, r1, #2
 80010ba:	187a      	adds	r2, r7, r1
 80010bc:	00d3      	lsls	r3, r2, #3
 80010be:	4403      	add	r3, r0
 80010c0:	2204      	movs	r2, #4
 80010c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80010c6:	68e3      	ldr	r3, [r4, #12]
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	60e3      	str	r3, [r4, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 80010ce:	6800      	ldr	r0, [r0, #0]
 80010d0:	f002 f8c9 	bl	8003266 <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80010d4:	19b9      	adds	r1, r7, r6
 80010d6:	00c8      	lsls	r0, r1, #3
 80010d8:	4428      	add	r0, r5
 80010da:	2302      	movs	r3, #2
 80010dc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 80010e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 80010e2:	68a3      	ldr	r3, [r4, #8]
 80010e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80010e8:	d14d      	bne.n	8001186 <HCD_HC_OUT_IRQHandler+0x112>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 80010ea:	68a3      	ldr	r3, [r4, #8]
 80010ec:	f413 7f00 	tst.w	r3, #512	; 0x200
 80010f0:	d160      	bne.n	80011b4 <HCD_HC_OUT_IRQHandler+0x140>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 80010f2:	68a3      	ldr	r3, [r4, #8]
 80010f4:	f013 0f01 	tst.w	r3, #1
 80010f8:	d167      	bne.n	80011ca <HCD_HC_OUT_IRQHandler+0x156>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 80010fa:	68a3      	ldr	r3, [r4, #8]
 80010fc:	f013 0f08 	tst.w	r3, #8
 8001100:	d178      	bne.n	80011f4 <HCD_HC_OUT_IRQHandler+0x180>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001102:	68a3      	ldr	r3, [r4, #8]
 8001104:	f013 0f10 	tst.w	r3, #16
 8001108:	f040 8085 	bne.w	8001216 <HCD_HC_OUT_IRQHandler+0x1a2>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 800110c:	68a3      	ldr	r3, [r4, #8]
 800110e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001112:	f040 8096 	bne.w	8001242 <HCD_HC_OUT_IRQHandler+0x1ce>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8001116:	68a3      	ldr	r3, [r4, #8]
 8001118:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800111c:	f040 80a2 	bne.w	8001264 <HCD_HC_OUT_IRQHandler+0x1f0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8001120:	68a3      	ldr	r3, [r4, #8]
 8001122:	f013 0f02 	tst.w	r3, #2
 8001126:	d0bf      	beq.n	80010a8 <HCD_HC_OUT_IRQHandler+0x34>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8001128:	68e3      	ldr	r3, [r4, #12]
 800112a:	f023 0302 	bic.w	r3, r3, #2
 800112e:	60e3      	str	r3, [r4, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001130:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001134:	00d3      	lsls	r3, r2, #3
 8001136:	4403      	add	r3, r0
 8001138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800113c:	2b01      	cmp	r3, #1
 800113e:	f000 80a5 	beq.w	800128c <HCD_HC_OUT_IRQHandler+0x218>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 8001142:	2b03      	cmp	r3, #3
 8001144:	f000 80c5 	beq.w	80012d2 <HCD_HC_OUT_IRQHandler+0x25e>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 8001148:	2b04      	cmp	r3, #4
 800114a:	f000 80ca 	beq.w	80012e2 <HCD_HC_OUT_IRQHandler+0x26e>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 800114e:	2b05      	cmp	r3, #5
 8001150:	f000 80d2 	beq.w	80012f8 <HCD_HC_OUT_IRQHandler+0x284>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001154:	2b06      	cmp	r3, #6
 8001156:	d002      	beq.n	800115e <HCD_HC_OUT_IRQHandler+0xea>
 8001158:	2b08      	cmp	r3, #8
 800115a:	f040 80a2 	bne.w	80012a2 <HCD_HC_OUT_IRQHandler+0x22e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 800115e:	00b2      	lsls	r2, r6, #2
 8001160:	4432      	add	r2, r6
 8001162:	00d3      	lsls	r3, r2, #3
 8001164:	442b      	add	r3, r5
 8001166:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001168:	1c51      	adds	r1, r2, #1
 800116a:	6599      	str	r1, [r3, #88]	; 0x58
 800116c:	2a03      	cmp	r2, #3
 800116e:	f240 80cb 	bls.w	8001308 <HCD_HC_OUT_IRQHandler+0x294>
        hhcd->hc[chnum].ErrCnt = 0U;
 8001172:	00b2      	lsls	r2, r6, #2
 8001174:	4432      	add	r2, r6
 8001176:	00d3      	lsls	r3, r2, #3
 8001178:	442b      	add	r3, r5
 800117a:	2200      	movs	r2, #0
 800117c:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800117e:	2204      	movs	r2, #4
 8001180:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001184:	e08d      	b.n	80012a2 <HCD_HC_OUT_IRQHandler+0x22e>
    hhcd->hc[chnum].state = HC_NYET;
 8001186:	008b      	lsls	r3, r1, #2
 8001188:	1859      	adds	r1, r3, r1
 800118a:	00ca      	lsls	r2, r1, #3
 800118c:	4402      	add	r2, r0
 800118e:	2104      	movs	r1, #4
 8001190:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[chnum].ErrCnt= 0U;    
 8001194:	4433      	add	r3, r6
 8001196:	00da      	lsls	r2, r3, #3
 8001198:	4402      	add	r2, r0
 800119a:	2300      	movs	r3, #0
 800119c:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800119e:	68e3      	ldr	r3, [r4, #12]
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 80011a6:	4631      	mov	r1, r6
 80011a8:	6800      	ldr	r0, [r0, #0]
 80011aa:	f002 f85c 	bl	8003266 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80011ae:	2340      	movs	r3, #64	; 0x40
 80011b0:	60a3      	str	r3, [r4, #8]
 80011b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80011b4:	68e3      	ldr	r3, [r4, #12]
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80011bc:	6800      	ldr	r0, [r0, #0]
 80011be:	f002 f852 	bl	8003266 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80011c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c6:	60a3      	str	r3, [r4, #8]
 80011c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hhcd->hc[chnum].ErrCnt = 0U;  
 80011ca:	008f      	lsls	r7, r1, #2
 80011cc:	187a      	adds	r2, r7, r1
 80011ce:	00d3      	lsls	r3, r2, #3
 80011d0:	4403      	add	r3, r0
 80011d2:	2200      	movs	r2, #0
 80011d4:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80011d6:	68e3      	ldr	r3, [r4, #12]
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 80011de:	6800      	ldr	r0, [r0, #0]
 80011e0:	f002 f841 	bl	8003266 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80011e4:	2301      	movs	r3, #1
 80011e6:	60a3      	str	r3, [r4, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80011e8:	19b9      	adds	r1, r7, r6
 80011ea:	00c8      	lsls	r0, r1, #3
 80011ec:	4428      	add	r0, r5
 80011ee:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
 80011f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 80011f4:	2308      	movs	r3, #8
 80011f6:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80011f8:	68e3      	ldr	r3, [r4, #12]
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001200:	6800      	ldr	r0, [r0, #0]
 8001202:	f002 f830 	bl	8003266 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8001206:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 800120a:	00c8      	lsls	r0, r1, #3
 800120c:	4428      	add	r0, r5
 800120e:	2305      	movs	r3, #5
 8001210:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
 8001214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hhcd->hc[chnum].ErrCnt = 0U;  
 8001216:	008f      	lsls	r7, r1, #2
 8001218:	187a      	adds	r2, r7, r1
 800121a:	00d3      	lsls	r3, r2, #3
 800121c:	4403      	add	r3, r0
 800121e:	2200      	movs	r2, #0
 8001220:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001222:	68e3      	ldr	r3, [r4, #12]
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 800122a:	6800      	ldr	r0, [r0, #0]
 800122c:	f002 f81b 	bl	8003266 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8001230:	19b9      	adds	r1, r7, r6
 8001232:	00c8      	lsls	r0, r1, #3
 8001234:	4428      	add	r0, r5
 8001236:	2303      	movs	r3, #3
 8001238:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800123c:	2310      	movs	r3, #16
 800123e:	60a3      	str	r3, [r4, #8]
 8001240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001242:	68e3      	ldr	r3, [r4, #12]
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 800124a:	6800      	ldr	r0, [r0, #0]
 800124c:	f002 f80b 	bl	8003266 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8001250:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8001254:	00c8      	lsls	r0, r1, #3
 8001256:	4428      	add	r0, r5
 8001258:	2306      	movs	r3, #6
 800125a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	60a3      	str	r3, [r4, #8]
 8001262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001264:	68e3      	ldr	r3, [r4, #12]
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	60e3      	str	r3, [r4, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 800126c:	6800      	ldr	r0, [r0, #0]
 800126e:	f001 fffa 	bl	8003266 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001272:	2310      	movs	r3, #16
 8001274:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8001276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127a:	60a3      	str	r3, [r4, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800127c:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8001280:	00cb      	lsls	r3, r1, #3
 8001282:	442b      	add	r3, r5
 8001284:	2208      	movs	r2, #8
 8001286:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800128a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hhcd->hc[chnum].urb_state  = URB_DONE;
 800128c:	008a      	lsls	r2, r1, #2
 800128e:	440a      	add	r2, r1
 8001290:	00d3      	lsls	r3, r2, #3
 8001292:	4403      	add	r3, r0
 8001294:	2201      	movs	r2, #1
 8001296:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 800129a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d00c      	beq.n	80012bc <HCD_HC_OUT_IRQHandler+0x248>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80012a2:	2302      	movs	r3, #2
 80012a4:	60a3      	str	r3, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 80012a6:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80012aa:	00d3      	lsls	r3, r2, #3
 80012ac:	442b      	add	r3, r5
 80012ae:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80012b2:	4631      	mov	r1, r6
 80012b4:	4628      	mov	r0, r5
 80012b6:	f7ff fd96 	bl	8000de6 <HAL_HCD_HC_NotifyURBChange_Callback>
} 
 80012ba:	e6f5      	b.n	80010a8 <HCD_HC_OUT_IRQHandler+0x34>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 80012bc:	008a      	lsls	r2, r1, #2
 80012be:	440a      	add	r2, r1
 80012c0:	00d3      	lsls	r3, r2, #3
 80012c2:	4403      	add	r3, r0
 80012c4:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 80012c8:	f082 0201 	eor.w	r2, r2, #1
 80012cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80012d0:	e7e7      	b.n	80012a2 <HCD_HC_OUT_IRQHandler+0x22e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80012d2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80012d6:	00d3      	lsls	r3, r2, #3
 80012d8:	4403      	add	r3, r0
 80012da:	2202      	movs	r2, #2
 80012dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80012e0:	e7df      	b.n	80012a2 <HCD_HC_OUT_IRQHandler+0x22e>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80012e2:	008a      	lsls	r2, r1, #2
 80012e4:	440a      	add	r2, r1
 80012e6:	00d3      	lsls	r3, r2, #3
 80012e8:	4403      	add	r3, r0
 80012ea:	2202      	movs	r2, #2
 80012ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      hhcd->hc[chnum].do_ping = 0U;
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80012f6:	e7d4      	b.n	80012a2 <HCD_HC_OUT_IRQHandler+0x22e>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80012f8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80012fc:	00d3      	lsls	r3, r2, #3
 80012fe:	4403      	add	r3, r0
 8001300:	2205      	movs	r2, #5
 8001302:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001306:	e7cc      	b.n	80012a2 <HCD_HC_OUT_IRQHandler+0x22e>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001308:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800130c:	00d3      	lsls	r3, r2, #3
 800130e:	442b      	add	r3, r5
 8001310:	2202      	movs	r2, #2
 8001312:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001316:	e7c4      	b.n	80012a2 <HCD_HC_OUT_IRQHandler+0x22e>

08001318 <HAL_HCD_IRQHandler>:
{
 8001318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800131a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800131c:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800131e:	4628      	mov	r0, r5
 8001320:	f001 ff6e 	bl	8003200 <USB_GetMode>
 8001324:	2801      	cmp	r0, #1
 8001326:	d000      	beq.n	800132a <HAL_HCD_IRQHandler+0x12>
 8001328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 800132a:	6820      	ldr	r0, [r4, #0]
 800132c:	f001 ff64 	bl	80031f8 <USB_ReadInterrupts>
 8001330:	2800      	cmp	r0, #0
 8001332:	d0f9      	beq.n	8001328 <HAL_HCD_IRQHandler+0x10>
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001334:	6820      	ldr	r0, [r4, #0]
 8001336:	f001 ff5f 	bl	80031f8 <USB_ReadInterrupts>
 800133a:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800133e:	d003      	beq.n	8001348 <HAL_HCD_IRQHandler+0x30>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001346:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001348:	6820      	ldr	r0, [r4, #0]
 800134a:	f001 ff55 	bl	80031f8 <USB_ReadInterrupts>
 800134e:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001352:	d003      	beq.n	800135c <HAL_HCD_IRQHandler+0x44>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800135a:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800135c:	6820      	ldr	r0, [r4, #0]
 800135e:	f001 ff4b 	bl	80031f8 <USB_ReadInterrupts>
 8001362:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8001366:	d003      	beq.n	8001370 <HAL_HCD_IRQHandler+0x58>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800136e:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001370:	6820      	ldr	r0, [r4, #0]
 8001372:	f001 ff41 	bl	80031f8 <USB_ReadInterrupts>
 8001376:	f010 0f02 	tst.w	r0, #2
 800137a:	d002      	beq.n	8001382 <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800137c:	6823      	ldr	r3, [r4, #0]
 800137e:	2202      	movs	r2, #2
 8001380:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001382:	6820      	ldr	r0, [r4, #0]
 8001384:	f001 ff38 	bl	80031f8 <USB_ReadInterrupts>
 8001388:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 800138c:	d125      	bne.n	80013da <HAL_HCD_IRQHandler+0xc2>
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800138e:	6820      	ldr	r0, [r4, #0]
 8001390:	f001 ff32 	bl	80031f8 <USB_ReadInterrupts>
 8001394:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8001398:	d131      	bne.n	80013fe <HAL_HCD_IRQHandler+0xe6>
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800139a:	6820      	ldr	r0, [r4, #0]
 800139c:	f001 ff2c 	bl	80031f8 <USB_ReadInterrupts>
 80013a0:	f010 0f08 	tst.w	r0, #8
 80013a4:	d12f      	bne.n	8001406 <HAL_HCD_IRQHandler+0xee>
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80013a6:	6820      	ldr	r0, [r4, #0]
 80013a8:	f001 ff26 	bl	80031f8 <USB_ReadInterrupts>
 80013ac:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80013b0:	d130      	bne.n	8001414 <HAL_HCD_IRQHandler+0xfc>
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 80013b2:	6820      	ldr	r0, [r4, #0]
 80013b4:	f001 ff20 	bl	80031f8 <USB_ReadInterrupts>
 80013b8:	f010 0f10 	tst.w	r0, #16
 80013bc:	d0b4      	beq.n	8001328 <HAL_HCD_IRQHandler+0x10>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013be:	6822      	ldr	r2, [r4, #0]
 80013c0:	6993      	ldr	r3, [r2, #24]
 80013c2:	f023 0310 	bic.w	r3, r3, #16
 80013c6:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler (hhcd);
 80013c8:	4620      	mov	r0, r4
 80013ca:	f7ff fc67 	bl	8000c9c <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ce:	6822      	ldr	r2, [r4, #0]
 80013d0:	6993      	ldr	r3, [r2, #24]
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	e7a6      	b.n	8001328 <HAL_HCD_IRQHandler+0x10>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80013da:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80013de:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80013e2:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff fcfc 	bl	8000de4 <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 80013ec:	2101      	movs	r1, #1
 80013ee:	6820      	ldr	r0, [r4, #0]
 80013f0:	f001 ff0a 	bl	8003208 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80013f4:	6823      	ldr	r3, [r4, #0]
 80013f6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	e7c7      	b.n	800138e <HAL_HCD_IRQHandler+0x76>
      HCD_Port_IRQHandler (hhcd);
 80013fe:	4620      	mov	r0, r4
 8001400:	f7ff fc8c 	bl	8000d1c <HCD_Port_IRQHandler>
 8001404:	e7c9      	b.n	800139a <HAL_HCD_IRQHandler+0x82>
      HAL_HCD_SOF_Callback(hhcd);
 8001406:	4620      	mov	r0, r4
 8001408:	f7ff fc86 	bl	8000d18 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800140c:	6823      	ldr	r3, [r4, #0]
 800140e:	2208      	movs	r2, #8
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	e7c8      	b.n	80013a6 <HAL_HCD_IRQHandler+0x8e>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001414:	6820      	ldr	r0, [r4, #0]
 8001416:	f001 ff17 	bl	8003248 <USB_HC_ReadInterrupt>
 800141a:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800141c:	2600      	movs	r6, #0
 800141e:	e004      	b.n	800142a <HAL_HCD_IRQHandler+0x112>
            HCD_HC_OUT_IRQHandler (hhcd, i);
 8001420:	b2f1      	uxtb	r1, r6
 8001422:	4620      	mov	r0, r4
 8001424:	f7ff fe26 	bl	8001074 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001428:	3601      	adds	r6, #1
 800142a:	68a3      	ldr	r3, [r4, #8]
 800142c:	429e      	cmp	r6, r3
 800142e:	d20f      	bcs.n	8001450 <HAL_HCD_IRQHandler+0x138>
        if (interrupt & (1U << i))
 8001430:	2301      	movs	r3, #1
 8001432:	40b3      	lsls	r3, r6
 8001434:	421f      	tst	r7, r3
 8001436:	d0f7      	beq.n	8001428 <HAL_HCD_IRQHandler+0x110>
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8001438:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 800143c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8001440:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001444:	d0ec      	beq.n	8001420 <HAL_HCD_IRQHandler+0x108>
            HCD_HC_IN_IRQHandler(hhcd, i);
 8001446:	b2f1      	uxtb	r1, r6
 8001448:	4620      	mov	r0, r4
 800144a:	f7ff fccd 	bl	8000de8 <HCD_HC_IN_IRQHandler>
 800144e:	e7eb      	b.n	8001428 <HAL_HCD_IRQHandler+0x110>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	e7ab      	b.n	80013b2 <HAL_HCD_IRQHandler+0x9a>

0800145a <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800145a:	4770      	bx	lr

0800145c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800145c:	4770      	bx	lr

0800145e <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800145e:	4770      	bx	lr

08001460 <HAL_LTDC_IRQHandler>:
{
 8001460:	b570      	push	{r4, r5, r6, lr}
 8001462:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001464:	6803      	ldr	r3, [r0, #0]
 8001466:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001468:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if(((isrflags & LTDC_ISR_TERRIF) != RESET) && ((itsources & LTDC_IER_TERRIE) != RESET))
 800146a:	f015 0f04 	tst.w	r5, #4
 800146e:	d002      	beq.n	8001476 <HAL_LTDC_IRQHandler+0x16>
 8001470:	f016 0f04 	tst.w	r6, #4
 8001474:	d112      	bne.n	800149c <HAL_LTDC_IRQHandler+0x3c>
  if(((isrflags & LTDC_ISR_FUIF) != RESET) && ((itsources & LTDC_IER_FUIE) != RESET))
 8001476:	f015 0f02 	tst.w	r5, #2
 800147a:	d002      	beq.n	8001482 <HAL_LTDC_IRQHandler+0x22>
 800147c:	f016 0f02 	tst.w	r6, #2
 8001480:	d121      	bne.n	80014c6 <HAL_LTDC_IRQHandler+0x66>
  if(((isrflags & LTDC_ISR_LIF) != RESET) && ((itsources & LTDC_IER_LIE) != RESET))
 8001482:	f015 0f01 	tst.w	r5, #1
 8001486:	d002      	beq.n	800148e <HAL_LTDC_IRQHandler+0x2e>
 8001488:	f016 0f01 	tst.w	r6, #1
 800148c:	d132      	bne.n	80014f4 <HAL_LTDC_IRQHandler+0x94>
  if(((isrflags & LTDC_ISR_RRIF) != RESET) && ((itsources & LTDC_IER_RRIE) != RESET))
 800148e:	f015 0f08 	tst.w	r5, #8
 8001492:	d002      	beq.n	800149a <HAL_LTDC_IRQHandler+0x3a>
 8001494:	f016 0f08 	tst.w	r6, #8
 8001498:	d13d      	bne.n	8001516 <HAL_LTDC_IRQHandler+0xb6>
 800149a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800149c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800149e:	f022 0204 	bic.w	r2, r2, #4
 80014a2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80014a4:	6803      	ldr	r3, [r0, #0]
 80014a6:	2204      	movs	r2, #4
 80014a8:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80014aa:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80014b6:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80014ba:	2300      	movs	r3, #0
 80014bc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80014c0:	f7ff ffcb 	bl	800145a <HAL_LTDC_ErrorCallback>
 80014c4:	e7d7      	b.n	8001476 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80014c6:	6822      	ldr	r2, [r4, #0]
 80014c8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80014ca:	f023 0302 	bic.w	r3, r3, #2
 80014ce:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80014d0:	6823      	ldr	r3, [r4, #0]
 80014d2:	2202      	movs	r2, #2
 80014d4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80014d6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80014da:	4313      	orrs	r3, r2
 80014dc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80014e0:	2304      	movs	r3, #4
 80014e2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80014e6:	2300      	movs	r3, #0
 80014e8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80014ec:	4620      	mov	r0, r4
 80014ee:	f7ff ffb4 	bl	800145a <HAL_LTDC_ErrorCallback>
 80014f2:	e7c6      	b.n	8001482 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80014f4:	6822      	ldr	r2, [r4, #0]
 80014f6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80014fe:	6822      	ldr	r2, [r4, #0]
 8001500:	2301      	movs	r3, #1
 8001502:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8001504:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001508:	2300      	movs	r3, #0
 800150a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800150e:	4620      	mov	r0, r4
 8001510:	f7ff ffa4 	bl	800145c <HAL_LTDC_LineEventCallback>
 8001514:	e7bb      	b.n	800148e <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001516:	6822      	ldr	r2, [r4, #0]
 8001518:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800151a:	f023 0308 	bic.w	r3, r3, #8
 800151e:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	2208      	movs	r2, #8
 8001524:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8001526:	2301      	movs	r3, #1
 8001528:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800152c:	2300      	movs	r3, #0
 800152e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001532:	4620      	mov	r0, r4
 8001534:	f7ff ff93 	bl	800145e <HAL_LTDC_ReloadEventCallback>
}
 8001538:	e7af      	b.n	800149a <HAL_LTDC_IRQHandler+0x3a>
	...

0800153c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800153c:	b510      	push	{r4, lr}
 800153e:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_PWREx_EnableOverDrive+0x70>)
 8001546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001548:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800154c:	641a      	str	r2, [r3, #64]	; 0x40
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001558:	2201      	movs	r2, #1
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_PWREx_EnableOverDrive+0x74>)
 800155c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800155e:	f7fe fffd 	bl	800055c <HAL_GetTick>
 8001562:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <HAL_PWREx_EnableOverDrive+0x78>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800156c:	d108      	bne.n	8001580 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800156e:	f7fe fff5 	bl	800055c <HAL_GetTick>
 8001572:	1b00      	subs	r0, r0, r4
 8001574:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001578:	d9f4      	bls.n	8001564 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800157a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 800157c:	b002      	add	sp, #8
 800157e:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001580:	2201      	movs	r2, #1
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_PWREx_EnableOverDrive+0x7c>)
 8001584:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001586:	f7fe ffe9 	bl	800055c <HAL_GetTick>
 800158a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_PWREx_EnableOverDrive+0x78>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001594:	d107      	bne.n	80015a6 <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001596:	f7fe ffe1 	bl	800055c <HAL_GetTick>
 800159a:	1b00      	subs	r0, r0, r4
 800159c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80015a0:	d9f4      	bls.n	800158c <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 80015a2:	2003      	movs	r0, #3
 80015a4:	e7ea      	b.n	800157c <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80015a6:	2000      	movs	r0, #0
 80015a8:	e7e8      	b.n	800157c <HAL_PWREx_EnableOverDrive+0x40>
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	420e0040 	.word	0x420e0040
 80015b4:	40007000 	.word	0x40007000
 80015b8:	420e0044 	.word	0x420e0044

080015bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015be:	4b31      	ldr	r3, [pc, #196]	; (8001684 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d059      	beq.n	800167e <HAL_RCC_GetSysClockFreq+0xc2>
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015ce:	482e      	ldr	r0, [pc, #184]	; (8001688 <HAL_RCC_GetSysClockFreq+0xcc>)
 80015d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015d2:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80015e0:	d02a      	beq.n	8001638 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e2:	4b28      	ldr	r3, [pc, #160]	; (8001684 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80015ea:	461e      	mov	r6, r3
 80015ec:	2700      	movs	r7, #0
 80015ee:	015c      	lsls	r4, r3, #5
 80015f0:	2500      	movs	r5, #0
 80015f2:	1ae4      	subs	r4, r4, r3
 80015f4:	eb65 0507 	sbc.w	r5, r5, r7
 80015f8:	01a9      	lsls	r1, r5, #6
 80015fa:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80015fe:	01a0      	lsls	r0, r4, #6
 8001600:	1b00      	subs	r0, r0, r4
 8001602:	eb61 0105 	sbc.w	r1, r1, r5
 8001606:	00cb      	lsls	r3, r1, #3
 8001608:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800160c:	00c4      	lsls	r4, r0, #3
 800160e:	19a0      	adds	r0, r4, r6
 8001610:	eb43 0107 	adc.w	r1, r3, r7
 8001614:	024b      	lsls	r3, r1, #9
 8001616:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800161a:	0244      	lsls	r4, r0, #9
 800161c:	4620      	mov	r0, r4
 800161e:	4619      	mov	r1, r3
 8001620:	2300      	movs	r3, #0
 8001622:	f7fe fded 	bl	8000200 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800162e:	3301      	adds	r3, #1
 8001630:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001632:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_RCC_GetSysClockFreq+0xc8>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001640:	461e      	mov	r6, r3
 8001642:	2700      	movs	r7, #0
 8001644:	015c      	lsls	r4, r3, #5
 8001646:	2500      	movs	r5, #0
 8001648:	1ae4      	subs	r4, r4, r3
 800164a:	eb65 0507 	sbc.w	r5, r5, r7
 800164e:	01a9      	lsls	r1, r5, #6
 8001650:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001654:	01a0      	lsls	r0, r4, #6
 8001656:	1b00      	subs	r0, r0, r4
 8001658:	eb61 0105 	sbc.w	r1, r1, r5
 800165c:	00cb      	lsls	r3, r1, #3
 800165e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001662:	00c4      	lsls	r4, r0, #3
 8001664:	19a0      	adds	r0, r4, r6
 8001666:	eb43 0107 	adc.w	r1, r3, r7
 800166a:	028b      	lsls	r3, r1, #10
 800166c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001670:	0284      	lsls	r4, r0, #10
 8001672:	4620      	mov	r0, r4
 8001674:	4619      	mov	r1, r3
 8001676:	2300      	movs	r3, #0
 8001678:	f7fe fdc2 	bl	8000200 <__aeabi_uldivmod>
 800167c:	e7d3      	b.n	8001626 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800167e:	4803      	ldr	r0, [pc, #12]	; (800168c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	00f42400 	.word	0x00f42400
 800168c:	007a1200 	.word	0x007a1200

08001690 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001690:	2800      	cmp	r0, #0
 8001692:	f000 80f6 	beq.w	8001882 <HAL_RCC_ClockConfig+0x1f2>
{
 8001696:	b570      	push	{r4, r5, r6, lr}
 8001698:	4604      	mov	r4, r0
 800169a:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800169c:	6803      	ldr	r3, [r0, #0]
 800169e:	3b01      	subs	r3, #1
 80016a0:	2b0e      	cmp	r3, #14
 80016a2:	d811      	bhi.n	80016c8 <HAL_RCC_ClockConfig+0x38>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80016a4:	2d0f      	cmp	r5, #15
 80016a6:	d815      	bhi.n	80016d4 <HAL_RCC_ClockConfig+0x44>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016a8:	4b78      	ldr	r3, [pc, #480]	; (800188c <HAL_RCC_ClockConfig+0x1fc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	429d      	cmp	r5, r3
 80016b2:	d915      	bls.n	80016e0 <HAL_RCC_ClockConfig+0x50>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b4:	b2eb      	uxtb	r3, r5
 80016b6:	4a75      	ldr	r2, [pc, #468]	; (800188c <HAL_RCC_ClockConfig+0x1fc>)
 80016b8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	6813      	ldr	r3, [r2, #0]
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	429d      	cmp	r5, r3
 80016c2:	d00d      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x50>
      return HAL_ERROR;
 80016c4:	2001      	movs	r0, #1
 80016c6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80016c8:	f44f 7114 	mov.w	r1, #592	; 0x250
 80016cc:	4870      	ldr	r0, [pc, #448]	; (8001890 <HAL_RCC_ClockConfig+0x200>)
 80016ce:	f003 f80b 	bl	80046e8 <assert_failed>
 80016d2:	e7e7      	b.n	80016a4 <HAL_RCC_ClockConfig+0x14>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80016d4:	f240 2151 	movw	r1, #593	; 0x251
 80016d8:	486d      	ldr	r0, [pc, #436]	; (8001890 <HAL_RCC_ClockConfig+0x200>)
 80016da:	f003 f805 	bl	80046e8 <assert_failed>
 80016de:	e7e3      	b.n	80016a8 <HAL_RCC_ClockConfig+0x18>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e0:	6823      	ldr	r3, [r4, #0]
 80016e2:	f013 0f02 	tst.w	r3, #2
 80016e6:	d02e      	beq.n	8001746 <HAL_RCC_ClockConfig+0xb6>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e8:	f013 0f04 	tst.w	r3, #4
 80016ec:	d004      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x68>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ee:	4a69      	ldr	r2, [pc, #420]	; (8001894 <HAL_RCC_ClockConfig+0x204>)
 80016f0:	6893      	ldr	r3, [r2, #8]
 80016f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016f6:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	f013 0f08 	tst.w	r3, #8
 80016fe:	d004      	beq.n	800170a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001700:	4a64      	ldr	r2, [pc, #400]	; (8001894 <HAL_RCC_ClockConfig+0x204>)
 8001702:	6893      	ldr	r3, [r2, #8]
 8001704:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001708:	6093      	str	r3, [r2, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800170a:	68a3      	ldr	r3, [r4, #8]
 800170c:	b1a3      	cbz	r3, 8001738 <HAL_RCC_ClockConfig+0xa8>
 800170e:	2b80      	cmp	r3, #128	; 0x80
 8001710:	d012      	beq.n	8001738 <HAL_RCC_ClockConfig+0xa8>
 8001712:	2b90      	cmp	r3, #144	; 0x90
 8001714:	d010      	beq.n	8001738 <HAL_RCC_ClockConfig+0xa8>
 8001716:	2ba0      	cmp	r3, #160	; 0xa0
 8001718:	d00e      	beq.n	8001738 <HAL_RCC_ClockConfig+0xa8>
 800171a:	2bb0      	cmp	r3, #176	; 0xb0
 800171c:	d00c      	beq.n	8001738 <HAL_RCC_ClockConfig+0xa8>
 800171e:	2bc0      	cmp	r3, #192	; 0xc0
 8001720:	d00a      	beq.n	8001738 <HAL_RCC_ClockConfig+0xa8>
 8001722:	2bd0      	cmp	r3, #208	; 0xd0
 8001724:	d008      	beq.n	8001738 <HAL_RCC_ClockConfig+0xa8>
 8001726:	2be0      	cmp	r3, #224	; 0xe0
 8001728:	d006      	beq.n	8001738 <HAL_RCC_ClockConfig+0xa8>
 800172a:	2bf0      	cmp	r3, #240	; 0xf0
 800172c:	d004      	beq.n	8001738 <HAL_RCC_ClockConfig+0xa8>
 800172e:	f44f 711d 	mov.w	r1, #628	; 0x274
 8001732:	4857      	ldr	r0, [pc, #348]	; (8001890 <HAL_RCC_ClockConfig+0x200>)
 8001734:	f002 ffd8 	bl	80046e8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4a56      	ldr	r2, [pc, #344]	; (8001894 <HAL_RCC_ClockConfig+0x204>)
 800173a:	6893      	ldr	r3, [r2, #8]
 800173c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001740:	68a1      	ldr	r1, [r4, #8]
 8001742:	430b      	orrs	r3, r1
 8001744:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	f013 0f01 	tst.w	r3, #1
 800174c:	d03c      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x138>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800174e:	6863      	ldr	r3, [r4, #4]
 8001750:	2b03      	cmp	r3, #3
 8001752:	d825      	bhi.n	80017a0 <HAL_RCC_ClockConfig+0x110>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001754:	6863      	ldr	r3, [r4, #4]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d028      	beq.n	80017ac <HAL_RCC_ClockConfig+0x11c>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800175a:	1e9a      	subs	r2, r3, #2
 800175c:	2a01      	cmp	r2, #1
 800175e:	d92c      	bls.n	80017ba <HAL_RCC_ClockConfig+0x12a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001760:	4a4c      	ldr	r2, [pc, #304]	; (8001894 <HAL_RCC_ClockConfig+0x204>)
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	f012 0f02 	tst.w	r2, #2
 8001768:	f000 808d 	beq.w	8001886 <HAL_RCC_ClockConfig+0x1f6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176c:	4949      	ldr	r1, [pc, #292]	; (8001894 <HAL_RCC_ClockConfig+0x204>)
 800176e:	688a      	ldr	r2, [r1, #8]
 8001770:	f022 0203 	bic.w	r2, r2, #3
 8001774:	4313      	orrs	r3, r2
 8001776:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001778:	f7fe fef0 	bl	800055c <HAL_GetTick>
 800177c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177e:	4b45      	ldr	r3, [pc, #276]	; (8001894 <HAL_RCC_ClockConfig+0x204>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	6862      	ldr	r2, [r4, #4]
 8001788:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800178c:	d01c      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x138>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178e:	f7fe fee5 	bl	800055c <HAL_GetTick>
 8001792:	1b80      	subs	r0, r0, r6
 8001794:	f241 3388 	movw	r3, #5000	; 0x1388
 8001798:	4298      	cmp	r0, r3
 800179a:	d9f0      	bls.n	800177e <HAL_RCC_ClockConfig+0xee>
        return HAL_TIMEOUT;
 800179c:	2003      	movs	r0, #3
 800179e:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80017a0:	f240 217b 	movw	r1, #635	; 0x27b
 80017a4:	483a      	ldr	r0, [pc, #232]	; (8001890 <HAL_RCC_ClockConfig+0x200>)
 80017a6:	f002 ff9f 	bl	80046e8 <assert_failed>
 80017aa:	e7d3      	b.n	8001754 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ac:	4a39      	ldr	r2, [pc, #228]	; (8001894 <HAL_RCC_ClockConfig+0x204>)
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80017b4:	d1da      	bne.n	800176c <HAL_RCC_ClockConfig+0xdc>
        return HAL_ERROR;
 80017b6:	2001      	movs	r0, #1
 80017b8:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ba:	4a36      	ldr	r2, [pc, #216]	; (8001894 <HAL_RCC_ClockConfig+0x204>)
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80017c2:	d1d3      	bne.n	800176c <HAL_RCC_ClockConfig+0xdc>
        return HAL_ERROR;
 80017c4:	2001      	movs	r0, #1
 80017c6:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_RCC_ClockConfig+0x1fc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	429d      	cmp	r5, r3
 80017d2:	d209      	bcs.n	80017e8 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d4:	b2ea      	uxtb	r2, r5
 80017d6:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_RCC_ClockConfig+0x1fc>)
 80017d8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	429d      	cmp	r5, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x158>
      return HAL_ERROR;
 80017e4:	2001      	movs	r0, #1
}
 80017e6:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	f013 0f04 	tst.w	r3, #4
 80017ee:	d019      	beq.n	8001824 <HAL_RCC_ClockConfig+0x194>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80017f0:	68e3      	ldr	r3, [r4, #12]
 80017f2:	b183      	cbz	r3, 8001816 <HAL_RCC_ClockConfig+0x186>
 80017f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017f8:	d00d      	beq.n	8001816 <HAL_RCC_ClockConfig+0x186>
 80017fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80017fe:	d00a      	beq.n	8001816 <HAL_RCC_ClockConfig+0x186>
 8001800:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001804:	d007      	beq.n	8001816 <HAL_RCC_ClockConfig+0x186>
 8001806:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800180a:	d004      	beq.n	8001816 <HAL_RCC_ClockConfig+0x186>
 800180c:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001810:	481f      	ldr	r0, [pc, #124]	; (8001890 <HAL_RCC_ClockConfig+0x200>)
 8001812:	f002 ff69 	bl	80046e8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001816:	4a1f      	ldr	r2, [pc, #124]	; (8001894 <HAL_RCC_ClockConfig+0x204>)
 8001818:	6893      	ldr	r3, [r2, #8]
 800181a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800181e:	68e1      	ldr	r1, [r4, #12]
 8001820:	430b      	orrs	r3, r1
 8001822:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	f013 0f08 	tst.w	r3, #8
 800182a:	d01a      	beq.n	8001862 <HAL_RCC_ClockConfig+0x1d2>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800182c:	6923      	ldr	r3, [r4, #16]
 800182e:	b183      	cbz	r3, 8001852 <HAL_RCC_ClockConfig+0x1c2>
 8001830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001834:	d00d      	beq.n	8001852 <HAL_RCC_ClockConfig+0x1c2>
 8001836:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800183a:	d00a      	beq.n	8001852 <HAL_RCC_ClockConfig+0x1c2>
 800183c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001840:	d007      	beq.n	8001852 <HAL_RCC_ClockConfig+0x1c2>
 8001842:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001846:	d004      	beq.n	8001852 <HAL_RCC_ClockConfig+0x1c2>
 8001848:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 800184c:	4810      	ldr	r0, [pc, #64]	; (8001890 <HAL_RCC_ClockConfig+0x200>)
 800184e:	f002 ff4b 	bl	80046e8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_RCC_ClockConfig+0x204>)
 8001854:	6893      	ldr	r3, [r2, #8]
 8001856:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800185a:	6921      	ldr	r1, [r4, #16]
 800185c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001860:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001862:	f7ff feab 	bl	80015bc <HAL_RCC_GetSysClockFreq>
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_RCC_ClockConfig+0x204>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <HAL_RCC_ClockConfig+0x208>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	40d8      	lsrs	r0, r3
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_RCC_ClockConfig+0x20c>)
 8001876:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001878:	200f      	movs	r0, #15
 800187a:	f002 ff65 	bl	8004748 <HAL_InitTick>
  return HAL_OK;
 800187e:	2000      	movs	r0, #0
 8001880:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001882:	2001      	movs	r0, #1
 8001884:	4770      	bx	lr
        return HAL_ERROR;
 8001886:	2001      	movs	r0, #1
 8001888:	bd70      	pop	{r4, r5, r6, pc}
 800188a:	bf00      	nop
 800188c:	40023c00 	.word	0x40023c00
 8001890:	08004c1c 	.word	0x08004c1c
 8001894:	40023800 	.word	0x40023800
 8001898:	08004b54 	.word	0x08004b54
 800189c:	2000000c 	.word	0x2000000c

080018a0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80018a0:	4b01      	ldr	r3, [pc, #4]	; (80018a8 <HAL_RCC_GetHCLKFreq+0x8>)
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	2000000c 	.word	0x2000000c

080018ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018ac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018ae:	f7ff fff7 	bl	80018a0 <HAL_RCC_GetHCLKFreq>
 80018b2:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80018ba:	4a03      	ldr	r2, [pc, #12]	; (80018c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80018bc:	5cd3      	ldrb	r3, [r2, r3]
}
 80018be:	40d8      	lsrs	r0, r3
 80018c0:	bd08      	pop	{r3, pc}
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	08004b64 	.word	0x08004b64

080018cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018cc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018ce:	f7ff ffe7 	bl	80018a0 <HAL_RCC_GetHCLKFreq>
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80018da:	4a03      	ldr	r2, [pc, #12]	; (80018e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80018dc:	5cd3      	ldrb	r3, [r2, r3]
}
 80018de:	40d8      	lsrs	r0, r3
 80018e0:	bd08      	pop	{r3, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	08004b64 	.word	0x08004b64

080018ec <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ec:	230f      	movs	r3, #15
 80018ee:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_RCC_GetClockConfig+0x34>)
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	f002 0203 	and.w	r2, r2, #3
 80018f8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001900:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001908:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	08db      	lsrs	r3, r3, #3
 800190e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001912:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_RCC_GetClockConfig+0x38>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	600b      	str	r3, [r1, #0]
 800191e:	4770      	bx	lr
 8001920:	40023800 	.word	0x40023800
 8001924:	40023c00 	.word	0x40023c00

08001928 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001928:	b530      	push	{r4, r5, lr}
 800192a:	b083      	sub	sp, #12
 800192c:	4604      	mov	r4, r0
  uint32_t pllsaip = 0U;
  uint32_t pllsaiq = 0U;
  uint32_t pllsair = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800192e:	6803      	ldr	r3, [r0, #0]
 8001930:	3b01      	subs	r3, #1
 8001932:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001936:	d84a      	bhi.n	80019ce <HAL_RCCEx_PeriphCLKConfig+0xa6>

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800193e:	d012      	beq.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));
 8001940:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001942:	b13b      	cbz	r3, 8001954 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8001944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001948:	d004      	beq.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 800194a:	f240 3183 	movw	r1, #899	; 0x383
 800194e:	48bd      	ldr	r0, [pc, #756]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8001950:	f002 feca 	bl	80046e8 <assert_failed>

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001954:	4abc      	ldr	r2, [pc, #752]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001956:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800195a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800195e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001960:	430b      	orrs	r3, r1
 8001962:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	f413 7f80 	tst.w	r3, #256	; 0x100
 800196c:	d012      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));
 800196e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001970:	b13b      	cbz	r3, 8001982 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8001972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001976:	d004      	beq.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8001978:	f240 318e 	movw	r1, #910	; 0x38e
 800197c:	48b1      	ldr	r0, [pc, #708]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800197e:	f002 feb3 	bl	80046e8 <assert_failed>

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001982:	4ab1      	ldr	r2, [pc, #708]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001984:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800198c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800198e:	430b      	orrs	r3, r1
 8001990:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001994:	6823      	ldr	r3, [r4, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001996:	f013 0f43 	tst.w	r3, #67	; 0x43
 800199a:	f000 809d 	beq.w	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800199e:	6863      	ldr	r3, [r4, #4]
 80019a0:	3b32      	subs	r3, #50	; 0x32
 80019a2:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 80019a6:	d818      	bhi.n	80019da <HAL_RCCEx_PeriphCLKConfig+0xb2>

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80019a8:	2200      	movs	r2, #0
 80019aa:	4ba8      	ldr	r3, [pc, #672]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80019ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80019ae:	f7fe fdd5 	bl	800055c <HAL_GetTick>
 80019b2:	4605      	mov	r5, r0
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80019b4:	4ba4      	ldr	r3, [pc, #656]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80019bc:	d013      	beq.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80019be:	f7fe fdcd 	bl	800055c <HAL_GetTick>
 80019c2:	1b40      	subs	r0, r0, r5
 80019c4:	2802      	cmp	r0, #2
 80019c6:	d9f5      	bls.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019c8:	2003      	movs	r0, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
}
 80019ca:	b003      	add	sp, #12
 80019cc:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80019ce:	f240 317d 	movw	r1, #893	; 0x37d
 80019d2:	489c      	ldr	r0, [pc, #624]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80019d4:	f002 fe88 	bl	80046e8 <assert_failed>
 80019d8:	e7ae      	b.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x10>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80019da:	f240 319e 	movw	r1, #926	; 0x39e
 80019de:	4899      	ldr	r0, [pc, #612]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80019e0:	f002 fe82 	bl	80046e8 <assert_failed>
 80019e4:	e7e0      	b.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	f013 0f01 	tst.w	r3, #1
 80019ec:	d00b      	beq.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0xde>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80019ee:	68a3      	ldr	r3, [r4, #8]
 80019f0:	3b02      	subs	r3, #2
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d852      	bhi.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x174>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80019f6:	6862      	ldr	r2, [r4, #4]
 80019f8:	68a3      	ldr	r3, [r4, #8]
 80019fa:	071b      	lsls	r3, r3, #28
 80019fc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a00:	4a91      	ldr	r2, [pc, #580]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001a02:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	f013 0f02 	tst.w	r3, #2
 8001a0c:	d01d      	beq.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x122>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8001a0e:	68e3      	ldr	r3, [r4, #12]
 8001a10:	3b02      	subs	r3, #2
 8001a12:	2b0d      	cmp	r3, #13
 8001a14:	d848      	bhi.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8001a16:	6a23      	ldr	r3, [r4, #32]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	2b1f      	cmp	r3, #31
 8001a1c:	d84a      	bhi.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a1e:	4a8a      	ldr	r2, [pc, #552]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001a20:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001a24:	6860      	ldr	r0, [r4, #4]
 8001a26:	68e3      	ldr	r3, [r4, #12]
 8001a28:	061b      	lsls	r3, r3, #24
 8001a2a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001a2e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001a32:	430b      	orrs	r3, r1
 8001a34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001a38:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001a3c:	f023 031f 	bic.w	r3, r3, #31
 8001a40:	6a21      	ldr	r1, [r4, #32]
 8001a42:	3901      	subs	r1, #1
 8001a44:	430b      	orrs	r3, r1
 8001a46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001a50:	d012      	beq.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x150>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8001a52:	68e3      	ldr	r3, [r4, #12]
 8001a54:	3b02      	subs	r3, #2
 8001a56:	2b0d      	cmp	r3, #13
 8001a58:	d832      	bhi.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8001a5a:	68a3      	ldr	r3, [r4, #8]
 8001a5c:	3b02      	subs	r3, #2
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	d834      	bhi.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001a62:	6862      	ldr	r2, [r4, #4]
 8001a64:	68e3      	ldr	r3, [r4, #12]
 8001a66:	061b      	lsls	r3, r3, #24
 8001a68:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a6c:	68a2      	ldr	r2, [r4, #8]
 8001a6e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001a72:	4a75      	ldr	r2, [pc, #468]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001a74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4b74      	ldr	r3, [pc, #464]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8001a7c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001a7e:	f7fe fd6d 	bl	800055c <HAL_GetTick>
 8001a82:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a84:	4b70      	ldr	r3, [pc, #448]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001a8c:	d124      	bne.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001a8e:	f7fe fd65 	bl	800055c <HAL_GetTick>
 8001a92:	1b40      	subs	r0, r0, r5
 8001a94:	2802      	cmp	r0, #2
 8001a96:	d9f5      	bls.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        return HAL_TIMEOUT;
 8001a98:	2003      	movs	r0, #3
 8001a9a:	e796      	b.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8001a9c:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 8001aa0:	4868      	ldr	r0, [pc, #416]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8001aa2:	f002 fe21 	bl	80046e8 <assert_failed>
 8001aa6:	e7a6      	b.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0xce>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8001aa8:	f240 31c1 	movw	r1, #961	; 0x3c1
 8001aac:	4865      	ldr	r0, [pc, #404]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8001aae:	f002 fe1b 	bl	80046e8 <assert_failed>
 8001ab2:	e7b0      	b.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0xee>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8001ab4:	f240 31c2 	movw	r1, #962	; 0x3c2
 8001ab8:	4862      	ldr	r0, [pc, #392]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8001aba:	f002 fe15 	bl	80046e8 <assert_failed>
 8001abe:	e7ae      	b.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0xf6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8001ac0:	f240 31d3 	movw	r1, #979	; 0x3d3
 8001ac4:	485f      	ldr	r0, [pc, #380]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8001ac6:	f002 fe0f 	bl	80046e8 <assert_failed>
 8001aca:	e7c6      	b.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x132>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8001acc:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 8001ad0:	485c      	ldr	r0, [pc, #368]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8001ad2:	f002 fe09 	bl	80046e8 <assert_failed>
 8001ad6:	e7c4      	b.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	f013 0f0c 	tst.w	r3, #12
 8001ade:	f040 80bb 	bne.w	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x330>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8001ae2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ae6:	d004      	beq.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8001ae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8001aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001aee:	f000 80b3 	beq.w	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x330>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001af2:	6823      	ldr	r3, [r4, #0]
 8001af4:	f013 0f20 	tst.w	r3, #32
 8001af8:	f000 819f 	beq.w	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x512>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8001afc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b02:	d07e      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b08:	d07b      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b0a:	4a51      	ldr	r2, [pc, #324]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d078      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b10:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d074      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b18:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d070      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b20:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d06c      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b28:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d068      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b30:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d064      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b38:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d060      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b40:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d05c      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b48:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d058      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b50:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d054      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b58:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d050      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b60:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d04c      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b68:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d048      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b70:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d044      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b78:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d040      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b80:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d03c      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b88:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d038      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b90:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d034      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001b98:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d030      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001ba0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d02c      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001ba8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d028      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001bb0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d024      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001bb8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d020      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001bc0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d01c      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001bc8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d018      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001bd0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d014      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001bd8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d010      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001be0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d00c      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001be8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d008      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001bf0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d004      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001bf8:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8001bfc:	4811      	ldr	r0, [pc, #68]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8001bfe:	f002 fd73 	bl	80046e8 <assert_failed>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8001c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001c1a:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8001c1c:	6813      	ldr	r3, [r2, #0]
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c22:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001c24:	f7fe fc9a 	bl	800055c <HAL_GetTick>
 8001c28:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c32:	f040 80d8 	bne.w	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c36:	f7fe fc91 	bl	800055c <HAL_GetTick>
 8001c3a:	1b40      	subs	r0, r0, r5
 8001c3c:	2802      	cmp	r0, #2
 8001c3e:	d9f4      	bls.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x302>
        return HAL_TIMEOUT;
 8001c40:	2003      	movs	r0, #3
 8001c42:	e6c2      	b.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001c44:	08004c54 	.word	0x08004c54
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	42470068 	.word	0x42470068
 8001c50:	00020300 	.word	0x00020300
 8001c54:	40007000 	.word	0x40007000
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8001c58:	6923      	ldr	r3, [r4, #16]
 8001c5a:	3b32      	subs	r3, #50	; 0x32
 8001c5c:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8001c60:	d811      	bhi.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    __HAL_RCC_PLLSAI_DISABLE();
 8001c62:	2200      	movs	r2, #0
 8001c64:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8001c66:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001c68:	f7fe fc78 	bl	800055c <HAL_GetTick>
 8001c6c:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c6e:	4b88      	ldr	r3, [pc, #544]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001c76:	d00c      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001c78:	f7fe fc70 	bl	800055c <HAL_GetTick>
 8001c7c:	1b40      	subs	r0, r0, r5
 8001c7e:	2802      	cmp	r0, #2
 8001c80:	d9f5      	bls.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x346>
        return HAL_TIMEOUT;
 8001c82:	2003      	movs	r0, #3
 8001c84:	e6a1      	b.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8001c86:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8001c8a:	4882      	ldr	r0, [pc, #520]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8001c8c:	f002 fd2c 	bl	80046e8 <assert_failed>
 8001c90:	e7e7      	b.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x33a>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	f013 0f04 	tst.w	r3, #4
 8001c98:	d023      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8001c9a:	69a3      	ldr	r3, [r4, #24]
 8001c9c:	3b02      	subs	r3, #2
 8001c9e:	2b0d      	cmp	r3, #13
 8001ca0:	d86c      	bhi.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x454>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8001ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	2b1f      	cmp	r3, #31
 8001ca8:	d86e      	bhi.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x460>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001caa:	4a79      	ldr	r2, [pc, #484]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001cac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001cb0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8001cb4:	6920      	ldr	r0, [r4, #16]
 8001cb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cba:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001cbe:	69a0      	ldr	r0, [r4, #24]
 8001cc0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001cc4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001cce:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001cd2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001cd6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001cd8:	3901      	subs	r1, #1
 8001cda:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001cde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	f013 0f08 	tst.w	r3, #8
 8001ce8:	d02d      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x41e>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8001cea:	69e3      	ldr	r3, [r4, #28]
 8001cec:	3b02      	subs	r3, #2
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d850      	bhi.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8001cf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cf4:	b16b      	cbz	r3, 8001d12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8001cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfa:	d00a      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8001cfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d00:	d007      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8001d02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001d06:	d004      	beq.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8001d08:	f240 411c 	movw	r1, #1052	; 0x41c
 8001d0c:	4861      	ldr	r0, [pc, #388]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8001d0e:	f002 fceb 	bl	80046e8 <assert_failed>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001d12:	4a5f      	ldr	r2, [pc, #380]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001d14:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d18:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8001d1c:	6920      	ldr	r0, [r4, #16]
 8001d1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d22:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001d26:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	69e1      	ldr	r1, [r4, #28]
 8001d2e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001d32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001d36:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001d3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001d3e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001d40:	430b      	orrs	r3, r1
 8001d42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d4c:	d003      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001d4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8001d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d54:	d024      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x478>
    __HAL_RCC_PLLSAI_ENABLE();
 8001d56:	2201      	movs	r2, #1
 8001d58:	4b4c      	ldr	r3, [pc, #304]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8001d5a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001d5c:	f7fe fbfe 	bl	800055c <HAL_GetTick>
 8001d60:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d62:	4b4b      	ldr	r3, [pc, #300]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001d6a:	f47f aec2 	bne.w	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001d6e:	f7fe fbf5 	bl	800055c <HAL_GetTick>
 8001d72:	1b40      	subs	r0, r0, r5
 8001d74:	2802      	cmp	r0, #2
 8001d76:	d9f4      	bls.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
        return HAL_TIMEOUT;
 8001d78:	2003      	movs	r0, #3
 8001d7a:	e626      	b.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8001d7c:	f240 4109 	movw	r1, #1033	; 0x409
 8001d80:	4844      	ldr	r0, [pc, #272]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8001d82:	f002 fcb1 	bl	80046e8 <assert_failed>
 8001d86:	e78c      	b.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8001d88:	f240 410a 	movw	r1, #1034	; 0x40a
 8001d8c:	4841      	ldr	r0, [pc, #260]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8001d8e:	f002 fcab 	bl	80046e8 <assert_failed>
 8001d92:	e78a      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x382>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8001d94:	f240 411b 	movw	r1, #1051	; 0x41b
 8001d98:	483e      	ldr	r0, [pc, #248]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8001d9a:	f002 fca5 	bl	80046e8 <assert_failed>
 8001d9e:	e7a8      	b.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8001da0:	6963      	ldr	r3, [r4, #20]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d00a      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d008      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d006      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d004      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001db2:	f240 412f 	movw	r1, #1071	; 0x42f
 8001db6:	4837      	ldr	r0, [pc, #220]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8001db8:	f002 fc96 	bl	80046e8 <assert_failed>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001dbc:	4a34      	ldr	r2, [pc, #208]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001dbe:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001dc2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8001dc6:	6925      	ldr	r5, [r4, #16]
 8001dc8:	6963      	ldr	r3, [r4, #20]
 8001dca:	085b      	lsrs	r3, r3, #1
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	041b      	lsls	r3, r3, #16
 8001dd0:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001dd4:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001dd8:	4303      	orrs	r3, r0
 8001dda:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001dde:	430b      	orrs	r3, r1
 8001de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001de4:	e7b7      	b.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001de6:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dea:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001dee:	d012      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8001df0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001df2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00d      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dfa:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001dfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dfe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e02:	4925      	ldr	r1, [pc, #148]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8001e04:	2001      	movs	r0, #1
 8001e06:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e08:	2000      	movs	r0, #0
 8001e0a:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8001e0c:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e10:	f013 0f01 	tst.w	r3, #1
 8001e14:	d11b      	bne.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x526>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e18:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001e1c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001e20:	d026      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8001e22:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001e24:	6893      	ldr	r3, [r2, #8]
 8001e26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e2a:	6093      	str	r3, [r2, #8]
 8001e2c:	4918      	ldr	r1, [pc, #96]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001e2e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001e30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e32:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001e36:	4313      	orrs	r3, r2
 8001e38:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e3a:	6823      	ldr	r3, [r4, #0]
 8001e3c:	f013 0f10 	tst.w	r3, #16
 8001e40:	d021      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e42:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8001e48:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	e5bd      	b.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 8001e4e:	f7fe fb85 	bl	800055c <HAL_GetTick>
 8001e52:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	f013 0f02 	tst.w	r3, #2
 8001e5c:	d1db      	bne.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7fe fb7d 	bl	800055c <HAL_GetTick>
 8001e62:	1b40      	subs	r0, r0, r5
 8001e64:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e68:	4298      	cmp	r0, r3
 8001e6a:	d9f3      	bls.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
            return HAL_TIMEOUT;
 8001e6c:	2003      	movs	r0, #3
 8001e6e:	e5ac      	b.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e70:	4907      	ldr	r1, [pc, #28]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001e72:	688a      	ldr	r2, [r1, #8]
 8001e74:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001e78:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e80:	4313      	orrs	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]
 8001e84:	e7d2      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x504>
  return HAL_OK;
 8001e86:	2000      	movs	r0, #0
 8001e88:	e59f      	b.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001e8a:	bf00      	nop
 8001e8c:	42470070 	.word	0x42470070
 8001e90:	40023800 	.word	0x40023800
 8001e94:	08004c54 	.word	0x08004c54
 8001e98:	42470e40 	.word	0x42470e40
 8001e9c:	424711e0 	.word	0x424711e0

08001ea0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001ea6:	6803      	ldr	r3, [r0, #0]
 8001ea8:	2b0f      	cmp	r3, #15
 8001eaa:	d83e      	bhi.n	8001f2a <HAL_RCC_OscConfig+0x8a>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	f013 0f01 	tst.w	r3, #1
 8001eb2:	d04e      	beq.n	8001f52 <HAL_RCC_OscConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001eb4:	6863      	ldr	r3, [r4, #4]
 8001eb6:	b153      	cbz	r3, 8001ece <HAL_RCC_OscConfig+0x2e>
 8001eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebc:	d007      	beq.n	8001ece <HAL_RCC_OscConfig+0x2e>
 8001ebe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec2:	d004      	beq.n	8001ece <HAL_RCC_OscConfig+0x2e>
 8001ec4:	f640 5115 	movw	r1, #3349	; 0xd15
 8001ec8:	48a3      	ldr	r0, [pc, #652]	; (8002158 <HAL_RCC_OscConfig+0x2b8>)
 8001eca:	f002 fc0d 	bl	80046e8 <assert_failed>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ece:	4ba3      	ldr	r3, [pc, #652]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d032      	beq.n	8001f40 <HAL_RCC_OscConfig+0xa0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eda:	4ba0      	ldr	r3, [pc, #640]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d027      	beq.n	8001f36 <HAL_RCC_OscConfig+0x96>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee6:	6863      	ldr	r3, [r4, #4]
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eec:	d060      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x110>
 8001eee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef2:	d063      	beq.n	8001fbc <HAL_RCC_OscConfig+0x11c>
 8001ef4:	4b99      	ldr	r3, [pc, #612]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f04:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f06:	6863      	ldr	r3, [r4, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d061      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x130>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7fe fb26 	bl	800055c <HAL_GetTick>
 8001f10:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b92      	ldr	r3, [pc, #584]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f1a:	d11a      	bne.n	8001f52 <HAL_RCC_OscConfig+0xb2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7fe fb1e 	bl	800055c <HAL_GetTick>
 8001f20:	1b40      	subs	r0, r0, r5
 8001f22:	2864      	cmp	r0, #100	; 0x64
 8001f24:	d9f5      	bls.n	8001f12 <HAL_RCC_OscConfig+0x72>
          {
            return HAL_TIMEOUT;
 8001f26:	2003      	movs	r0, #3
 8001f28:	e203      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001f2a:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8001f2e:	488a      	ldr	r0, [pc, #552]	; (8002158 <HAL_RCC_OscConfig+0x2b8>)
 8001f30:	f002 fbda 	bl	80046e8 <assert_failed>
 8001f34:	e7ba      	b.n	8001eac <HAL_RCC_OscConfig+0xc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f36:	4b89      	ldr	r3, [pc, #548]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f3e:	d0d2      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x46>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4b86      	ldr	r3, [pc, #536]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f48:	d003      	beq.n	8001f52 <HAL_RCC_OscConfig+0xb2>
 8001f4a:	6863      	ldr	r3, [r4, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 81ed 	beq.w	800232c <HAL_RCC_OscConfig+0x48c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	f013 0f02 	tst.w	r3, #2
 8001f58:	d066      	beq.n	8002028 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001f5a:	68e3      	ldr	r3, [r4, #12]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d904      	bls.n	8001f6a <HAL_RCC_OscConfig+0xca>
 8001f60:	f640 514d 	movw	r1, #3405	; 0xd4d
 8001f64:	487c      	ldr	r0, [pc, #496]	; (8002158 <HAL_RCC_OscConfig+0x2b8>)
 8001f66:	f002 fbbf 	bl	80046e8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001f6a:	6923      	ldr	r3, [r4, #16]
 8001f6c:	2b1f      	cmp	r3, #31
 8001f6e:	d83e      	bhi.n	8001fee <HAL_RCC_OscConfig+0x14e>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f70:	4b7a      	ldr	r3, [pc, #488]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f013 0f0c 	tst.w	r3, #12
 8001f78:	d044      	beq.n	8002004 <HAL_RCC_OscConfig+0x164>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7a:	4b78      	ldr	r3, [pc, #480]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d039      	beq.n	8001ffa <HAL_RCC_OscConfig+0x15a>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f86:	68e3      	ldr	r3, [r4, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d076      	beq.n	800207a <HAL_RCC_OscConfig+0x1da>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4b74      	ldr	r3, [pc, #464]	; (8002160 <HAL_RCC_OscConfig+0x2c0>)
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f92:	f7fe fae3 	bl	800055c <HAL_GetTick>
 8001f96:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f98:	4b70      	ldr	r3, [pc, #448]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f013 0f02 	tst.w	r3, #2
 8001fa0:	d162      	bne.n	8002068 <HAL_RCC_OscConfig+0x1c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa2:	f7fe fadb 	bl	800055c <HAL_GetTick>
 8001fa6:	1b40      	subs	r0, r0, r5
 8001fa8:	2802      	cmp	r0, #2
 8001faa:	d9f5      	bls.n	8001f98 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001fac:	2003      	movs	r0, #3
 8001fae:	e1c0      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb0:	4a6a      	ldr	r2, [pc, #424]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8001fb2:	6813      	ldr	r3, [r2, #0]
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	e7a4      	b.n	8001f06 <HAL_RCC_OscConfig+0x66>
 8001fbc:	4b67      	ldr	r3, [pc, #412]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	e79a      	b.n	8001f06 <HAL_RCC_OscConfig+0x66>
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fac4 	bl	800055c <HAL_GetTick>
 8001fd4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	4b61      	ldr	r3, [pc, #388]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001fde:	d0b8      	beq.n	8001f52 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7fe fabc 	bl	800055c <HAL_GetTick>
 8001fe4:	1b40      	subs	r0, r0, r5
 8001fe6:	2864      	cmp	r0, #100	; 0x64
 8001fe8:	d9f5      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x136>
            return HAL_TIMEOUT;
 8001fea:	2003      	movs	r0, #3
 8001fec:	e1a1      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001fee:	f640 514e 	movw	r1, #3406	; 0xd4e
 8001ff2:	4859      	ldr	r0, [pc, #356]	; (8002158 <HAL_RCC_OscConfig+0x2b8>)
 8001ff4:	f002 fb78 	bl	80046e8 <assert_failed>
 8001ff8:	e7ba      	b.n	8001f70 <HAL_RCC_OscConfig+0xd0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffa:	4b58      	ldr	r3, [pc, #352]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002002:	d1c0      	bne.n	8001f86 <HAL_RCC_OscConfig+0xe6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002004:	4b55      	ldr	r3, [pc, #340]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f013 0f02 	tst.w	r3, #2
 800200c:	d004      	beq.n	8002018 <HAL_RCC_OscConfig+0x178>
 800200e:	68e3      	ldr	r3, [r4, #12]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d001      	beq.n	8002018 <HAL_RCC_OscConfig+0x178>
        return HAL_ERROR;
 8002014:	2001      	movs	r0, #1
 8002016:	e18c      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	4a50      	ldr	r2, [pc, #320]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 800201a:	6813      	ldr	r3, [r2, #0]
 800201c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002020:	6921      	ldr	r1, [r4, #16]
 8002022:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002026:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	f013 0f08 	tst.w	r3, #8
 800202e:	d048      	beq.n	80020c2 <HAL_RCC_OscConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002030:	6963      	ldr	r3, [r4, #20]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d904      	bls.n	8002040 <HAL_RCC_OscConfig+0x1a0>
 8002036:	f640 5194 	movw	r1, #3476	; 0xd94
 800203a:	4847      	ldr	r0, [pc, #284]	; (8002158 <HAL_RCC_OscConfig+0x2b8>)
 800203c:	f002 fb54 	bl	80046e8 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002040:	6963      	ldr	r3, [r4, #20]
 8002042:	b363      	cbz	r3, 800209e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002044:	2201      	movs	r2, #1
 8002046:	4b47      	ldr	r3, [pc, #284]	; (8002164 <HAL_RCC_OscConfig+0x2c4>)
 8002048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204a:	f7fe fa87 	bl	800055c <HAL_GetTick>
 800204e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002050:	4b42      	ldr	r3, [pc, #264]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8002052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002054:	f013 0f02 	tst.w	r3, #2
 8002058:	d133      	bne.n	80020c2 <HAL_RCC_OscConfig+0x222>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800205a:	f7fe fa7f 	bl	800055c <HAL_GetTick>
 800205e:	1b40      	subs	r0, r0, r5
 8002060:	2802      	cmp	r0, #2
 8002062:	d9f5      	bls.n	8002050 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8002064:	2003      	movs	r0, #3
 8002066:	e164      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002068:	4a3c      	ldr	r2, [pc, #240]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 800206a:	6813      	ldr	r3, [r2, #0]
 800206c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002070:	6921      	ldr	r1, [r4, #16]
 8002072:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	e7d6      	b.n	8002028 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_DISABLE();
 800207a:	2200      	movs	r2, #0
 800207c:	4b38      	ldr	r3, [pc, #224]	; (8002160 <HAL_RCC_OscConfig+0x2c0>)
 800207e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002080:	f7fe fa6c 	bl	800055c <HAL_GetTick>
 8002084:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002086:	4b35      	ldr	r3, [pc, #212]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f013 0f02 	tst.w	r3, #2
 800208e:	d0cb      	beq.n	8002028 <HAL_RCC_OscConfig+0x188>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002090:	f7fe fa64 	bl	800055c <HAL_GetTick>
 8002094:	1b40      	subs	r0, r0, r5
 8002096:	2802      	cmp	r0, #2
 8002098:	d9f5      	bls.n	8002086 <HAL_RCC_OscConfig+0x1e6>
            return HAL_TIMEOUT;
 800209a:	2003      	movs	r0, #3
 800209c:	e149      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209e:	2200      	movs	r2, #0
 80020a0:	4b30      	ldr	r3, [pc, #192]	; (8002164 <HAL_RCC_OscConfig+0x2c4>)
 80020a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a4:	f7fe fa5a 	bl	800055c <HAL_GetTick>
 80020a8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020aa:	4b2c      	ldr	r3, [pc, #176]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 80020ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ae:	f013 0f02 	tst.w	r3, #2
 80020b2:	d006      	beq.n	80020c2 <HAL_RCC_OscConfig+0x222>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b4:	f7fe fa52 	bl	800055c <HAL_GetTick>
 80020b8:	1b40      	subs	r0, r0, r5
 80020ba:	2802      	cmp	r0, #2
 80020bc:	d9f5      	bls.n	80020aa <HAL_RCC_OscConfig+0x20a>
        {
          return HAL_TIMEOUT;
 80020be:	2003      	movs	r0, #3
 80020c0:	e137      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c2:	6823      	ldr	r3, [r4, #0]
 80020c4:	f013 0f04 	tst.w	r3, #4
 80020c8:	f000 8086 	beq.w	80021d8 <HAL_RCC_OscConfig+0x338>
  {
    FlagStatus       pwrclkchanged = RESET;

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80020cc:	68a3      	ldr	r3, [r4, #8]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d906      	bls.n	80020e0 <HAL_RCC_OscConfig+0x240>
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d004      	beq.n	80020e0 <HAL_RCC_OscConfig+0x240>
 80020d6:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 80020da:	481f      	ldr	r0, [pc, #124]	; (8002158 <HAL_RCC_OscConfig+0x2b8>)
 80020dc:	f002 fb04 	bl	80046e8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e0:	4b1e      	ldr	r3, [pc, #120]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80020e8:	d133      	bne.n	8002152 <HAL_RCC_OscConfig+0x2b2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	4b1b      	ldr	r3, [pc, #108]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 80020f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020f6:	641a      	str	r2, [r3, #64]	; 0x40
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002102:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_RCC_OscConfig+0x2c8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f413 7f80 	tst.w	r3, #256	; 0x100
 800210c:	d02e      	beq.n	800216c <HAL_RCC_OscConfig+0x2cc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210e:	68a3      	ldr	r3, [r4, #8]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d03f      	beq.n	8002194 <HAL_RCC_OscConfig+0x2f4>
 8002114:	2b05      	cmp	r3, #5
 8002116:	d043      	beq.n	80021a0 <HAL_RCC_OscConfig+0x300>
 8002118:	4b10      	ldr	r3, [pc, #64]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 800211a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	671a      	str	r2, [r3, #112]	; 0x70
 8002122:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002124:	f022 0204 	bic.w	r2, r2, #4
 8002128:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800212a:	68a3      	ldr	r3, [r4, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d041      	beq.n	80021b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002130:	f7fe fa14 	bl	800055c <HAL_GetTick>
 8002134:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_RCC_OscConfig+0x2bc>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	f013 0f02 	tst.w	r3, #2
 800213e:	d14a      	bne.n	80021d6 <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002140:	f7fe fa0c 	bl	800055c <HAL_GetTick>
 8002144:	1b80      	subs	r0, r0, r6
 8002146:	f241 3388 	movw	r3, #5000	; 0x1388
 800214a:	4298      	cmp	r0, r3
 800214c:	d9f3      	bls.n	8002136 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 800214e:	2003      	movs	r0, #3
 8002150:	e0ef      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
    FlagStatus       pwrclkchanged = RESET;
 8002152:	2500      	movs	r5, #0
 8002154:	e7d6      	b.n	8002104 <HAL_RCC_OscConfig+0x264>
 8002156:	bf00      	nop
 8002158:	08004c54 	.word	0x08004c54
 800215c:	40023800 	.word	0x40023800
 8002160:	42470000 	.word	0x42470000
 8002164:	42470e80 	.word	0x42470e80
 8002168:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216c:	4a73      	ldr	r2, [pc, #460]	; (800233c <HAL_RCC_OscConfig+0x49c>)
 800216e:	6813      	ldr	r3, [r2, #0]
 8002170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002174:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002176:	f7fe f9f1 	bl	800055c <HAL_GetTick>
 800217a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217c:	4b6f      	ldr	r3, [pc, #444]	; (800233c <HAL_RCC_OscConfig+0x49c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002184:	d1c3      	bne.n	800210e <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002186:	f7fe f9e9 	bl	800055c <HAL_GetTick>
 800218a:	1b80      	subs	r0, r0, r6
 800218c:	2802      	cmp	r0, #2
 800218e:	d9f5      	bls.n	800217c <HAL_RCC_OscConfig+0x2dc>
          return HAL_TIMEOUT;
 8002190:	2003      	movs	r0, #3
 8002192:	e0ce      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002194:	4a6a      	ldr	r2, [pc, #424]	; (8002340 <HAL_RCC_OscConfig+0x4a0>)
 8002196:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6713      	str	r3, [r2, #112]	; 0x70
 800219e:	e7c4      	b.n	800212a <HAL_RCC_OscConfig+0x28a>
 80021a0:	4b67      	ldr	r3, [pc, #412]	; (8002340 <HAL_RCC_OscConfig+0x4a0>)
 80021a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021a4:	f042 0204 	orr.w	r2, r2, #4
 80021a8:	671a      	str	r2, [r3, #112]	; 0x70
 80021aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021ac:	f042 0201 	orr.w	r2, r2, #1
 80021b0:	671a      	str	r2, [r3, #112]	; 0x70
 80021b2:	e7ba      	b.n	800212a <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7fe f9d2 	bl	800055c <HAL_GetTick>
 80021b8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ba:	4b61      	ldr	r3, [pc, #388]	; (8002340 <HAL_RCC_OscConfig+0x4a0>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	f013 0f02 	tst.w	r3, #2
 80021c2:	d008      	beq.n	80021d6 <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c4:	f7fe f9ca 	bl	800055c <HAL_GetTick>
 80021c8:	1b80      	subs	r0, r0, r6
 80021ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80021ce:	4298      	cmp	r0, r3
 80021d0:	d9f3      	bls.n	80021ba <HAL_RCC_OscConfig+0x31a>
        {
          return HAL_TIMEOUT;
 80021d2:	2003      	movs	r0, #3
 80021d4:	e0ad      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d6:	bb15      	cbnz	r5, 800221e <HAL_RCC_OscConfig+0x37e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80021d8:	69a3      	ldr	r3, [r4, #24]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d825      	bhi.n	800222a <HAL_RCC_OscConfig+0x38a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021de:	69a3      	ldr	r3, [r4, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80a5 	beq.w	8002330 <HAL_RCC_OscConfig+0x490>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021e6:	4a56      	ldr	r2, [pc, #344]	; (8002340 <HAL_RCC_OscConfig+0x4a0>)
 80021e8:	6892      	ldr	r2, [r2, #8]
 80021ea:	f002 020c 	and.w	r2, r2, #12
 80021ee:	2a08      	cmp	r2, #8
 80021f0:	f000 80a1 	beq.w	8002336 <HAL_RCC_OscConfig+0x496>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d01e      	beq.n	8002236 <HAL_RCC_OscConfig+0x396>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f8:	2200      	movs	r2, #0
 80021fa:	4b52      	ldr	r3, [pc, #328]	; (8002344 <HAL_RCC_OscConfig+0x4a4>)
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7fe f9ad 	bl	800055c <HAL_GetTick>
 8002202:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002204:	4b4e      	ldr	r3, [pc, #312]	; (8002340 <HAL_RCC_OscConfig+0x4a0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800220c:	f000 808c 	beq.w	8002328 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002210:	f7fe f9a4 	bl	800055c <HAL_GetTick>
 8002214:	1b00      	subs	r0, r0, r4
 8002216:	2802      	cmp	r0, #2
 8002218:	d9f4      	bls.n	8002204 <HAL_RCC_OscConfig+0x364>
          {
            return HAL_TIMEOUT;
 800221a:	2003      	movs	r0, #3
 800221c:	e089      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
      __HAL_RCC_PWR_CLK_DISABLE();
 800221e:	4a48      	ldr	r2, [pc, #288]	; (8002340 <HAL_RCC_OscConfig+0x4a0>)
 8002220:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002226:	6413      	str	r3, [r2, #64]	; 0x40
 8002228:	e7d6      	b.n	80021d8 <HAL_RCC_OscConfig+0x338>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800222a:	f640 6103 	movw	r1, #3587	; 0xe03
 800222e:	4846      	ldr	r0, [pc, #280]	; (8002348 <HAL_RCC_OscConfig+0x4a8>)
 8002230:	f002 fa5a 	bl	80046e8 <assert_failed>
 8002234:	e7d3      	b.n	80021de <HAL_RCC_OscConfig+0x33e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002236:	69e3      	ldr	r3, [r4, #28]
 8002238:	b13b      	cbz	r3, 800224a <HAL_RCC_OscConfig+0x3aa>
 800223a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800223e:	d004      	beq.n	800224a <HAL_RCC_OscConfig+0x3aa>
 8002240:	f640 610c 	movw	r1, #3596	; 0xe0c
 8002244:	4840      	ldr	r0, [pc, #256]	; (8002348 <HAL_RCC_OscConfig+0x4a8>)
 8002246:	f002 fa4f 	bl	80046e8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800224a:	6a23      	ldr	r3, [r4, #32]
 800224c:	2b3f      	cmp	r3, #63	; 0x3f
 800224e:	d82c      	bhi.n	80022aa <HAL_RCC_OscConfig+0x40a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002252:	3b32      	subs	r3, #50	; 0x32
 8002254:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8002258:	d82d      	bhi.n	80022b6 <HAL_RCC_OscConfig+0x416>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800225a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800225c:	2b02      	cmp	r3, #2
 800225e:	d00a      	beq.n	8002276 <HAL_RCC_OscConfig+0x3d6>
 8002260:	2b04      	cmp	r3, #4
 8002262:	d008      	beq.n	8002276 <HAL_RCC_OscConfig+0x3d6>
 8002264:	2b06      	cmp	r3, #6
 8002266:	d006      	beq.n	8002276 <HAL_RCC_OscConfig+0x3d6>
 8002268:	2b08      	cmp	r3, #8
 800226a:	d004      	beq.n	8002276 <HAL_RCC_OscConfig+0x3d6>
 800226c:	f640 610f 	movw	r1, #3599	; 0xe0f
 8002270:	4835      	ldr	r0, [pc, #212]	; (8002348 <HAL_RCC_OscConfig+0x4a8>)
 8002272:	f002 fa39 	bl	80046e8 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002276:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002278:	3b02      	subs	r3, #2
 800227a:	2b0d      	cmp	r3, #13
 800227c:	d821      	bhi.n	80022c2 <HAL_RCC_OscConfig+0x422>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800227e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002280:	3b02      	subs	r3, #2
 8002282:	2b05      	cmp	r3, #5
 8002284:	d823      	bhi.n	80022ce <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_PLL_DISABLE();
 8002286:	2200      	movs	r2, #0
 8002288:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <HAL_RCC_OscConfig+0x4a4>)
 800228a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800228c:	f7fe f966 	bl	800055c <HAL_GetTick>
 8002290:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_RCC_OscConfig+0x4a0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800229a:	d01e      	beq.n	80022da <HAL_RCC_OscConfig+0x43a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229c:	f7fe f95e 	bl	800055c <HAL_GetTick>
 80022a0:	1b40      	subs	r0, r0, r5
 80022a2:	2802      	cmp	r0, #2
 80022a4:	d9f5      	bls.n	8002292 <HAL_RCC_OscConfig+0x3f2>
            return HAL_TIMEOUT;
 80022a6:	2003      	movs	r0, #3
 80022a8:	e043      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80022aa:	f640 610d 	movw	r1, #3597	; 0xe0d
 80022ae:	4826      	ldr	r0, [pc, #152]	; (8002348 <HAL_RCC_OscConfig+0x4a8>)
 80022b0:	f002 fa1a 	bl	80046e8 <assert_failed>
 80022b4:	e7cc      	b.n	8002250 <HAL_RCC_OscConfig+0x3b0>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80022b6:	f640 610e 	movw	r1, #3598	; 0xe0e
 80022ba:	4823      	ldr	r0, [pc, #140]	; (8002348 <HAL_RCC_OscConfig+0x4a8>)
 80022bc:	f002 fa14 	bl	80046e8 <assert_failed>
 80022c0:	e7cb      	b.n	800225a <HAL_RCC_OscConfig+0x3ba>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80022c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80022c6:	4820      	ldr	r0, [pc, #128]	; (8002348 <HAL_RCC_OscConfig+0x4a8>)
 80022c8:	f002 fa0e 	bl	80046e8 <assert_failed>
 80022cc:	e7d7      	b.n	800227e <HAL_RCC_OscConfig+0x3de>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80022ce:	f640 6111 	movw	r1, #3601	; 0xe11
 80022d2:	481d      	ldr	r0, [pc, #116]	; (8002348 <HAL_RCC_OscConfig+0x4a8>)
 80022d4:	f002 fa08 	bl	80046e8 <assert_failed>
 80022d8:	e7d5      	b.n	8002286 <HAL_RCC_OscConfig+0x3e6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022da:	69e3      	ldr	r3, [r4, #28]
 80022dc:	6a22      	ldr	r2, [r4, #32]
 80022de:	4313      	orrs	r3, r2
 80022e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022e2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80022e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80022e8:	0852      	lsrs	r2, r2, #1
 80022ea:	3a01      	subs	r2, #1
 80022ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80022f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80022f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80022f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80022f8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80022fc:	4a10      	ldr	r2, [pc, #64]	; (8002340 <HAL_RCC_OscConfig+0x4a0>)
 80022fe:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002300:	2201      	movs	r2, #1
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <HAL_RCC_OscConfig+0x4a4>)
 8002304:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002306:	f7fe f929 	bl	800055c <HAL_GetTick>
 800230a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <HAL_RCC_OscConfig+0x4a0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002314:	d106      	bne.n	8002324 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002316:	f7fe f921 	bl	800055c <HAL_GetTick>
 800231a:	1b00      	subs	r0, r0, r4
 800231c:	2802      	cmp	r0, #2
 800231e:	d9f5      	bls.n	800230c <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 8002320:	2003      	movs	r0, #3
 8002322:	e006      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002324:	2000      	movs	r0, #0
 8002326:	e004      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
 8002328:	2000      	movs	r0, #0
 800232a:	e002      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
        return HAL_ERROR;
 800232c:	2001      	movs	r0, #1
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
  return HAL_OK;
 8002330:	2000      	movs	r0, #0
}
 8002332:	b002      	add	sp, #8
 8002334:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002336:	2001      	movs	r0, #1
 8002338:	e7fb      	b.n	8002332 <HAL_RCC_OscConfig+0x492>
 800233a:	bf00      	nop
 800233c:	40007000 	.word	0x40007000
 8002340:	40023800 	.word	0x40023800
 8002344:	42470060 	.word	0x42470060
 8002348:	08004c54 	.word	0x08004c54

0800234c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800234c:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800234e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002350:	6a04      	ldr	r4, [r0, #32]
 8002352:	f024 0401 	bic.w	r4, r4, #1
 8002356:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002358:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800235a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800235e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002362:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002366:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002368:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800236a:	6203      	str	r3, [r0, #32]
}
 800236c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002370:	4770      	bx	lr

08002372 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002372:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002374:	6a03      	ldr	r3, [r0, #32]
 8002376:	f023 0310 	bic.w	r3, r3, #16
 800237a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800237c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800237e:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002380:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002384:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002388:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800238c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002390:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002392:	6203      	str	r3, [r0, #32]
}
 8002394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002398:	4770      	bx	lr

0800239a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800239a:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800239c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80023a0:	f041 0107 	orr.w	r1, r1, #7
 80023a4:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80023a6:	6083      	str	r3, [r0, #8]
 80023a8:	4770      	bx	lr

080023aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023aa:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80023ac:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023ae:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80023b2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80023b6:	4319      	orrs	r1, r3
 80023b8:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023ba:	6084      	str	r4, [r0, #8]
} 
 80023bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_TIM_Base_Start_IT>:
{
 80023c4:	b510      	push	{r4, lr}
 80023c6:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80023c8:	6803      	ldr	r3, [r0, #0]
 80023ca:	4a23      	ldr	r2, [pc, #140]	; (8002458 <HAL_TIM_Base_Start_IT+0x94>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d037      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x7c>
 80023d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d4:	d034      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x7c>
 80023d6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80023da:	4293      	cmp	r3, r2
 80023dc:	d030      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x7c>
 80023de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d02c      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x7c>
 80023e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d028      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x7c>
 80023ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d024      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x7c>
 80023f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d020      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x7c>
 80023fe:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8002402:	4293      	cmp	r3, r2
 8002404:	d01c      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x7c>
 8002406:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800240a:	4293      	cmp	r3, r2
 800240c:	d018      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x7c>
 800240e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002412:	4293      	cmp	r3, r2
 8002414:	d014      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x7c>
 8002416:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800241a:	4293      	cmp	r3, r2
 800241c:	d010      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x7c>
 800241e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002422:	4293      	cmp	r3, r2
 8002424:	d00c      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x7c>
 8002426:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800242a:	4293      	cmp	r3, r2
 800242c:	d008      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x7c>
 800242e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002432:	4293      	cmp	r3, r2
 8002434:	d004      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0x7c>
 8002436:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800243a:	4808      	ldr	r0, [pc, #32]	; (800245c <HAL_TIM_Base_Start_IT+0x98>)
 800243c:	f002 f954 	bl	80046e8 <assert_failed>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002440:	6822      	ldr	r2, [r4, #0]
 8002442:	68d3      	ldr	r3, [r2, #12]
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 800244a:	6822      	ldr	r2, [r4, #0]
 800244c:	6813      	ldr	r3, [r2, #0]
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	2000      	movs	r0, #0
 8002456:	bd10      	pop	{r4, pc}
 8002458:	40010000 	.word	0x40010000
 800245c:	08004c90 	.word	0x08004c90

08002460 <HAL_TIM_ConfigClockSource>:
{
 8002460:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002462:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002466:	2b01      	cmp	r3, #1
 8002468:	f000 82cd 	beq.w	8002a06 <HAL_TIM_ConfigClockSource+0x5a6>
 800246c:	460d      	mov	r5, r1
 800246e:	4604      	mov	r4, r0
 8002470:	2301      	movs	r3, #1
 8002472:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002476:	2302      	movs	r3, #2
 8002478:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800247c:	680b      	ldr	r3, [r1, #0]
 800247e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002482:	d016      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x52>
 8002484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002488:	d013      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x52>
 800248a:	b193      	cbz	r3, 80024b2 <HAL_TIM_ConfigClockSource+0x52>
 800248c:	2b10      	cmp	r3, #16
 800248e:	d010      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x52>
 8002490:	2b20      	cmp	r3, #32
 8002492:	d00e      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x52>
 8002494:	2b30      	cmp	r3, #48	; 0x30
 8002496:	d00c      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x52>
 8002498:	2b40      	cmp	r3, #64	; 0x40
 800249a:	d00a      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x52>
 800249c:	2b50      	cmp	r3, #80	; 0x50
 800249e:	d008      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x52>
 80024a0:	2b60      	cmp	r3, #96	; 0x60
 80024a2:	d006      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x52>
 80024a4:	2b70      	cmp	r3, #112	; 0x70
 80024a6:	d004      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x52>
 80024a8:	f640 7177 	movw	r1, #3959	; 0xf77
 80024ac:	48a8      	ldr	r0, [pc, #672]	; (8002750 <HAL_TIM_ConfigClockSource+0x2f0>)
 80024ae:	f002 f91b 	bl	80046e8 <assert_failed>
  tmpsmcr = htim->Instance->SMCR;
 80024b2:	6822      	ldr	r2, [r4, #0]
 80024b4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80024be:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80024c0:	682b      	ldr	r3, [r5, #0]
 80024c2:	2b40      	cmp	r3, #64	; 0x40
 80024c4:	f000 81f8 	beq.w	80028b8 <HAL_TIM_ConfigClockSource+0x458>
 80024c8:	d94a      	bls.n	8002560 <HAL_TIM_ConfigClockSource+0x100>
 80024ca:	2b70      	cmp	r3, #112	; 0x70
 80024cc:	f000 8144 	beq.w	8002758 <HAL_TIM_ConfigClockSource+0x2f8>
 80024d0:	f200 80a5 	bhi.w	800261e <HAL_TIM_ConfigClockSource+0x1be>
 80024d4:	2b50      	cmp	r3, #80	; 0x50
 80024d6:	f000 8194 	beq.w	8002802 <HAL_TIM_ConfigClockSource+0x3a2>
 80024da:	2b60      	cmp	r3, #96	; 0x60
 80024dc:	f040 8131 	bne.w	8002742 <HAL_TIM_ConfigClockSource+0x2e2>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80024e0:	6823      	ldr	r3, [r4, #0]
 80024e2:	4a9c      	ldr	r2, [pc, #624]	; (8002754 <HAL_TIM_ConfigClockSource+0x2f4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d01f      	beq.n	8002528 <HAL_TIM_ConfigClockSource+0xc8>
 80024e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ec:	d01c      	beq.n	8002528 <HAL_TIM_ConfigClockSource+0xc8>
 80024ee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d018      	beq.n	8002528 <HAL_TIM_ConfigClockSource+0xc8>
 80024f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d014      	beq.n	8002528 <HAL_TIM_ConfigClockSource+0xc8>
 80024fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002502:	4293      	cmp	r3, r2
 8002504:	d010      	beq.n	8002528 <HAL_TIM_ConfigClockSource+0xc8>
 8002506:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800250a:	4293      	cmp	r3, r2
 800250c:	d00c      	beq.n	8002528 <HAL_TIM_ConfigClockSource+0xc8>
 800250e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002512:	4293      	cmp	r3, r2
 8002514:	d008      	beq.n	8002528 <HAL_TIM_ConfigClockSource+0xc8>
 8002516:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800251a:	4293      	cmp	r3, r2
 800251c:	d004      	beq.n	8002528 <HAL_TIM_ConfigClockSource+0xc8>
 800251e:	f640 71c4 	movw	r1, #4036	; 0xfc4
 8002522:	488b      	ldr	r0, [pc, #556]	; (8002750 <HAL_TIM_ConfigClockSource+0x2f0>)
 8002524:	f002 f8e0 	bl	80046e8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002528:	686b      	ldr	r3, [r5, #4]
 800252a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800252e:	d009      	beq.n	8002544 <HAL_TIM_ConfigClockSource+0xe4>
 8002530:	b143      	cbz	r3, 8002544 <HAL_TIM_ConfigClockSource+0xe4>
 8002532:	2b02      	cmp	r3, #2
 8002534:	d006      	beq.n	8002544 <HAL_TIM_ConfigClockSource+0xe4>
 8002536:	2b0a      	cmp	r3, #10
 8002538:	d004      	beq.n	8002544 <HAL_TIM_ConfigClockSource+0xe4>
 800253a:	f640 71c7 	movw	r1, #4039	; 0xfc7
 800253e:	4884      	ldr	r0, [pc, #528]	; (8002750 <HAL_TIM_ConfigClockSource+0x2f0>)
 8002540:	f002 f8d2 	bl	80046e8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002544:	68eb      	ldr	r3, [r5, #12]
 8002546:	2b0f      	cmp	r3, #15
 8002548:	f200 81b0 	bhi.w	80028ac <HAL_TIM_ConfigClockSource+0x44c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800254c:	68ea      	ldr	r2, [r5, #12]
 800254e:	6869      	ldr	r1, [r5, #4]
 8002550:	6820      	ldr	r0, [r4, #0]
 8002552:	f7ff ff0e 	bl	8002372 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002556:	2160      	movs	r1, #96	; 0x60
 8002558:	6820      	ldr	r0, [r4, #0]
 800255a:	f7ff ff1e 	bl	800239a <TIM_ITRx_SetConfig>
    break;
 800255e:	e0f0      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x2e2>
  switch (sClockSourceConfig->ClockSource)
 8002560:	2b10      	cmp	r3, #16
 8002562:	f000 81fe 	beq.w	8002962 <HAL_TIM_ConfigClockSource+0x502>
 8002566:	d92e      	bls.n	80025c6 <HAL_TIM_ConfigClockSource+0x166>
 8002568:	2b20      	cmp	r3, #32
 800256a:	f000 8223 	beq.w	80029b4 <HAL_TIM_ConfigClockSource+0x554>
 800256e:	2b30      	cmp	r3, #48	; 0x30
 8002570:	f040 80e7 	bne.w	8002742 <HAL_TIM_ConfigClockSource+0x2e2>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	4a77      	ldr	r2, [pc, #476]	; (8002754 <HAL_TIM_ConfigClockSource+0x2f4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d01f      	beq.n	80025bc <HAL_TIM_ConfigClockSource+0x15c>
 800257c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002580:	d01c      	beq.n	80025bc <HAL_TIM_ConfigClockSource+0x15c>
 8002582:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002586:	4293      	cmp	r3, r2
 8002588:	d018      	beq.n	80025bc <HAL_TIM_ConfigClockSource+0x15c>
 800258a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800258e:	4293      	cmp	r3, r2
 8002590:	d014      	beq.n	80025bc <HAL_TIM_ConfigClockSource+0x15c>
 8002592:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002596:	4293      	cmp	r3, r2
 8002598:	d010      	beq.n	80025bc <HAL_TIM_ConfigClockSource+0x15c>
 800259a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00c      	beq.n	80025bc <HAL_TIM_ConfigClockSource+0x15c>
 80025a2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d008      	beq.n	80025bc <HAL_TIM_ConfigClockSource+0x15c>
 80025aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d004      	beq.n	80025bc <HAL_TIM_ConfigClockSource+0x15c>
 80025b2:	f640 71f2 	movw	r1, #4082	; 0xff2
 80025b6:	4866      	ldr	r0, [pc, #408]	; (8002750 <HAL_TIM_ConfigClockSource+0x2f0>)
 80025b8:	f002 f896 	bl	80046e8 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80025bc:	2130      	movs	r1, #48	; 0x30
 80025be:	6820      	ldr	r0, [r4, #0]
 80025c0:	f7ff feeb 	bl	800239a <TIM_ITRx_SetConfig>
    break;
 80025c4:	e0bd      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x2e2>
  switch (sClockSourceConfig->ClockSource)
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f040 80bb 	bne.w	8002742 <HAL_TIM_ConfigClockSource+0x2e2>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	4a61      	ldr	r2, [pc, #388]	; (8002754 <HAL_TIM_ConfigClockSource+0x2f4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d01f      	beq.n	8002614 <HAL_TIM_ConfigClockSource+0x1b4>
 80025d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d8:	d01c      	beq.n	8002614 <HAL_TIM_ConfigClockSource+0x1b4>
 80025da:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80025de:	4293      	cmp	r3, r2
 80025e0:	d018      	beq.n	8002614 <HAL_TIM_ConfigClockSource+0x1b4>
 80025e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d014      	beq.n	8002614 <HAL_TIM_ConfigClockSource+0x1b4>
 80025ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d010      	beq.n	8002614 <HAL_TIM_ConfigClockSource+0x1b4>
 80025f2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00c      	beq.n	8002614 <HAL_TIM_ConfigClockSource+0x1b4>
 80025fa:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80025fe:	4293      	cmp	r3, r2
 8002600:	d008      	beq.n	8002614 <HAL_TIM_ConfigClockSource+0x1b4>
 8002602:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002606:	4293      	cmp	r3, r2
 8002608:	d004      	beq.n	8002614 <HAL_TIM_ConfigClockSource+0x1b4>
 800260a:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 800260e:	4850      	ldr	r0, [pc, #320]	; (8002750 <HAL_TIM_ConfigClockSource+0x2f0>)
 8002610:	f002 f86a 	bl	80046e8 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002614:	2100      	movs	r1, #0
 8002616:	6820      	ldr	r0, [r4, #0]
 8002618:	f7ff febf 	bl	800239a <TIM_ITRx_SetConfig>
    break;
 800261c:	e091      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x2e2>
  switch (sClockSourceConfig->ClockSource)
 800261e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002622:	d04d      	beq.n	80026c0 <HAL_TIM_ConfigClockSource+0x260>
 8002624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002628:	f040 808b 	bne.w	8002742 <HAL_TIM_ConfigClockSource+0x2e2>
      assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	4a49      	ldr	r2, [pc, #292]	; (8002754 <HAL_TIM_ConfigClockSource+0x2f4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d017      	beq.n	8002664 <HAL_TIM_ConfigClockSource+0x204>
 8002634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002638:	d014      	beq.n	8002664 <HAL_TIM_ConfigClockSource+0x204>
 800263a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800263e:	4293      	cmp	r3, r2
 8002640:	d010      	beq.n	8002664 <HAL_TIM_ConfigClockSource+0x204>
 8002642:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002646:	4293      	cmp	r3, r2
 8002648:	d00c      	beq.n	8002664 <HAL_TIM_ConfigClockSource+0x204>
 800264a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800264e:	4293      	cmp	r3, r2
 8002650:	d008      	beq.n	8002664 <HAL_TIM_ConfigClockSource+0x204>
 8002652:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002656:	4293      	cmp	r3, r2
 8002658:	d004      	beq.n	8002664 <HAL_TIM_ConfigClockSource+0x204>
 800265a:	f640 71a4 	movw	r1, #4004	; 0xfa4
 800265e:	483c      	ldr	r0, [pc, #240]	; (8002750 <HAL_TIM_ConfigClockSource+0x2f0>)
 8002660:	f002 f842 	bl	80046e8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002664:	686b      	ldr	r3, [r5, #4]
 8002666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800266a:	d009      	beq.n	8002680 <HAL_TIM_ConfigClockSource+0x220>
 800266c:	b143      	cbz	r3, 8002680 <HAL_TIM_ConfigClockSource+0x220>
 800266e:	2b02      	cmp	r3, #2
 8002670:	d006      	beq.n	8002680 <HAL_TIM_ConfigClockSource+0x220>
 8002672:	2b0a      	cmp	r3, #10
 8002674:	d004      	beq.n	8002680 <HAL_TIM_ConfigClockSource+0x220>
 8002676:	f640 71a6 	movw	r1, #4006	; 0xfa6
 800267a:	4835      	ldr	r0, [pc, #212]	; (8002750 <HAL_TIM_ConfigClockSource+0x2f0>)
 800267c:	f002 f834 	bl	80046e8 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002680:	68ab      	ldr	r3, [r5, #8]
 8002682:	b16b      	cbz	r3, 80026a0 <HAL_TIM_ConfigClockSource+0x240>
 8002684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002688:	d00a      	beq.n	80026a0 <HAL_TIM_ConfigClockSource+0x240>
 800268a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800268e:	d007      	beq.n	80026a0 <HAL_TIM_ConfigClockSource+0x240>
 8002690:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002694:	d004      	beq.n	80026a0 <HAL_TIM_ConfigClockSource+0x240>
 8002696:	f640 71a7 	movw	r1, #4007	; 0xfa7
 800269a:	482d      	ldr	r0, [pc, #180]	; (8002750 <HAL_TIM_ConfigClockSource+0x2f0>)
 800269c:	f002 f824 	bl	80046e8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80026a0:	68eb      	ldr	r3, [r5, #12]
 80026a2:	2b0f      	cmp	r3, #15
 80026a4:	f200 80a7 	bhi.w	80027f6 <HAL_TIM_ConfigClockSource+0x396>
      TIM_ETR_SetConfig(htim->Instance, 
 80026a8:	68eb      	ldr	r3, [r5, #12]
 80026aa:	686a      	ldr	r2, [r5, #4]
 80026ac:	68a9      	ldr	r1, [r5, #8]
 80026ae:	6820      	ldr	r0, [r4, #0]
 80026b0:	f7ff fe7b 	bl	80023aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026b4:	6822      	ldr	r2, [r4, #0]
 80026b6:	6893      	ldr	r3, [r2, #8]
 80026b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026bc:	6093      	str	r3, [r2, #8]
    break;
 80026be:	e040      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x2e2>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	4a24      	ldr	r2, [pc, #144]	; (8002754 <HAL_TIM_ConfigClockSource+0x2f4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d037      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x2d8>
 80026c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026cc:	d034      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x2d8>
 80026ce:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d030      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x2d8>
 80026d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026da:	4293      	cmp	r3, r2
 80026dc:	d02c      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x2d8>
 80026de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d028      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x2d8>
 80026e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d024      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x2d8>
 80026ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d020      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x2d8>
 80026f6:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d01c      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x2d8>
 80026fe:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002702:	4293      	cmp	r3, r2
 8002704:	d018      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x2d8>
 8002706:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800270a:	4293      	cmp	r3, r2
 800270c:	d014      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x2d8>
 800270e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002712:	4293      	cmp	r3, r2
 8002714:	d010      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x2d8>
 8002716:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800271a:	4293      	cmp	r3, r2
 800271c:	d00c      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x2d8>
 800271e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002722:	4293      	cmp	r3, r2
 8002724:	d008      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x2d8>
 8002726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800272a:	4293      	cmp	r3, r2
 800272c:	d004      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x2d8>
 800272e:	f640 7183 	movw	r1, #3971	; 0xf83
 8002732:	4807      	ldr	r0, [pc, #28]	; (8002750 <HAL_TIM_ConfigClockSource+0x2f0>)
 8002734:	f001 ffd8 	bl	80046e8 <assert_failed>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002738:	6822      	ldr	r2, [r4, #0]
 800273a:	6893      	ldr	r3, [r2, #8]
 800273c:	f023 0307 	bic.w	r3, r3, #7
 8002740:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002742:	2301      	movs	r3, #1
 8002744:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002748:	2000      	movs	r0, #0
 800274a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 800274e:	bd38      	pop	{r3, r4, r5, pc}
 8002750:	08004c90 	.word	0x08004c90
 8002754:	40010000 	.word	0x40010000
      assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	4aac      	ldr	r2, [pc, #688]	; (8002a0c <HAL_TIM_ConfigClockSource+0x5ac>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d017      	beq.n	8002790 <HAL_TIM_ConfigClockSource+0x330>
 8002760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002764:	d014      	beq.n	8002790 <HAL_TIM_ConfigClockSource+0x330>
 8002766:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800276a:	4293      	cmp	r3, r2
 800276c:	d010      	beq.n	8002790 <HAL_TIM_ConfigClockSource+0x330>
 800276e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002772:	4293      	cmp	r3, r2
 8002774:	d00c      	beq.n	8002790 <HAL_TIM_ConfigClockSource+0x330>
 8002776:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800277a:	4293      	cmp	r3, r2
 800277c:	d008      	beq.n	8002790 <HAL_TIM_ConfigClockSource+0x330>
 800277e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002782:	4293      	cmp	r3, r2
 8002784:	d004      	beq.n	8002790 <HAL_TIM_ConfigClockSource+0x330>
 8002786:	f640 718c 	movw	r1, #3980	; 0xf8c
 800278a:	48a1      	ldr	r0, [pc, #644]	; (8002a10 <HAL_TIM_ConfigClockSource+0x5b0>)
 800278c:	f001 ffac 	bl	80046e8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002790:	686b      	ldr	r3, [r5, #4]
 8002792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002796:	d009      	beq.n	80027ac <HAL_TIM_ConfigClockSource+0x34c>
 8002798:	b143      	cbz	r3, 80027ac <HAL_TIM_ConfigClockSource+0x34c>
 800279a:	2b02      	cmp	r3, #2
 800279c:	d006      	beq.n	80027ac <HAL_TIM_ConfigClockSource+0x34c>
 800279e:	2b0a      	cmp	r3, #10
 80027a0:	d004      	beq.n	80027ac <HAL_TIM_ConfigClockSource+0x34c>
 80027a2:	f640 718e 	movw	r1, #3982	; 0xf8e
 80027a6:	489a      	ldr	r0, [pc, #616]	; (8002a10 <HAL_TIM_ConfigClockSource+0x5b0>)
 80027a8:	f001 ff9e 	bl	80046e8 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80027ac:	68ab      	ldr	r3, [r5, #8]
 80027ae:	b16b      	cbz	r3, 80027cc <HAL_TIM_ConfigClockSource+0x36c>
 80027b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b4:	d00a      	beq.n	80027cc <HAL_TIM_ConfigClockSource+0x36c>
 80027b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ba:	d007      	beq.n	80027cc <HAL_TIM_ConfigClockSource+0x36c>
 80027bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027c0:	d004      	beq.n	80027cc <HAL_TIM_ConfigClockSource+0x36c>
 80027c2:	f640 718f 	movw	r1, #3983	; 0xf8f
 80027c6:	4892      	ldr	r0, [pc, #584]	; (8002a10 <HAL_TIM_ConfigClockSource+0x5b0>)
 80027c8:	f001 ff8e 	bl	80046e8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80027cc:	68eb      	ldr	r3, [r5, #12]
 80027ce:	2b0f      	cmp	r3, #15
 80027d0:	d80b      	bhi.n	80027ea <HAL_TIM_ConfigClockSource+0x38a>
      TIM_ETR_SetConfig(htim->Instance, 
 80027d2:	68eb      	ldr	r3, [r5, #12]
 80027d4:	686a      	ldr	r2, [r5, #4]
 80027d6:	68a9      	ldr	r1, [r5, #8]
 80027d8:	6820      	ldr	r0, [r4, #0]
 80027da:	f7ff fde6 	bl	80023aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027de:	6822      	ldr	r2, [r4, #0]
 80027e0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80027e6:	6093      	str	r3, [r2, #8]
    break;
 80027e8:	e7ab      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x2e2>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80027ea:	f44f 6179 	mov.w	r1, #3984	; 0xf90
 80027ee:	4888      	ldr	r0, [pc, #544]	; (8002a10 <HAL_TIM_ConfigClockSource+0x5b0>)
 80027f0:	f001 ff7a 	bl	80046e8 <assert_failed>
 80027f4:	e7ed      	b.n	80027d2 <HAL_TIM_ConfigClockSource+0x372>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80027f6:	f640 71a8 	movw	r1, #4008	; 0xfa8
 80027fa:	4885      	ldr	r0, [pc, #532]	; (8002a10 <HAL_TIM_ConfigClockSource+0x5b0>)
 80027fc:	f001 ff74 	bl	80046e8 <assert_failed>
 8002800:	e752      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x248>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8002802:	6823      	ldr	r3, [r4, #0]
 8002804:	4a81      	ldr	r2, [pc, #516]	; (8002a0c <HAL_TIM_ConfigClockSource+0x5ac>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d02f      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x40a>
 800280a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280e:	d02c      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x40a>
 8002810:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002814:	4293      	cmp	r3, r2
 8002816:	d028      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x40a>
 8002818:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800281c:	4293      	cmp	r3, r2
 800281e:	d024      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x40a>
 8002820:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002824:	4293      	cmp	r3, r2
 8002826:	d020      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x40a>
 8002828:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800282c:	4293      	cmp	r3, r2
 800282e:	d01c      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x40a>
 8002830:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002834:	4293      	cmp	r3, r2
 8002836:	d018      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x40a>
 8002838:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800283c:	4293      	cmp	r3, r2
 800283e:	d014      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x40a>
 8002840:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002844:	4293      	cmp	r3, r2
 8002846:	d010      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x40a>
 8002848:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800284c:	4293      	cmp	r3, r2
 800284e:	d00c      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x40a>
 8002850:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002854:	4293      	cmp	r3, r2
 8002856:	d008      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x40a>
 8002858:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x40a>
 8002860:	f640 71b6 	movw	r1, #4022	; 0xfb6
 8002864:	486a      	ldr	r0, [pc, #424]	; (8002a10 <HAL_TIM_ConfigClockSource+0x5b0>)
 8002866:	f001 ff3f 	bl	80046e8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800286a:	686b      	ldr	r3, [r5, #4]
 800286c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002870:	d009      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x426>
 8002872:	b143      	cbz	r3, 8002886 <HAL_TIM_ConfigClockSource+0x426>
 8002874:	2b02      	cmp	r3, #2
 8002876:	d006      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x426>
 8002878:	2b0a      	cmp	r3, #10
 800287a:	d004      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x426>
 800287c:	f640 71b9 	movw	r1, #4025	; 0xfb9
 8002880:	4863      	ldr	r0, [pc, #396]	; (8002a10 <HAL_TIM_ConfigClockSource+0x5b0>)
 8002882:	f001 ff31 	bl	80046e8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002886:	68eb      	ldr	r3, [r5, #12]
 8002888:	2b0f      	cmp	r3, #15
 800288a:	d809      	bhi.n	80028a0 <HAL_TIM_ConfigClockSource+0x440>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800288c:	68ea      	ldr	r2, [r5, #12]
 800288e:	6869      	ldr	r1, [r5, #4]
 8002890:	6820      	ldr	r0, [r4, #0]
 8002892:	f7ff fd5b 	bl	800234c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002896:	2150      	movs	r1, #80	; 0x50
 8002898:	6820      	ldr	r0, [r4, #0]
 800289a:	f7ff fd7e 	bl	800239a <TIM_ITRx_SetConfig>
    break;
 800289e:	e750      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x2e2>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80028a0:	f640 71ba 	movw	r1, #4026	; 0xfba
 80028a4:	485a      	ldr	r0, [pc, #360]	; (8002a10 <HAL_TIM_ConfigClockSource+0x5b0>)
 80028a6:	f001 ff1f 	bl	80046e8 <assert_failed>
 80028aa:	e7ef      	b.n	800288c <HAL_TIM_ConfigClockSource+0x42c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80028ac:	f640 71c8 	movw	r1, #4040	; 0xfc8
 80028b0:	4857      	ldr	r0, [pc, #348]	; (8002a10 <HAL_TIM_ConfigClockSource+0x5b0>)
 80028b2:	f001 ff19 	bl	80046e8 <assert_failed>
 80028b6:	e649      	b.n	800254c <HAL_TIM_ConfigClockSource+0xec>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	4a54      	ldr	r2, [pc, #336]	; (8002a0c <HAL_TIM_ConfigClockSource+0x5ac>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d02f      	beq.n	8002920 <HAL_TIM_ConfigClockSource+0x4c0>
 80028c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c4:	d02c      	beq.n	8002920 <HAL_TIM_ConfigClockSource+0x4c0>
 80028c6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d028      	beq.n	8002920 <HAL_TIM_ConfigClockSource+0x4c0>
 80028ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d024      	beq.n	8002920 <HAL_TIM_ConfigClockSource+0x4c0>
 80028d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028da:	4293      	cmp	r3, r2
 80028dc:	d020      	beq.n	8002920 <HAL_TIM_ConfigClockSource+0x4c0>
 80028de:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d01c      	beq.n	8002920 <HAL_TIM_ConfigClockSource+0x4c0>
 80028e6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d018      	beq.n	8002920 <HAL_TIM_ConfigClockSource+0x4c0>
 80028ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d014      	beq.n	8002920 <HAL_TIM_ConfigClockSource+0x4c0>
 80028f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d010      	beq.n	8002920 <HAL_TIM_ConfigClockSource+0x4c0>
 80028fe:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002902:	4293      	cmp	r3, r2
 8002904:	d00c      	beq.n	8002920 <HAL_TIM_ConfigClockSource+0x4c0>
 8002906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800290a:	4293      	cmp	r3, r2
 800290c:	d008      	beq.n	8002920 <HAL_TIM_ConfigClockSource+0x4c0>
 800290e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002912:	4293      	cmp	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_TIM_ConfigClockSource+0x4c0>
 8002916:	f640 71d2 	movw	r1, #4050	; 0xfd2
 800291a:	483d      	ldr	r0, [pc, #244]	; (8002a10 <HAL_TIM_ConfigClockSource+0x5b0>)
 800291c:	f001 fee4 	bl	80046e8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002920:	686b      	ldr	r3, [r5, #4]
 8002922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002926:	d009      	beq.n	800293c <HAL_TIM_ConfigClockSource+0x4dc>
 8002928:	b143      	cbz	r3, 800293c <HAL_TIM_ConfigClockSource+0x4dc>
 800292a:	2b02      	cmp	r3, #2
 800292c:	d006      	beq.n	800293c <HAL_TIM_ConfigClockSource+0x4dc>
 800292e:	2b0a      	cmp	r3, #10
 8002930:	d004      	beq.n	800293c <HAL_TIM_ConfigClockSource+0x4dc>
 8002932:	f640 71d5 	movw	r1, #4053	; 0xfd5
 8002936:	4836      	ldr	r0, [pc, #216]	; (8002a10 <HAL_TIM_ConfigClockSource+0x5b0>)
 8002938:	f001 fed6 	bl	80046e8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800293c:	68eb      	ldr	r3, [r5, #12]
 800293e:	2b0f      	cmp	r3, #15
 8002940:	d809      	bhi.n	8002956 <HAL_TIM_ConfigClockSource+0x4f6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002942:	68ea      	ldr	r2, [r5, #12]
 8002944:	6869      	ldr	r1, [r5, #4]
 8002946:	6820      	ldr	r0, [r4, #0]
 8002948:	f7ff fd00 	bl	800234c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800294c:	2140      	movs	r1, #64	; 0x40
 800294e:	6820      	ldr	r0, [r4, #0]
 8002950:	f7ff fd23 	bl	800239a <TIM_ITRx_SetConfig>
    break;
 8002954:	e6f5      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x2e2>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002956:	f640 71d6 	movw	r1, #4054	; 0xfd6
 800295a:	482d      	ldr	r0, [pc, #180]	; (8002a10 <HAL_TIM_ConfigClockSource+0x5b0>)
 800295c:	f001 fec4 	bl	80046e8 <assert_failed>
 8002960:	e7ef      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x4e2>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	4a29      	ldr	r2, [pc, #164]	; (8002a0c <HAL_TIM_ConfigClockSource+0x5ac>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01f      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0x54a>
 800296a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296e:	d01c      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0x54a>
 8002970:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002974:	4293      	cmp	r3, r2
 8002976:	d018      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0x54a>
 8002978:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800297c:	4293      	cmp	r3, r2
 800297e:	d014      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0x54a>
 8002980:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002984:	4293      	cmp	r3, r2
 8002986:	d010      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0x54a>
 8002988:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800298c:	4293      	cmp	r3, r2
 800298e:	d00c      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0x54a>
 8002990:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002994:	4293      	cmp	r3, r2
 8002996:	d008      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0x54a>
 8002998:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800299c:	4293      	cmp	r3, r2
 800299e:	d004      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0x54a>
 80029a0:	f640 71e6 	movw	r1, #4070	; 0xfe6
 80029a4:	481a      	ldr	r0, [pc, #104]	; (8002a10 <HAL_TIM_ConfigClockSource+0x5b0>)
 80029a6:	f001 fe9f 	bl	80046e8 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80029aa:	2110      	movs	r1, #16
 80029ac:	6820      	ldr	r0, [r4, #0]
 80029ae:	f7ff fcf4 	bl	800239a <TIM_ITRx_SetConfig>
    break;
 80029b2:	e6c6      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x2e2>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <HAL_TIM_ConfigClockSource+0x5ac>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d01f      	beq.n	80029fc <HAL_TIM_ConfigClockSource+0x59c>
 80029bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c0:	d01c      	beq.n	80029fc <HAL_TIM_ConfigClockSource+0x59c>
 80029c2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d018      	beq.n	80029fc <HAL_TIM_ConfigClockSource+0x59c>
 80029ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d014      	beq.n	80029fc <HAL_TIM_ConfigClockSource+0x59c>
 80029d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d010      	beq.n	80029fc <HAL_TIM_ConfigClockSource+0x59c>
 80029da:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00c      	beq.n	80029fc <HAL_TIM_ConfigClockSource+0x59c>
 80029e2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d008      	beq.n	80029fc <HAL_TIM_ConfigClockSource+0x59c>
 80029ea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d004      	beq.n	80029fc <HAL_TIM_ConfigClockSource+0x59c>
 80029f2:	f640 71ec 	movw	r1, #4076	; 0xfec
 80029f6:	4806      	ldr	r0, [pc, #24]	; (8002a10 <HAL_TIM_ConfigClockSource+0x5b0>)
 80029f8:	f001 fe76 	bl	80046e8 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80029fc:	2120      	movs	r1, #32
 80029fe:	6820      	ldr	r0, [r4, #0]
 8002a00:	f7ff fccb 	bl	800239a <TIM_ITRx_SetConfig>
    break;
 8002a04:	e69d      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x2e2>
  __HAL_LOCK(htim);
 8002a06:	2002      	movs	r0, #2
}
 8002a08:	bd38      	pop	{r3, r4, r5, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	08004c90 	.word	0x08004c90

08002a14 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002a14:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002a16:	4a45      	ldr	r2, [pc, #276]	; (8002b2c <TIM_Base_SetConfig+0x118>)
 8002a18:	4290      	cmp	r0, r2
 8002a1a:	d04a      	beq.n	8002ab2 <TIM_Base_SetConfig+0x9e>
 8002a1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a20:	d049      	beq.n	8002ab6 <TIM_Base_SetConfig+0xa2>
 8002a22:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002a26:	4290      	cmp	r0, r2
 8002a28:	d047      	beq.n	8002aba <TIM_Base_SetConfig+0xa6>
 8002a2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a2e:	4290      	cmp	r0, r2
 8002a30:	d045      	beq.n	8002abe <TIM_Base_SetConfig+0xaa>
 8002a32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a36:	4290      	cmp	r0, r2
 8002a38:	d043      	beq.n	8002ac2 <TIM_Base_SetConfig+0xae>
 8002a3a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002a3e:	4290      	cmp	r0, r2
 8002a40:	d035      	beq.n	8002aae <TIM_Base_SetConfig+0x9a>
 8002a42:	2200      	movs	r2, #0
 8002a44:	b11a      	cbz	r2, 8002a4e <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a4a:	684a      	ldr	r2, [r1, #4]
 8002a4c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002a4e:	4a37      	ldr	r2, [pc, #220]	; (8002b2c <TIM_Base_SetConfig+0x118>)
 8002a50:	4290      	cmp	r0, r2
 8002a52:	d03a      	beq.n	8002aca <TIM_Base_SetConfig+0xb6>
 8002a54:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a58:	d050      	beq.n	8002afc <TIM_Base_SetConfig+0xe8>
 8002a5a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002a5e:	4290      	cmp	r0, r2
 8002a60:	d04e      	beq.n	8002b00 <TIM_Base_SetConfig+0xec>
 8002a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a66:	4290      	cmp	r0, r2
 8002a68:	d04c      	beq.n	8002b04 <TIM_Base_SetConfig+0xf0>
 8002a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a6e:	4290      	cmp	r0, r2
 8002a70:	d04a      	beq.n	8002b08 <TIM_Base_SetConfig+0xf4>
 8002a72:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002a76:	4290      	cmp	r0, r2
 8002a78:	d048      	beq.n	8002b0c <TIM_Base_SetConfig+0xf8>
 8002a7a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002a7e:	4290      	cmp	r0, r2
 8002a80:	d046      	beq.n	8002b10 <TIM_Base_SetConfig+0xfc>
 8002a82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a86:	4290      	cmp	r0, r2
 8002a88:	d044      	beq.n	8002b14 <TIM_Base_SetConfig+0x100>
 8002a8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a8e:	4290      	cmp	r0, r2
 8002a90:	d042      	beq.n	8002b18 <TIM_Base_SetConfig+0x104>
 8002a92:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002a96:	4290      	cmp	r0, r2
 8002a98:	d040      	beq.n	8002b1c <TIM_Base_SetConfig+0x108>
 8002a9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a9e:	4290      	cmp	r0, r2
 8002aa0:	d03e      	beq.n	8002b20 <TIM_Base_SetConfig+0x10c>
 8002aa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aa6:	4290      	cmp	r0, r2
 8002aa8:	d00d      	beq.n	8002ac6 <TIM_Base_SetConfig+0xb2>
 8002aaa:	2200      	movs	r2, #0
 8002aac:	e00e      	b.n	8002acc <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002aae:	2201      	movs	r2, #1
 8002ab0:	e7c8      	b.n	8002a44 <TIM_Base_SetConfig+0x30>
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	e7c6      	b.n	8002a44 <TIM_Base_SetConfig+0x30>
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	e7c4      	b.n	8002a44 <TIM_Base_SetConfig+0x30>
 8002aba:	2201      	movs	r2, #1
 8002abc:	e7c2      	b.n	8002a44 <TIM_Base_SetConfig+0x30>
 8002abe:	2201      	movs	r2, #1
 8002ac0:	e7c0      	b.n	8002a44 <TIM_Base_SetConfig+0x30>
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	e7be      	b.n	8002a44 <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	e000      	b.n	8002acc <TIM_Base_SetConfig+0xb8>
 8002aca:	2201      	movs	r2, #1
 8002acc:	b11a      	cbz	r2, 8002ad6 <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ad2:	68ca      	ldr	r2, [r1, #12]
 8002ad4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002ad6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ad8:	688b      	ldr	r3, [r1, #8]
 8002ada:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002adc:	680b      	ldr	r3, [r1, #0]
 8002ade:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <TIM_Base_SetConfig+0x118>)
 8002ae2:	4298      	cmp	r0, r3
 8002ae4:	d020      	beq.n	8002b28 <TIM_Base_SetConfig+0x114>
 8002ae6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aea:	4298      	cmp	r0, r3
 8002aec:	d01a      	beq.n	8002b24 <TIM_Base_SetConfig+0x110>
 8002aee:	2300      	movs	r3, #0
 8002af0:	b10b      	cbz	r3, 8002af6 <TIM_Base_SetConfig+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 8002af2:	690b      	ldr	r3, [r1, #16]
 8002af4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002af6:	2301      	movs	r3, #1
 8002af8:	6143      	str	r3, [r0, #20]
 8002afa:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002afc:	2201      	movs	r2, #1
 8002afe:	e7e5      	b.n	8002acc <TIM_Base_SetConfig+0xb8>
 8002b00:	2201      	movs	r2, #1
 8002b02:	e7e3      	b.n	8002acc <TIM_Base_SetConfig+0xb8>
 8002b04:	2201      	movs	r2, #1
 8002b06:	e7e1      	b.n	8002acc <TIM_Base_SetConfig+0xb8>
 8002b08:	2201      	movs	r2, #1
 8002b0a:	e7df      	b.n	8002acc <TIM_Base_SetConfig+0xb8>
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	e7dd      	b.n	8002acc <TIM_Base_SetConfig+0xb8>
 8002b10:	2201      	movs	r2, #1
 8002b12:	e7db      	b.n	8002acc <TIM_Base_SetConfig+0xb8>
 8002b14:	2201      	movs	r2, #1
 8002b16:	e7d9      	b.n	8002acc <TIM_Base_SetConfig+0xb8>
 8002b18:	2201      	movs	r2, #1
 8002b1a:	e7d7      	b.n	8002acc <TIM_Base_SetConfig+0xb8>
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	e7d5      	b.n	8002acc <TIM_Base_SetConfig+0xb8>
 8002b20:	2201      	movs	r2, #1
 8002b22:	e7d3      	b.n	8002acc <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002b24:	2301      	movs	r3, #1
 8002b26:	e7e3      	b.n	8002af0 <TIM_Base_SetConfig+0xdc>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e7e1      	b.n	8002af0 <TIM_Base_SetConfig+0xdc>
 8002b2c:	40010000 	.word	0x40010000

08002b30 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d06b      	beq.n	8002c0c <HAL_TIM_Base_Init+0xdc>
{ 
 8002b34:	b510      	push	{r4, lr}
 8002b36:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
 8002b38:	6803      	ldr	r3, [r0, #0]
 8002b3a:	4a35      	ldr	r2, [pc, #212]	; (8002c10 <HAL_TIM_Base_Init+0xe0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d036      	beq.n	8002bae <HAL_TIM_Base_Init+0x7e>
 8002b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b44:	d033      	beq.n	8002bae <HAL_TIM_Base_Init+0x7e>
 8002b46:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d02f      	beq.n	8002bae <HAL_TIM_Base_Init+0x7e>
 8002b4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d02b      	beq.n	8002bae <HAL_TIM_Base_Init+0x7e>
 8002b56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d027      	beq.n	8002bae <HAL_TIM_Base_Init+0x7e>
 8002b5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d023      	beq.n	8002bae <HAL_TIM_Base_Init+0x7e>
 8002b66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d01f      	beq.n	8002bae <HAL_TIM_Base_Init+0x7e>
 8002b6e:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d01b      	beq.n	8002bae <HAL_TIM_Base_Init+0x7e>
 8002b76:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d017      	beq.n	8002bae <HAL_TIM_Base_Init+0x7e>
 8002b7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_TIM_Base_Init+0x7e>
 8002b86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00f      	beq.n	8002bae <HAL_TIM_Base_Init+0x7e>
 8002b8e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00b      	beq.n	8002bae <HAL_TIM_Base_Init+0x7e>
 8002b96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d007      	beq.n	8002bae <HAL_TIM_Base_Init+0x7e>
 8002b9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d003      	beq.n	8002bae <HAL_TIM_Base_Init+0x7e>
 8002ba6:	21d7      	movs	r1, #215	; 0xd7
 8002ba8:	481a      	ldr	r0, [pc, #104]	; (8002c14 <HAL_TIM_Base_Init+0xe4>)
 8002baa:	f001 fd9d 	bl	80046e8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002bae:	68a3      	ldr	r3, [r4, #8]
 8002bb0:	b15b      	cbz	r3, 8002bca <HAL_TIM_Base_Init+0x9a>
 8002bb2:	2b10      	cmp	r3, #16
 8002bb4:	d009      	beq.n	8002bca <HAL_TIM_Base_Init+0x9a>
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d007      	beq.n	8002bca <HAL_TIM_Base_Init+0x9a>
 8002bba:	2b40      	cmp	r3, #64	; 0x40
 8002bbc:	d005      	beq.n	8002bca <HAL_TIM_Base_Init+0x9a>
 8002bbe:	2b60      	cmp	r3, #96	; 0x60
 8002bc0:	d003      	beq.n	8002bca <HAL_TIM_Base_Init+0x9a>
 8002bc2:	21d8      	movs	r1, #216	; 0xd8
 8002bc4:	4813      	ldr	r0, [pc, #76]	; (8002c14 <HAL_TIM_Base_Init+0xe4>)
 8002bc6:	f001 fd8f 	bl	80046e8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002bca:	6923      	ldr	r3, [r4, #16]
 8002bcc:	b14b      	cbz	r3, 8002be2 <HAL_TIM_Base_Init+0xb2>
 8002bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd2:	d006      	beq.n	8002be2 <HAL_TIM_Base_Init+0xb2>
 8002bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_Base_Init+0xb2>
 8002bda:	21d9      	movs	r1, #217	; 0xd9
 8002bdc:	480d      	ldr	r0, [pc, #52]	; (8002c14 <HAL_TIM_Base_Init+0xe4>)
 8002bde:	f001 fd83 	bl	80046e8 <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002be2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002be6:	b15b      	cbz	r3, 8002c00 <HAL_TIM_Base_Init+0xd0>
  htim->State= HAL_TIM_STATE_BUSY;
 8002be8:	2302      	movs	r3, #2
 8002bea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002bee:	1d21      	adds	r1, r4, #4
 8002bf0:	6820      	ldr	r0, [r4, #0]
 8002bf2:	f7ff ff0f 	bl	8002a14 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002c00:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002c04:	4620      	mov	r0, r4
 8002c06:	f001 fe63 	bl	80048d0 <HAL_TIM_Base_MspInit>
 8002c0a:	e7ed      	b.n	8002be8 <HAL_TIM_Base_Init+0xb8>
    return HAL_ERROR;
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	4770      	bx	lr
 8002c10:	40010000 	.word	0x40010000
 8002c14:	08004c90 	.word	0x08004c90

08002c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002c18:	b538      	push	{r3, r4, r5, lr}
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	460d      	mov	r5, r1
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8002c1e:	6803      	ldr	r3, [r0, #0]
 8002c20:	4a33      	ldr	r2, [pc, #204]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01f      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2a:	d01c      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002c2c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d018      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002c34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d014      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002c3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d010      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002c44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00c      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002c4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d008      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002c54:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d004      	beq.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002c5c:	f240 614a 	movw	r1, #1610	; 0x64a
 8002c60:	4824      	ldr	r0, [pc, #144]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002c62:	f001 fd41 	bl	80046e8 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8002c66:	682b      	ldr	r3, [r5, #0]
 8002c68:	b193      	cbz	r3, 8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d010      	beq.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002c6e:	2b20      	cmp	r3, #32
 8002c70:	d00e      	beq.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002c72:	2b30      	cmp	r3, #48	; 0x30
 8002c74:	d00c      	beq.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002c76:	2b40      	cmp	r3, #64	; 0x40
 8002c78:	d00a      	beq.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002c7a:	2b50      	cmp	r3, #80	; 0x50
 8002c7c:	d008      	beq.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002c7e:	2b60      	cmp	r3, #96	; 0x60
 8002c80:	d006      	beq.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002c82:	2b70      	cmp	r3, #112	; 0x70
 8002c84:	d004      	beq.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8002c86:	f240 614b 	movw	r1, #1611	; 0x64b
 8002c8a:	481a      	ldr	r0, [pc, #104]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002c8c:	f001 fd2c 	bl	80046e8 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8002c90:	686b      	ldr	r3, [r5, #4]
 8002c92:	2b80      	cmp	r3, #128	; 0x80
 8002c94:	d000      	beq.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x80>
 8002c96:	bb1b      	cbnz	r3, 8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
  
  __HAL_LOCK(htim);
 8002c98:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d025      	beq.n	8002cec <HAL_TIMEx_MasterConfigSynchronization+0xd4>
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002cac:	6821      	ldr	r1, [r4, #0]
 8002cae:	684b      	ldr	r3, [r1, #4]
 8002cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb4:	604b      	str	r3, [r1, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002cb6:	6821      	ldr	r1, [r4, #0]
 8002cb8:	684b      	ldr	r3, [r1, #4]
 8002cba:	6828      	ldr	r0, [r5, #0]
 8002cbc:	4303      	orrs	r3, r0
 8002cbe:	604b      	str	r3, [r1, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002cc0:	6821      	ldr	r1, [r4, #0]
 8002cc2:	688b      	ldr	r3, [r1, #8]
 8002cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cc8:	608b      	str	r3, [r1, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002cca:	6821      	ldr	r1, [r4, #0]
 8002ccc:	688b      	ldr	r3, [r1, #8]
 8002cce:	6868      	ldr	r0, [r5, #4]
 8002cd0:	4303      	orrs	r3, r0
 8002cd2:	608b      	str	r3, [r1, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
 8002cde:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8002ce0:	f240 614c 	movw	r1, #1612	; 0x64c
 8002ce4:	4803      	ldr	r0, [pc, #12]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002ce6:	f001 fcff 	bl	80046e8 <assert_failed>
 8002cea:	e7d5      	b.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  __HAL_LOCK(htim);
 8002cec:	2002      	movs	r0, #2
} 
 8002cee:	bd38      	pop	{r3, r4, r5, pc}
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	08004cc8 	.word	0x08004cc8

08002cf8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cfc:	4604      	mov	r4, r0
  uint32_t tmpreg = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002cfe:	6842      	ldr	r2, [r0, #4]
 8002d00:	4bb6      	ldr	r3, [pc, #728]	; (8002fdc <UART_SetConfig+0x2e4>)
 8002d02:	429a      	cmp	r2, r3
 8002d04:	f200 80a6 	bhi.w	8002e54 <UART_SetConfig+0x15c>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002d08:	68e3      	ldr	r3, [r4, #12]
 8002d0a:	b13b      	cbz	r3, 8002d1c <UART_SetConfig+0x24>
 8002d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d10:	d004      	beq.n	8002d1c <UART_SetConfig+0x24>
 8002d12:	f640 1186 	movw	r1, #2438	; 0x986
 8002d16:	48b2      	ldr	r0, [pc, #712]	; (8002fe0 <UART_SetConfig+0x2e8>)
 8002d18:	f001 fce6 	bl	80046e8 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002d1c:	6923      	ldr	r3, [r4, #16]
 8002d1e:	b153      	cbz	r3, 8002d36 <UART_SetConfig+0x3e>
 8002d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d24:	d007      	beq.n	8002d36 <UART_SetConfig+0x3e>
 8002d26:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d2a:	d004      	beq.n	8002d36 <UART_SetConfig+0x3e>
 8002d2c:	f640 1187 	movw	r1, #2439	; 0x987
 8002d30:	48ab      	ldr	r0, [pc, #684]	; (8002fe0 <UART_SetConfig+0x2e8>)
 8002d32:	f001 fcd9 	bl	80046e8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002d36:	6963      	ldr	r3, [r4, #20]
 8002d38:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8002d3c:	4213      	tst	r3, r2
 8002d3e:	d100      	bne.n	8002d42 <UART_SetConfig+0x4a>
 8002d40:	b923      	cbnz	r3, 8002d4c <UART_SetConfig+0x54>
 8002d42:	f640 1188 	movw	r1, #2440	; 0x988
 8002d46:	48a6      	ldr	r0, [pc, #664]	; (8002fe0 <UART_SetConfig+0x2e8>)
 8002d48:	f001 fcce 	bl	80046e8 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002d4c:	6822      	ldr	r2, [r4, #0]
 8002d4e:	6913      	ldr	r3, [r2, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002d50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002d54:	68e1      	ldr	r1, [r4, #12]
 8002d56:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002d58:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002d5a:	6821      	ldr	r1, [r4, #0]
 8002d5c:	68cb      	ldr	r3, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002d5e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d62:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d66:	68a2      	ldr	r2, [r4, #8]
 8002d68:	6920      	ldr	r0, [r4, #16]
 8002d6a:	4302      	orrs	r2, r0
 8002d6c:	6960      	ldr	r0, [r4, #20]
 8002d6e:	4302      	orrs	r2, r0
 8002d70:	69e0      	ldr	r0, [r4, #28]
 8002d72:	4302      	orrs	r2, r0
 8002d74:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002d76:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002d78:	6822      	ldr	r2, [r4, #0]
 8002d7a:	6953      	ldr	r3, [r2, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002d80:	69a1      	ldr	r1, [r4, #24]
 8002d82:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002d84:	6153      	str	r3, [r2, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d86:	69e3      	ldr	r3, [r4, #28]
 8002d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d8c:	d068      	beq.n	8002e60 <UART_SetConfig+0x168>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d8e:	f8d4 8000 	ldr.w	r8, [r4]
 8002d92:	4b94      	ldr	r3, [pc, #592]	; (8002fe4 <UART_SetConfig+0x2ec>)
 8002d94:	4598      	cmp	r8, r3
 8002d96:	f000 8129 	beq.w	8002fec <UART_SetConfig+0x2f4>
 8002d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d9e:	4598      	cmp	r8, r3
 8002da0:	f000 8124 	beq.w	8002fec <UART_SetConfig+0x2f4>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002da4:	f7fe fd82 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8002da8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002dac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002db0:	6865      	ldr	r5, [r4, #4]
 8002db2:	00ad      	lsls	r5, r5, #2
 8002db4:	fbb0 f5f5 	udiv	r5, r0, r5
 8002db8:	4f8b      	ldr	r7, [pc, #556]	; (8002fe8 <UART_SetConfig+0x2f0>)
 8002dba:	fba7 3505 	umull	r3, r5, r7, r5
 8002dbe:	096d      	lsrs	r5, r5, #5
 8002dc0:	012e      	lsls	r6, r5, #4
 8002dc2:	f7fe fd73 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8002dc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002dca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002dce:	6865      	ldr	r5, [r4, #4]
 8002dd0:	00ad      	lsls	r5, r5, #2
 8002dd2:	fbb0 faf5 	udiv	sl, r0, r5
 8002dd6:	f7fe fd69 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8002dda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002dde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002de2:	6865      	ldr	r5, [r4, #4]
 8002de4:	00ad      	lsls	r5, r5, #2
 8002de6:	fbb0 f5f5 	udiv	r5, r0, r5
 8002dea:	fba7 3505 	umull	r3, r5, r7, r5
 8002dee:	096d      	lsrs	r5, r5, #5
 8002df0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002df4:	fb09 a515 	mls	r5, r9, r5, sl
 8002df8:	012d      	lsls	r5, r5, #4
 8002dfa:	3532      	adds	r5, #50	; 0x32
 8002dfc:	fba7 3505 	umull	r3, r5, r7, r5
 8002e00:	096d      	lsrs	r5, r5, #5
 8002e02:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002e06:	4435      	add	r5, r6
 8002e08:	f7fe fd50 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8002e0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e14:	6866      	ldr	r6, [r4, #4]
 8002e16:	00b6      	lsls	r6, r6, #2
 8002e18:	fbb0 f6f6 	udiv	r6, r0, r6
 8002e1c:	f7fe fd46 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8002e20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e28:	6863      	ldr	r3, [r4, #4]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002e30:	fba7 3000 	umull	r3, r0, r7, r0
 8002e34:	0940      	lsrs	r0, r0, #5
 8002e36:	fb09 6910 	mls	r9, r9, r0, r6
 8002e3a:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8002e3e:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8002e42:	fba7 3709 	umull	r3, r7, r7, r9
 8002e46:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002e4a:	442f      	add	r7, r5
 8002e4c:	f8c8 7008 	str.w	r7, [r8, #8]
 8002e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002e54:	f640 1185 	movw	r1, #2437	; 0x985
 8002e58:	4861      	ldr	r0, [pc, #388]	; (8002fe0 <UART_SetConfig+0x2e8>)
 8002e5a:	f001 fc45 	bl	80046e8 <assert_failed>
 8002e5e:	e753      	b.n	8002d08 <UART_SetConfig+0x10>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e60:	f8d4 8000 	ldr.w	r8, [r4]
 8002e64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e68:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8002e6c:	4598      	cmp	r8, r3
 8002e6e:	d05c      	beq.n	8002f2a <UART_SetConfig+0x232>
 8002e70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e74:	4598      	cmp	r8, r3
 8002e76:	d058      	beq.n	8002f2a <UART_SetConfig+0x232>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002e78:	f7fe fd18 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8002e7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e84:	6865      	ldr	r5, [r4, #4]
 8002e86:	006d      	lsls	r5, r5, #1
 8002e88:	fbb0 f5f5 	udiv	r5, r0, r5
 8002e8c:	4f56      	ldr	r7, [pc, #344]	; (8002fe8 <UART_SetConfig+0x2f0>)
 8002e8e:	fba7 3505 	umull	r3, r5, r7, r5
 8002e92:	096d      	lsrs	r5, r5, #5
 8002e94:	012e      	lsls	r6, r5, #4
 8002e96:	f7fe fd09 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8002e9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ea2:	6865      	ldr	r5, [r4, #4]
 8002ea4:	006d      	lsls	r5, r5, #1
 8002ea6:	fbb0 faf5 	udiv	sl, r0, r5
 8002eaa:	f7fe fcff 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8002eae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002eb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002eb6:	6865      	ldr	r5, [r4, #4]
 8002eb8:	006d      	lsls	r5, r5, #1
 8002eba:	fbb0 f5f5 	udiv	r5, r0, r5
 8002ebe:	fba7 3505 	umull	r3, r5, r7, r5
 8002ec2:	096d      	lsrs	r5, r5, #5
 8002ec4:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002ec8:	fb09 a515 	mls	r5, r9, r5, sl
 8002ecc:	00ed      	lsls	r5, r5, #3
 8002ece:	3532      	adds	r5, #50	; 0x32
 8002ed0:	fba7 3505 	umull	r3, r5, r7, r5
 8002ed4:	096d      	lsrs	r5, r5, #5
 8002ed6:	006d      	lsls	r5, r5, #1
 8002ed8:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8002edc:	4435      	add	r5, r6
 8002ede:	f7fe fce5 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8002ee2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ee6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002eea:	6866      	ldr	r6, [r4, #4]
 8002eec:	0076      	lsls	r6, r6, #1
 8002eee:	fbb0 f6f6 	udiv	r6, r0, r6
 8002ef2:	f7fe fcdb 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8002ef6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002efa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002efe:	6863      	ldr	r3, [r4, #4]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f06:	fba7 2303 	umull	r2, r3, r7, r3
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	fb09 6913 	mls	r9, r9, r3, r6
 8002f10:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8002f14:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8002f18:	fba7 3709 	umull	r3, r7, r7, r9
 8002f1c:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002f20:	442f      	add	r7, r5
 8002f22:	f8c8 7008 	str.w	r7, [r8, #8]
 8002f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002f2a:	f7fe fccf 	bl	80018cc <HAL_RCC_GetPCLK2Freq>
 8002f2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f36:	6865      	ldr	r5, [r4, #4]
 8002f38:	006d      	lsls	r5, r5, #1
 8002f3a:	fbb0 f5f5 	udiv	r5, r0, r5
 8002f3e:	4f2a      	ldr	r7, [pc, #168]	; (8002fe8 <UART_SetConfig+0x2f0>)
 8002f40:	fba7 3505 	umull	r3, r5, r7, r5
 8002f44:	096d      	lsrs	r5, r5, #5
 8002f46:	012e      	lsls	r6, r5, #4
 8002f48:	f7fe fcc0 	bl	80018cc <HAL_RCC_GetPCLK2Freq>
 8002f4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f54:	6865      	ldr	r5, [r4, #4]
 8002f56:	006d      	lsls	r5, r5, #1
 8002f58:	fbb0 faf5 	udiv	sl, r0, r5
 8002f5c:	f7fe fcb6 	bl	80018cc <HAL_RCC_GetPCLK2Freq>
 8002f60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f68:	6865      	ldr	r5, [r4, #4]
 8002f6a:	006d      	lsls	r5, r5, #1
 8002f6c:	fbb0 f5f5 	udiv	r5, r0, r5
 8002f70:	fba7 3505 	umull	r3, r5, r7, r5
 8002f74:	096d      	lsrs	r5, r5, #5
 8002f76:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002f7a:	fb09 a515 	mls	r5, r9, r5, sl
 8002f7e:	00ed      	lsls	r5, r5, #3
 8002f80:	3532      	adds	r5, #50	; 0x32
 8002f82:	fba7 3505 	umull	r3, r5, r7, r5
 8002f86:	096d      	lsrs	r5, r5, #5
 8002f88:	006d      	lsls	r5, r5, #1
 8002f8a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8002f8e:	4435      	add	r5, r6
 8002f90:	f7fe fc9c 	bl	80018cc <HAL_RCC_GetPCLK2Freq>
 8002f94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002f9c:	6866      	ldr	r6, [r4, #4]
 8002f9e:	0076      	lsls	r6, r6, #1
 8002fa0:	fbb0 f6f6 	udiv	r6, r0, r6
 8002fa4:	f7fe fc92 	bl	80018cc <HAL_RCC_GetPCLK2Freq>
 8002fa8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002fac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002fb0:	6863      	ldr	r3, [r4, #4]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb8:	fba7 2303 	umull	r2, r3, r7, r3
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	fb09 6913 	mls	r9, r9, r3, r6
 8002fc2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8002fc6:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8002fca:	fba7 3709 	umull	r3, r7, r7, r9
 8002fce:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002fd2:	442f      	add	r7, r5
 8002fd4:	f8c8 7008 	str.w	r7, [r8, #8]
 8002fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fdc:	00a037a0 	.word	0x00a037a0
 8002fe0:	08004d04 	.word	0x08004d04
 8002fe4:	40011000 	.word	0x40011000
 8002fe8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002fec:	f7fe fc6e 	bl	80018cc <HAL_RCC_GetPCLK2Freq>
 8002ff0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ff4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ff8:	6865      	ldr	r5, [r4, #4]
 8002ffa:	00ad      	lsls	r5, r5, #2
 8002ffc:	fbb0 f5f5 	udiv	r5, r0, r5
 8003000:	4f26      	ldr	r7, [pc, #152]	; (800309c <UART_SetConfig+0x3a4>)
 8003002:	fba7 3505 	umull	r3, r5, r7, r5
 8003006:	096d      	lsrs	r5, r5, #5
 8003008:	012e      	lsls	r6, r5, #4
 800300a:	f7fe fc5f 	bl	80018cc <HAL_RCC_GetPCLK2Freq>
 800300e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003012:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003016:	6865      	ldr	r5, [r4, #4]
 8003018:	00ad      	lsls	r5, r5, #2
 800301a:	fbb0 faf5 	udiv	sl, r0, r5
 800301e:	f7fe fc55 	bl	80018cc <HAL_RCC_GetPCLK2Freq>
 8003022:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003026:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800302a:	6865      	ldr	r5, [r4, #4]
 800302c:	00ad      	lsls	r5, r5, #2
 800302e:	fbb0 f5f5 	udiv	r5, r0, r5
 8003032:	fba7 3505 	umull	r3, r5, r7, r5
 8003036:	096d      	lsrs	r5, r5, #5
 8003038:	f04f 0964 	mov.w	r9, #100	; 0x64
 800303c:	fb09 a515 	mls	r5, r9, r5, sl
 8003040:	012d      	lsls	r5, r5, #4
 8003042:	3532      	adds	r5, #50	; 0x32
 8003044:	fba7 3505 	umull	r3, r5, r7, r5
 8003048:	096d      	lsrs	r5, r5, #5
 800304a:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800304e:	4435      	add	r5, r6
 8003050:	f7fe fc3c 	bl	80018cc <HAL_RCC_GetPCLK2Freq>
 8003054:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003058:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800305c:	6866      	ldr	r6, [r4, #4]
 800305e:	00b6      	lsls	r6, r6, #2
 8003060:	fbb0 f6f6 	udiv	r6, r0, r6
 8003064:	f7fe fc32 	bl	80018cc <HAL_RCC_GetPCLK2Freq>
 8003068:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800306c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003070:	6863      	ldr	r3, [r4, #4]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	fbb0 f3f3 	udiv	r3, r0, r3
 8003078:	fba7 2303 	umull	r2, r3, r7, r3
 800307c:	095b      	lsrs	r3, r3, #5
 800307e:	fb09 6913 	mls	r9, r9, r3, r6
 8003082:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8003086:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800308a:	fba7 3709 	umull	r3, r7, r7, r9
 800308e:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8003092:	442f      	add	r7, r5
 8003094:	f8c8 7008 	str.w	r7, [r8, #8]
 8003098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800309c:	51eb851f 	.word	0x51eb851f

080030a0 <HAL_UART_Init>:
  if(huart == NULL)
 80030a0:	2800      	cmp	r0, #0
 80030a2:	f000 808e 	beq.w	80031c2 <HAL_UART_Init+0x122>
{
 80030a6:	b510      	push	{r4, lr}
 80030a8:	4604      	mov	r4, r0
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80030aa:	6983      	ldr	r3, [r0, #24]
 80030ac:	b32b      	cbz	r3, 80030fa <HAL_UART_Init+0x5a>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80030ae:	6803      	ldr	r3, [r0, #0]
 80030b0:	4a45      	ldr	r2, [pc, #276]	; (80031c8 <HAL_UART_Init+0x128>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d010      	beq.n	80030d8 <HAL_UART_Init+0x38>
 80030b6:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00c      	beq.n	80030d8 <HAL_UART_Init+0x38>
 80030be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d008      	beq.n	80030d8 <HAL_UART_Init+0x38>
 80030c6:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d004      	beq.n	80030d8 <HAL_UART_Init+0x38>
 80030ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030d2:	483e      	ldr	r0, [pc, #248]	; (80031cc <HAL_UART_Init+0x12c>)
 80030d4:	f001 fb08 	bl	80046e8 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80030d8:	69a3      	ldr	r3, [r4, #24]
 80030da:	b39b      	cbz	r3, 8003144 <HAL_UART_Init+0xa4>
 80030dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e0:	d030      	beq.n	8003144 <HAL_UART_Init+0xa4>
 80030e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e6:	d02d      	beq.n	8003144 <HAL_UART_Init+0xa4>
 80030e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ec:	d02a      	beq.n	8003144 <HAL_UART_Init+0xa4>
 80030ee:	f240 1101 	movw	r1, #257	; 0x101
 80030f2:	4836      	ldr	r0, [pc, #216]	; (80031cc <HAL_UART_Init+0x12c>)
 80030f4:	f001 faf8 	bl	80046e8 <assert_failed>
 80030f8:	e024      	b.n	8003144 <HAL_UART_Init+0xa4>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80030fa:	6803      	ldr	r3, [r0, #0]
 80030fc:	4a32      	ldr	r2, [pc, #200]	; (80031c8 <HAL_UART_Init+0x128>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d020      	beq.n	8003144 <HAL_UART_Init+0xa4>
 8003102:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8003106:	4293      	cmp	r3, r2
 8003108:	d01c      	beq.n	8003144 <HAL_UART_Init+0xa4>
 800310a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800310e:	4293      	cmp	r3, r2
 8003110:	d018      	beq.n	8003144 <HAL_UART_Init+0xa4>
 8003112:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003116:	4293      	cmp	r3, r2
 8003118:	d014      	beq.n	8003144 <HAL_UART_Init+0xa4>
 800311a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800311e:	4293      	cmp	r3, r2
 8003120:	d010      	beq.n	8003144 <HAL_UART_Init+0xa4>
 8003122:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8003126:	4293      	cmp	r3, r2
 8003128:	d00c      	beq.n	8003144 <HAL_UART_Init+0xa4>
 800312a:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 800312e:	4293      	cmp	r3, r2
 8003130:	d008      	beq.n	8003144 <HAL_UART_Init+0xa4>
 8003132:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_UART_Init+0xa4>
 800313a:	f240 1105 	movw	r1, #261	; 0x105
 800313e:	4823      	ldr	r0, [pc, #140]	; (80031cc <HAL_UART_Init+0x12c>)
 8003140:	f001 fad2 	bl	80046e8 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003144:	68a3      	ldr	r3, [r4, #8]
 8003146:	b13b      	cbz	r3, 8003158 <HAL_UART_Init+0xb8>
 8003148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314c:	d004      	beq.n	8003158 <HAL_UART_Init+0xb8>
 800314e:	f240 1107 	movw	r1, #263	; 0x107
 8003152:	481e      	ldr	r0, [pc, #120]	; (80031cc <HAL_UART_Init+0x12c>)
 8003154:	f001 fac8 	bl	80046e8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003158:	69e3      	ldr	r3, [r4, #28]
 800315a:	b13b      	cbz	r3, 800316c <HAL_UART_Init+0xcc>
 800315c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003160:	d004      	beq.n	800316c <HAL_UART_Init+0xcc>
 8003162:	f44f 7184 	mov.w	r1, #264	; 0x108
 8003166:	4819      	ldr	r0, [pc, #100]	; (80031cc <HAL_UART_Init+0x12c>)
 8003168:	f001 fabe 	bl	80046e8 <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 800316c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003170:	b30b      	cbz	r3, 80031b6 <HAL_UART_Init+0x116>
  huart->gState = HAL_UART_STATE_BUSY;
 8003172:	2324      	movs	r3, #36	; 0x24
 8003174:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003178:	6822      	ldr	r2, [r4, #0]
 800317a:	68d3      	ldr	r3, [r2, #12]
 800317c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003180:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003182:	4620      	mov	r0, r4
 8003184:	f7ff fdb8 	bl	8002cf8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003188:	6822      	ldr	r2, [r4, #0]
 800318a:	6913      	ldr	r3, [r2, #16]
 800318c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003190:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003192:	6822      	ldr	r2, [r4, #0]
 8003194:	6953      	ldr	r3, [r2, #20]
 8003196:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800319a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800319c:	6822      	ldr	r2, [r4, #0]
 800319e:	68d3      	ldr	r3, [r2, #12]
 80031a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031a4:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a6:	2000      	movs	r0, #0
 80031a8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80031aa:	2320      	movs	r3, #32
 80031ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80031b0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80031b4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80031b6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80031ba:	4620      	mov	r0, r4
 80031bc:	f001 fbdc 	bl	8004978 <HAL_UART_MspInit>
 80031c0:	e7d7      	b.n	8003172 <HAL_UART_Init+0xd2>
    return HAL_ERROR;
 80031c2:	2001      	movs	r0, #1
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40011000 	.word	0x40011000
 80031cc:	08004d04 	.word	0x08004d04

080031d0 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 80031d0:	3203      	adds	r2, #3
 80031d2:	0892      	lsrs	r2, r2, #2
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80031d4:	2300      	movs	r3, #0
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d20c      	bcs.n	80031f4 <USB_ReadPacket+0x24>
{
 80031da:	b410      	push	{r4}
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80031dc:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 80031e0:	6824      	ldr	r4, [r4, #0]
 80031e2:	f841 4b04 	str.w	r4, [r1], #4
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80031e6:	3301      	adds	r3, #1
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d3f7      	bcc.n	80031dc <USB_ReadPacket+0xc>
    
  }
  return ((void *)dest);
}
 80031ec:	4608      	mov	r0, r1
 80031ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	4608      	mov	r0, r1
 80031f6:	4770      	bx	lr

080031f8 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 80031f8:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 80031fa:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 80031fc:	4010      	ands	r0, r2
 80031fe:	4770      	bx	lr

08003200 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8003200:	6940      	ldr	r0, [r0, #20]
}
 8003202:	f000 0001 	and.w	r0, r0, #1
 8003206:	4770      	bx	lr

08003208 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock 
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 8003208:	b410      	push	{r4}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800320a:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 800320e:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8003212:	f023 0303 	bic.w	r3, r3, #3
 8003216:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 800321a:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 800321e:	f001 0203 	and.w	r2, r1, #3
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  
  if (freq ==  HCFG_48_MHZ)
 8003228:	2901      	cmp	r1, #1
 800322a:	d005      	beq.n	8003238 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq ==  HCFG_6_MHZ)
 800322c:	2902      	cmp	r1, #2
 800322e:	d007      	beq.n	8003240 <USB_InitFSLSPClkSel+0x38>
  {
    USBx_HOST->HFIR = 6000U;
  } 
  return HAL_OK;  
}
 8003230:	2000      	movs	r0, #0
 8003232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003236:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8003238:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800323c:	6063      	str	r3, [r4, #4]
 800323e:	e7f7      	b.n	8003230 <USB_InitFSLSPClkSel+0x28>
    USBx_HOST->HFIR = 6000U;
 8003240:	f241 7370 	movw	r3, #6000	; 0x1770
 8003244:	6063      	str	r3, [r4, #4]
 8003246:	e7f3      	b.n	8003230 <USB_InitFSLSPClkSel+0x28>

08003248 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	b29b      	uxth	r3, r3
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 8003266:	b480      	push	{r7}
 8003268:	b085      	sub	sp, #20
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	0c9b      	lsrs	r3, r3, #18
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00b      	beq.n	80032a6 <USB_HC_Halt+0x40>
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329a:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 800329c:	0c9b      	lsrs	r3, r3, #18
 800329e:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d160      	bne.n	8003368 <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b2:	4619      	mov	r1, r3
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032c6:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d135      	bne.n	8003340 <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	4619      	mov	r1, r3
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032f4:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	4619      	mov	r1, r3
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003316:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3301      	adds	r3, #1
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003324:	d81e      	bhi.n	8003364 <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800333c:	d0ec      	beq.n	8003318 <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800333e:	e074      	b.n	800342a <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4413      	add	r3, r2
 8003348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334c:	4619      	mov	r1, r3
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4413      	add	r3, r2
 8003356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003360:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8003362:	e062      	b.n	800342a <USB_HC_Halt+0x1c4>
          break;
 8003364:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8003366:	e060      	b.n	800342a <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4413      	add	r3, r2
 8003370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003374:	4619      	mov	r1, r3
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003388:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d135      	bne.n	8003404 <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a4:	4619      	mov	r1, r3
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033b8:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c6:	4619      	mov	r1, r3
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033da:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3301      	adds	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033e8:	d81e      	bhi.n	8003428 <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 80033ea:	78fb      	ldrb	r3, [r7, #3]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003400:	d0ec      	beq.n	80033dc <USB_HC_Halt+0x176>
 8003402:	e012      	b.n	800342a <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003410:	4619      	mov	r1, r3
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003424:	600b      	str	r3, [r1, #0]
 8003426:	e000      	b.n	800342a <USB_HC_Halt+0x1c4>
          break;
 8003428:	bf00      	nop
    }
  }
  
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8003438:	2884      	cmp	r0, #132	; 0x84
 800343a:	d001      	beq.n	8003440 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 800343c:	3003      	adds	r0, #3
 800343e:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003440:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8003442:	4770      	bx	lr

08003444 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003444:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003446:	f000 fc5f 	bl	8003d08 <vTaskStartScheduler>
  
  return osOK;
}
 800344a:	2000      	movs	r0, #0
 800344c:	bd08      	pop	{r3, pc}

0800344e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800344e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003450:	b085      	sub	sp, #20
 8003452:	460f      	mov	r7, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003454:	6844      	ldr	r4, [r0, #4]
 8003456:	6805      	ldr	r5, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003458:	6906      	ldr	r6, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800345a:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800345e:	f7ff ffeb 	bl	8003438 <makeFreeRtosPriority>
 8003462:	ab03      	add	r3, sp, #12
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	9000      	str	r0, [sp, #0]
 8003468:	463b      	mov	r3, r7
 800346a:	b2b2      	uxth	r2, r6
 800346c:	4629      	mov	r1, r5
 800346e:	4620      	mov	r0, r4
 8003470:	f000 fc18 	bl	8003ca4 <xTaskCreate>
 8003474:	2801      	cmp	r0, #1
 8003476:	d102      	bne.n	800347e <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003478:	9803      	ldr	r0, [sp, #12]
}
 800347a:	b005      	add	sp, #20
 800347c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 800347e:	2000      	movs	r0, #0
 8003480:	e7fb      	b.n	800347a <osThreadCreate+0x2c>

08003482 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003482:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003484:	4603      	mov	r3, r0
 8003486:	b900      	cbnz	r0, 800348a <osDelay+0x8>
 8003488:	2301      	movs	r3, #1
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fd84 	bl	8003f98 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003490:	2000      	movs	r0, #0
 8003492:	bd08      	pop	{r3, pc}

08003494 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003494:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003496:	f000 fe4b 	bl	8004130 <xTaskGetSchedulerState>
 800349a:	2801      	cmp	r0, #1
 800349c:	d001      	beq.n	80034a2 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800349e:	f000 f919 	bl	80036d4 <xPortSysTickHandler>
 80034a2:	bd08      	pop	{r3, pc}

080034a4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034a4:	f100 0308 	add.w	r3, r0, #8
 80034a8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034aa:	f04f 32ff 	mov.w	r2, #4294967295
 80034ae:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	6003      	str	r3, [r0, #0]
 80034b8:	4770      	bx	lr

080034ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	6103      	str	r3, [r0, #16]
 80034be:	4770      	bx	lr

080034c0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80034c0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034c2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034cc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034ce:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80034d0:	6803      	ldr	r3, [r0, #0]
 80034d2:	3301      	adds	r3, #1
 80034d4:	6003      	str	r3, [r0, #0]
 80034d6:	4770      	bx	lr

080034d8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034d8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034da:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034dc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80034e0:	d002      	beq.n	80034e8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e2:	f100 0208 	add.w	r2, r0, #8
 80034e6:	e002      	b.n	80034ee <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 80034e8:	6902      	ldr	r2, [r0, #16]
 80034ea:	e004      	b.n	80034f6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ec:	461a      	mov	r2, r3
 80034ee:	6853      	ldr	r3, [r2, #4]
 80034f0:	681c      	ldr	r4, [r3, #0]
 80034f2:	42a5      	cmp	r5, r4
 80034f4:	d2fa      	bcs.n	80034ec <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034f6:	6853      	ldr	r3, [r2, #4]
 80034f8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034fa:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034fc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80034fe:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003500:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003502:	6803      	ldr	r3, [r0, #0]
 8003504:	3301      	adds	r3, #1
 8003506:	6003      	str	r3, [r0, #0]
}
 8003508:	bc30      	pop	{r4, r5}
 800350a:	4770      	bx	lr

0800350c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800350c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800350e:	6842      	ldr	r2, [r0, #4]
 8003510:	6881      	ldr	r1, [r0, #8]
 8003512:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003514:	6882      	ldr	r2, [r0, #8]
 8003516:	6841      	ldr	r1, [r0, #4]
 8003518:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	4290      	cmp	r0, r2
 800351e:	d005      	beq.n	800352c <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003520:	2200      	movs	r2, #0
 8003522:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	3801      	subs	r0, #1
 8003528:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800352a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800352c:	6882      	ldr	r2, [r0, #8]
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	e7f6      	b.n	8003520 <uxListRemove+0x14>
	...

08003534 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <prvTaskExitError+0x30>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d008      	beq.n	8003550 <prvTaskExitError+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	e7fe      	b.n	800354e <prvTaskExitError+0x1a>
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	e7fe      	b.n	8003560 <prvTaskExitError+0x2c>
 8003562:	bf00      	nop
 8003564:	20000008 	.word	0x20000008

08003568 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003568:	4806      	ldr	r0, [pc, #24]	; (8003584 <prvPortStartFirstTask+0x1c>)
 800356a:	6800      	ldr	r0, [r0, #0]
 800356c:	6800      	ldr	r0, [r0, #0]
 800356e:	f380 8808 	msr	MSP, r0
 8003572:	b662      	cpsie	i
 8003574:	b661      	cpsie	f
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	df00      	svc	0
 8003580:	bf00      	nop
 8003582:	0000      	.short	0x0000
 8003584:	e000ed08 	.word	0xe000ed08

08003588 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003588:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003598 <vPortEnableVFP+0x10>
 800358c:	6801      	ldr	r1, [r0, #0]
 800358e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003592:	6001      	str	r1, [r0, #0]
 8003594:	4770      	bx	lr
 8003596:	0000      	.short	0x0000
 8003598:	e000ed88 	.word	0xe000ed88

0800359c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800359c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035a0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80035a4:	f021 0101 	bic.w	r1, r1, #1
 80035a8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <pxPortInitialiseStack+0x28>)
 80035ae:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80035b2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80035b6:	f06f 0302 	mvn.w	r3, #2
 80035ba:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80035be:	3844      	subs	r0, #68	; 0x44
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	08003535 	.word	0x08003535
	...

080035d0 <SVC_Handler>:
	__asm volatile (
 80035d0:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <pxCurrentTCBConst2>)
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	6808      	ldr	r0, [r1, #0]
 80035d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035da:	f380 8809 	msr	PSP, r0
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f04f 0000 	mov.w	r0, #0
 80035e6:	f380 8811 	msr	BASEPRI, r0
 80035ea:	4770      	bx	lr
 80035ec:	f3af 8000 	nop.w

080035f0 <pxCurrentTCBConst2>:
 80035f0:	2000814c 	.word	0x2000814c

080035f4 <vPortEnterCritical>:
 80035f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003604:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <vPortEnterCritical+0x3c>)
 8003606:	6813      	ldr	r3, [r2, #0]
 8003608:	3301      	adds	r3, #1
 800360a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800360c:	2b01      	cmp	r3, #1
 800360e:	d10d      	bne.n	800362c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <vPortEnterCritical+0x40>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003618:	d008      	beq.n	800362c <vPortEnterCritical+0x38>
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	e7fe      	b.n	800362a <vPortEnterCritical+0x36>
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20000008 	.word	0x20000008
 8003634:	e000ed04 	.word	0xe000ed04

08003638 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <vPortExitCritical+0x28>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	b943      	cbnz	r3, 8003650 <vPortExitCritical+0x18>
 800363e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	e7fe      	b.n	800364e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003650:	3b01      	subs	r3, #1
 8003652:	4a03      	ldr	r2, [pc, #12]	; (8003660 <vPortExitCritical+0x28>)
 8003654:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003656:	b90b      	cbnz	r3, 800365c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000008 	.word	0x20000008
	...

08003670 <PendSV_Handler>:
	__asm volatile
 8003670:	f3ef 8009 	mrs	r0, PSP
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <pxCurrentTCBConst>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	f01e 0f10 	tst.w	lr, #16
 8003680:	bf08      	it	eq
 8003682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800368a:	6010      	str	r0, [r2, #0]
 800368c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003694:	f380 8811 	msr	BASEPRI, r0
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f000 fce4 	bl	800406c <vTaskSwitchContext>
 80036a4:	f04f 0000 	mov.w	r0, #0
 80036a8:	f380 8811 	msr	BASEPRI, r0
 80036ac:	bc08      	pop	{r3}
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	6808      	ldr	r0, [r1, #0]
 80036b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b6:	f01e 0f10 	tst.w	lr, #16
 80036ba:	bf08      	it	eq
 80036bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80036c0:	f380 8809 	msr	PSP, r0
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	f3af 8000 	nop.w

080036d0 <pxCurrentTCBConst>:
 80036d0:	2000814c 	.word	0x2000814c

080036d4 <xPortSysTickHandler>:
{
 80036d4:	b508      	push	{r3, lr}
	__asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80036e6:	f000 fb53 	bl	8003d90 <xTaskIncrementTick>
 80036ea:	b118      	cbz	r0, 80036f4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80036ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f0:	4b02      	ldr	r3, [pc, #8]	; (80036fc <xPortSysTickHandler+0x28>)
 80036f2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80036f4:	2300      	movs	r3, #0
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	bd08      	pop	{r3, pc}
 80036fc:	e000ed04 	.word	0xe000ed04

08003700 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <vPortSetupTimerInterrupt+0x1c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a06      	ldr	r2, [pc, #24]	; (8003720 <vPortSetupTimerInterrupt+0x20>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	3b01      	subs	r3, #1
 800370e:	4a05      	ldr	r2, [pc, #20]	; (8003724 <vPortSetupTimerInterrupt+0x24>)
 8003710:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003712:	2207      	movs	r2, #7
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <vPortSetupTimerInterrupt+0x28>)
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	2000000c 	.word	0x2000000c
 8003720:	10624dd3 	.word	0x10624dd3
 8003724:	e000e014 	.word	0xe000e014
 8003728:	e000e010 	.word	0xe000e010

0800372c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800372c:	4b31      	ldr	r3, [pc, #196]	; (80037f4 <xPortStartScheduler+0xc8>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <xPortStartScheduler+0xcc>)
 8003732:	429a      	cmp	r2, r3
 8003734:	d019      	beq.n	800376a <xPortStartScheduler+0x3e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003736:	4b2f      	ldr	r3, [pc, #188]	; (80037f4 <xPortStartScheduler+0xc8>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b30      	ldr	r3, [pc, #192]	; (80037fc <xPortStartScheduler+0xd0>)
 800373c:	429a      	cmp	r2, r3
 800373e:	d01d      	beq.n	800377c <xPortStartScheduler+0x50>
{
 8003740:	b500      	push	{lr}
 8003742:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003744:	4b2e      	ldr	r3, [pc, #184]	; (8003800 <xPortStartScheduler+0xd4>)
 8003746:	781a      	ldrb	r2, [r3, #0]
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800374c:	22ff      	movs	r2, #255	; 0xff
 800374e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003758:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800375c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003760:	4a28      	ldr	r2, [pc, #160]	; (8003804 <xPortStartScheduler+0xd8>)
 8003762:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003764:	2307      	movs	r3, #7
 8003766:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003768:	e01b      	b.n	80037a2 <xPortStartScheduler+0x76>
	__asm volatile
 800376a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	e7fe      	b.n	800377a <xPortStartScheduler+0x4e>
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	e7fe      	b.n	800378c <xPortStartScheduler+0x60>
			ulMaxPRIGROUPValue--;
 800378e:	4a1d      	ldr	r2, [pc, #116]	; (8003804 <xPortStartScheduler+0xd8>)
 8003790:	6853      	ldr	r3, [r2, #4]
 8003792:	3b01      	subs	r3, #1
 8003794:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003796:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80037a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80037aa:	d1f0      	bne.n	800378e <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037ac:	4a15      	ldr	r2, [pc, #84]	; (8003804 <xPortStartScheduler+0xd8>)
 80037ae:	6853      	ldr	r3, [r2, #4]
 80037b0:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037b6:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80037b8:	9b01      	ldr	r3, [sp, #4]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	4a10      	ldr	r2, [pc, #64]	; (8003800 <xPortStartScheduler+0xd4>)
 80037be:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80037c0:	4b11      	ldr	r3, [pc, #68]	; (8003808 <xPortStartScheduler+0xdc>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80037c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80037d0:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80037d2:	f7ff ff95 	bl	8003700 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80037d6:	2200      	movs	r2, #0
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <xPortStartScheduler+0xe0>)
 80037da:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80037dc:	f7ff fed4 	bl	8003588 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80037e0:	4a0b      	ldr	r2, [pc, #44]	; (8003810 <xPortStartScheduler+0xe4>)
 80037e2:	6813      	ldr	r3, [r2, #0]
 80037e4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80037e8:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80037ea:	f7ff febd 	bl	8003568 <prvPortStartFirstTask>
	prvTaskExitError();
 80037ee:	f7ff fea1 	bl	8003534 <prvTaskExitError>
 80037f2:	bf00      	nop
 80037f4:	e000ed00 	.word	0xe000ed00
 80037f8:	410fc271 	.word	0x410fc271
 80037fc:	410fc270 	.word	0x410fc270
 8003800:	e000e400 	.word	0xe000e400
 8003804:	2000002c 	.word	0x2000002c
 8003808:	e000ed20 	.word	0xe000ed20
 800380c:	20000008 	.word	0x20000008
 8003810:	e000ef34 	.word	0xe000ef34

08003814 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003814:	4a13      	ldr	r2, [pc, #76]	; (8003864 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003816:	f012 0f07 	tst.w	r2, #7
 800381a:	d020      	beq.n	800385e <prvHeapInit+0x4a>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800381c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800381e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003822:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 8003826:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003828:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800382a:	490f      	ldr	r1, [pc, #60]	; (8003868 <prvHeapInit+0x54>)
 800382c:	f8c1 2938 	str.w	r2, [r1, #2360]	; 0x938
	xStart.xBlockSize = ( size_t ) 0;
 8003830:	2000      	movs	r0, #0
 8003832:	f8c1 093c 	str.w	r0, [r1, #2364]	; 0x93c

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003836:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8003838:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800383a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800383e:	f8c1 3940 	str.w	r3, [r1, #2368]	; 0x940
	pxEnd->xBlockSize = 0;
 8003842:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003844:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003846:	1a98      	subs	r0, r3, r2
 8003848:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800384a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800384c:	f8c1 0944 	str.w	r0, [r1, #2372]	; 0x944
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003850:	f8c1 0948 	str.w	r0, [r1, #2376]	; 0x948

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003854:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003858:	f8c1 394c 	str.w	r3, [r1, #2380]	; 0x94c
 800385c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800385e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003862:	e7e2      	b.n	800382a <prvHeapInit+0x16>
 8003864:	20000034 	.word	0x20000034
 8003868:	200076fc 	.word	0x200076fc

0800386c <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800386c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800386e:	4b13      	ldr	r3, [pc, #76]	; (80038bc <prvInsertBlockIntoFreeList+0x50>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	4282      	cmp	r2, r0
 8003874:	d31c      	bcc.n	80038b0 <prvInsertBlockIntoFreeList+0x44>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	185c      	adds	r4, r3, r1
 800387a:	42a0      	cmp	r0, r4
 800387c:	d103      	bne.n	8003886 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800387e:	6840      	ldr	r0, [r0, #4]
 8003880:	4401      	add	r1, r0
 8003882:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003884:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003886:	6841      	ldr	r1, [r0, #4]
 8003888:	1844      	adds	r4, r0, r1
 800388a:	42a2      	cmp	r2, r4
 800388c:	d114      	bne.n	80038b8 <prvInsertBlockIntoFreeList+0x4c>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800388e:	4c0c      	ldr	r4, [pc, #48]	; (80038c0 <prvInsertBlockIntoFreeList+0x54>)
 8003890:	f8d4 4940 	ldr.w	r4, [r4, #2368]	; 0x940
 8003894:	42a2      	cmp	r2, r4
 8003896:	d00d      	beq.n	80038b4 <prvInsertBlockIntoFreeList+0x48>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003898:	6852      	ldr	r2, [r2, #4]
 800389a:	4411      	add	r1, r2
 800389c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80038a4:	4298      	cmp	r0, r3
 80038a6:	d000      	beq.n	80038aa <prvInsertBlockIntoFreeList+0x3e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80038a8:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038ae:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80038b0:	4613      	mov	r3, r2
 80038b2:	e7dd      	b.n	8003870 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80038b4:	6004      	str	r4, [r0, #0]
 80038b6:	e7f5      	b.n	80038a4 <prvInsertBlockIntoFreeList+0x38>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80038b8:	6002      	str	r2, [r0, #0]
 80038ba:	e7f3      	b.n	80038a4 <prvInsertBlockIntoFreeList+0x38>
 80038bc:	20008034 	.word	0x20008034
 80038c0:	200076fc 	.word	0x200076fc

080038c4 <pvPortMalloc>:
{
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80038c8:	f000 fa58 	bl	8003d7c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80038cc:	4b41      	ldr	r3, [pc, #260]	; (80039d4 <pvPortMalloc+0x110>)
 80038ce:	f8d3 3940 	ldr.w	r3, [r3, #2368]	; 0x940
 80038d2:	b1c3      	cbz	r3, 8003906 <pvPortMalloc+0x42>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038d4:	4b3f      	ldr	r3, [pc, #252]	; (80039d4 <pvPortMalloc+0x110>)
 80038d6:	f8d3 394c 	ldr.w	r3, [r3, #2380]	; 0x94c
 80038da:	421c      	tst	r4, r3
 80038dc:	d16d      	bne.n	80039ba <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 80038de:	b1ac      	cbz	r4, 800390c <pvPortMalloc+0x48>
				xWantedSize += xHeapStructSize;
 80038e0:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038e2:	f014 0f07 	tst.w	r4, #7
 80038e6:	d011      	beq.n	800390c <pvPortMalloc+0x48>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038e8:	f024 0407 	bic.w	r4, r4, #7
 80038ec:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038ee:	f004 0307 	and.w	r3, r4, #7
 80038f2:	b15b      	cbz	r3, 800390c <pvPortMalloc+0x48>
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	e7fe      	b.n	8003904 <pvPortMalloc+0x40>
			prvHeapInit();
 8003906:	f7ff ff85 	bl	8003814 <prvHeapInit>
 800390a:	e7e3      	b.n	80038d4 <pvPortMalloc+0x10>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800390c:	2c00      	cmp	r4, #0
 800390e:	d056      	beq.n	80039be <pvPortMalloc+0xfa>
 8003910:	4b30      	ldr	r3, [pc, #192]	; (80039d4 <pvPortMalloc+0x110>)
 8003912:	f8d3 3948 	ldr.w	r3, [r3, #2376]	; 0x948
 8003916:	429c      	cmp	r4, r3
 8003918:	d853      	bhi.n	80039c2 <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 800391a:	4b2e      	ldr	r3, [pc, #184]	; (80039d4 <pvPortMalloc+0x110>)
 800391c:	f8d3 5938 	ldr.w	r5, [r3, #2360]	; 0x938
				pxPreviousBlock = &xStart;
 8003920:	f603 1338 	addw	r3, r3, #2360	; 0x938
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003924:	e001      	b.n	800392a <pvPortMalloc+0x66>
					pxPreviousBlock = pxBlock;
 8003926:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8003928:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800392a:	686a      	ldr	r2, [r5, #4]
 800392c:	4294      	cmp	r4, r2
 800392e:	d902      	bls.n	8003936 <pvPortMalloc+0x72>
 8003930:	682a      	ldr	r2, [r5, #0]
 8003932:	2a00      	cmp	r2, #0
 8003934:	d1f7      	bne.n	8003926 <pvPortMalloc+0x62>
				if( pxBlock != pxEnd )
 8003936:	4a27      	ldr	r2, [pc, #156]	; (80039d4 <pvPortMalloc+0x110>)
 8003938:	f8d2 2940 	ldr.w	r2, [r2, #2368]	; 0x940
 800393c:	4295      	cmp	r5, r2
 800393e:	d042      	beq.n	80039c6 <pvPortMalloc+0x102>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003940:	681e      	ldr	r6, [r3, #0]
 8003942:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003944:	682a      	ldr	r2, [r5, #0]
 8003946:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003948:	686b      	ldr	r3, [r5, #4]
 800394a:	1b1b      	subs	r3, r3, r4
 800394c:	2b10      	cmp	r3, #16
 800394e:	d910      	bls.n	8003972 <pvPortMalloc+0xae>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003950:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003952:	f010 0f07 	tst.w	r0, #7
 8003956:	d008      	beq.n	800396a <pvPortMalloc+0xa6>
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	e7fe      	b.n	8003968 <pvPortMalloc+0xa4>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800396a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800396c:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800396e:	f7ff ff7d 	bl	800386c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003972:	6869      	ldr	r1, [r5, #4]
 8003974:	4a17      	ldr	r2, [pc, #92]	; (80039d4 <pvPortMalloc+0x110>)
 8003976:	f8d2 3948 	ldr.w	r3, [r2, #2376]	; 0x948
 800397a:	1a5b      	subs	r3, r3, r1
 800397c:	f8c2 3948 	str.w	r3, [r2, #2376]	; 0x948
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003980:	f8d2 2944 	ldr.w	r2, [r2, #2372]	; 0x944
 8003984:	4293      	cmp	r3, r2
 8003986:	d202      	bcs.n	800398e <pvPortMalloc+0xca>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003988:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <pvPortMalloc+0x110>)
 800398a:	f8c2 3944 	str.w	r3, [r2, #2372]	; 0x944
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800398e:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <pvPortMalloc+0x110>)
 8003990:	f8d3 394c 	ldr.w	r3, [r3, #2380]	; 0x94c
 8003994:	430b      	orrs	r3, r1
 8003996:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800399c:	f000 fa82 	bl	8003ea4 <xTaskResumeAll>
		if( pvReturn == NULL )
 80039a0:	b19e      	cbz	r6, 80039ca <pvPortMalloc+0x106>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039a2:	f016 0f07 	tst.w	r6, #7
 80039a6:	d013      	beq.n	80039d0 <pvPortMalloc+0x10c>
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	e7fe      	b.n	80039b8 <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 80039ba:	2600      	movs	r6, #0
 80039bc:	e7ee      	b.n	800399c <pvPortMalloc+0xd8>
 80039be:	2600      	movs	r6, #0
 80039c0:	e7ec      	b.n	800399c <pvPortMalloc+0xd8>
 80039c2:	2600      	movs	r6, #0
 80039c4:	e7ea      	b.n	800399c <pvPortMalloc+0xd8>
 80039c6:	2600      	movs	r6, #0
 80039c8:	e7e8      	b.n	800399c <pvPortMalloc+0xd8>
			vApplicationMallocFailedHook();
 80039ca:	f000 fc7b 	bl	80042c4 <vApplicationMallocFailedHook>
 80039ce:	e7e8      	b.n	80039a2 <pvPortMalloc+0xde>
}
 80039d0:	4630      	mov	r0, r6
 80039d2:	bd70      	pop	{r4, r5, r6, pc}
 80039d4:	200076fc 	.word	0x200076fc

080039d8 <vPortFree>:
	if( pv != NULL )
 80039d8:	b398      	cbz	r0, 8003a42 <vPortFree+0x6a>
{
 80039da:	b538      	push	{r3, r4, r5, lr}
 80039dc:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80039de:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80039e2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80039e6:	4917      	ldr	r1, [pc, #92]	; (8003a44 <vPortFree+0x6c>)
 80039e8:	f8d1 194c 	ldr.w	r1, [r1, #2380]	; 0x94c
 80039ec:	420a      	tst	r2, r1
 80039ee:	d108      	bne.n	8003a02 <vPortFree+0x2a>
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	e7fe      	b.n	8003a00 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a02:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8003a06:	b140      	cbz	r0, 8003a1a <vPortFree+0x42>
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	e7fe      	b.n	8003a18 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a1a:	ea22 0201 	bic.w	r2, r2, r1
 8003a1e:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8003a22:	f000 f9ab 	bl	8003d7c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a26:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8003a2a:	4a06      	ldr	r2, [pc, #24]	; (8003a44 <vPortFree+0x6c>)
 8003a2c:	f8d2 3948 	ldr.w	r3, [r2, #2376]	; 0x948
 8003a30:	440b      	add	r3, r1
 8003a32:	f8c2 3948 	str.w	r3, [r2, #2376]	; 0x948
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a36:	4628      	mov	r0, r5
 8003a38:	f7ff ff18 	bl	800386c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8003a3c:	f000 fa32 	bl	8003ea4 <xTaskResumeAll>
 8003a40:	bd38      	pop	{r3, r4, r5, pc}
 8003a42:	4770      	bx	lr
 8003a44:	200076fc 	.word	0x200076fc

08003a48 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a48:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <prvResetNextTaskUnblockTime+0x28>)
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	b943      	cbnz	r3, 8003a62 <prvResetNextTaskUnblockTime+0x1a>
 8003a50:	2301      	movs	r3, #1
 8003a52:	b943      	cbnz	r3, 8003a66 <prvResetNextTaskUnblockTime+0x1e>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <prvResetNextTaskUnblockTime+0x28>)
 8003a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a58:	68d2      	ldr	r2, [r2, #12]
 8003a5a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a5c:	6852      	ldr	r2, [r2, #4]
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a60:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a62:	2300      	movs	r3, #0
 8003a64:	e7f5      	b.n	8003a52 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a66:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6a:	4b01      	ldr	r3, [pc, #4]	; (8003a70 <prvResetNextTaskUnblockTime+0x28>)
 8003a6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a6e:	4770      	bx	lr
 8003a70:	2000804c 	.word	0x2000804c

08003a74 <prvDeleteTCB>:
	{
 8003a74:	b510      	push	{r4, lr}
 8003a76:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8003a78:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003a7a:	f7ff ffad 	bl	80039d8 <vPortFree>
			vPortFree( pxTCB );
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f7ff ffaa 	bl	80039d8 <vPortFree>
 8003a84:	bd10      	pop	{r4, pc}

08003a86 <prvInitialiseNewTask>:
{
 8003a86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a8a:	4681      	mov	r9, r0
 8003a8c:	460d      	mov	r5, r1
 8003a8e:	4617      	mov	r7, r2
 8003a90:	469a      	mov	sl, r3
 8003a92:	9e08      	ldr	r6, [sp, #32]
 8003a94:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003a98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a9a:	0092      	lsls	r2, r2, #2
 8003a9c:	21a5      	movs	r1, #165	; 0xa5
 8003a9e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003aa0:	f001 f826 	bl	8004af0 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003aa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003aa6:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8003aaa:	3a01      	subs	r2, #1
 8003aac:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003ab0:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2b0f      	cmp	r3, #15
 8003ab8:	d807      	bhi.n	8003aca <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003aba:	5ce9      	ldrb	r1, [r5, r3]
 8003abc:	18e2      	adds	r2, r4, r3
 8003abe:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8003ac2:	5cea      	ldrb	r2, [r5, r3]
 8003ac4:	b10a      	cbz	r2, 8003aca <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	e7f5      	b.n	8003ab6 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003aca:	2300      	movs	r3, #0
 8003acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ad0:	2e06      	cmp	r6, #6
 8003ad2:	d900      	bls.n	8003ad6 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ad4:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8003ad6:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003ad8:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ada:	2500      	movs	r5, #0
 8003adc:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ade:	1d20      	adds	r0, r4, #4
 8003ae0:	f7ff fceb 	bl	80034ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ae4:	f104 0018 	add.w	r0, r4, #24
 8003ae8:	f7ff fce7 	bl	80034ba <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003aec:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aee:	f1c6 0607 	rsb	r6, r6, #7
 8003af2:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003af4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8003af6:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 8003af8:	6525      	str	r5, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003afa:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003afe:	4652      	mov	r2, sl
 8003b00:	4649      	mov	r1, r9
 8003b02:	4638      	mov	r0, r7
 8003b04:	f7ff fd4a 	bl	800359c <pxPortInitialiseStack>
 8003b08:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003b0a:	f1b8 0f00 	cmp.w	r8, #0
 8003b0e:	d001      	beq.n	8003b14 <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b10:	f8c8 4000 	str.w	r4, [r8]
 8003b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003b18 <prvInitialiseTaskLists>:
{
 8003b18:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b1a:	2400      	movs	r4, #0
 8003b1c:	e007      	b.n	8003b2e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b1e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003b22:	0093      	lsls	r3, r2, #2
 8003b24:	4810      	ldr	r0, [pc, #64]	; (8003b68 <prvInitialiseTaskLists+0x50>)
 8003b26:	4418      	add	r0, r3
 8003b28:	f7ff fcbc 	bl	80034a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b2c:	3401      	adds	r4, #1
 8003b2e:	2c06      	cmp	r4, #6
 8003b30:	d9f5      	bls.n	8003b1e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8003b32:	4c0e      	ldr	r4, [pc, #56]	; (8003b6c <prvInitialiseTaskLists+0x54>)
 8003b34:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
 8003b38:	4630      	mov	r0, r6
 8003b3a:	f7ff fcb3 	bl	80034a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b3e:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
 8003b42:	4628      	mov	r0, r5
 8003b44:	f7ff fcae 	bl	80034a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b48:	f104 0014 	add.w	r0, r4, #20
 8003b4c:	f7ff fcaa 	bl	80034a4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003b50:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 8003b54:	f7ff fca6 	bl	80034a4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f7ff fca3 	bl	80034a4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b5e:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b60:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
 8003b64:	bd70      	pop	{r4, r5, r6, pc}
 8003b66:	bf00      	nop
 8003b68:	2000807c 	.word	0x2000807c
 8003b6c:	2000804c 	.word	0x2000804c

08003b70 <prvAddNewTaskToReadyList>:
{
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8003b74:	f7ff fd3e 	bl	80035f4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003b78:	4b26      	ldr	r3, [pc, #152]	; (8003c14 <prvAddNewTaskToReadyList+0xa4>)
 8003b7a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8003b7e:	3201      	adds	r2, #1
 8003b80:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		if( pxCurrentTCB == NULL )
 8003b84:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d038      	beq.n	8003bfe <prvAddNewTaskToReadyList+0x8e>
			if( xSchedulerRunning == pdFALSE )
 8003b8c:	4b21      	ldr	r3, [pc, #132]	; (8003c14 <prvAddNewTaskToReadyList+0xa4>)
 8003b8e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003b92:	b94b      	cbnz	r3, 8003ba8 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b94:	4b1f      	ldr	r3, [pc, #124]	; (8003c14 <prvAddNewTaskToReadyList+0xa4>)
 8003b96:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d802      	bhi.n	8003ba8 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8003ba2:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <prvAddNewTaskToReadyList+0xa4>)
 8003ba4:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		uxTaskNumber++;
 8003ba8:	4c1a      	ldr	r4, [pc, #104]	; (8003c14 <prvAddNewTaskToReadyList+0xa4>)
 8003baa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		prvAddTaskToReadyList( pxNewTCB );
 8003bb4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 8003bc4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003bc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003bcc:	009a      	lsls	r2, r3, #2
 8003bce:	1d29      	adds	r1, r5, #4
 8003bd0:	4410      	add	r0, r2
 8003bd2:	f7ff fc75 	bl	80034c0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003bd6:	f7ff fd2f 	bl	8003638 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003bda:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003bde:	b16b      	cbz	r3, 8003bfc <prvAddNewTaskToReadyList+0x8c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003be0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d207      	bcs.n	8003bfc <prvAddNewTaskToReadyList+0x8c>
			taskYIELD_IF_USING_PREEMPTION();
 8003bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <prvAddNewTaskToReadyList+0xa8>)
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	bd38      	pop	{r3, r4, r5, pc}
			pxCurrentTCB = pxNewTCB;
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <prvAddNewTaskToReadyList+0xa4>)
 8003c00:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c04:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d1cd      	bne.n	8003ba8 <prvAddNewTaskToReadyList+0x38>
				prvInitialiseTaskLists();
 8003c0c:	f7ff ff84 	bl	8003b18 <prvInitialiseTaskLists>
 8003c10:	e7ca      	b.n	8003ba8 <prvAddNewTaskToReadyList+0x38>
 8003c12:	bf00      	nop
 8003c14:	2000804c 	.word	0x2000804c
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	4604      	mov	r4, r0
 8003c20:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c22:	4b1f      	ldr	r3, [pc, #124]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0x84>)
 8003c24:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c28:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8003c2c:	3004      	adds	r0, #4
 8003c2e:	f7ff fc6d 	bl	800350c <uxListRemove>
 8003c32:	b960      	cbnz	r0, 8003c4e <prvAddCurrentTaskToDelayedList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003c34:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0x84>)
 8003c36:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003c3a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	fa02 f101 	lsl.w	r1, r2, r1
 8003c42:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003c46:	ea22 0201 	bic.w	r2, r2, r1
 8003c4a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c4e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003c52:	d012      	beq.n	8003c7a <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c54:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c56:	4b12      	ldr	r3, [pc, #72]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0x84>)
 8003c58:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003c5c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8003c5e:	42a5      	cmp	r5, r4
 8003c60:	d814      	bhi.n	8003c8c <prvAddCurrentTaskToDelayedList+0x70>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c62:	4d0f      	ldr	r5, [pc, #60]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0x84>)
 8003c64:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003c66:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8003c6a:	3104      	adds	r1, #4
 8003c6c:	f7ff fc34 	bl	80034d8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c70:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003c72:	429c      	cmp	r4, r3
 8003c74:	d200      	bcs.n	8003c78 <prvAddCurrentTaskToDelayedList+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8003c76:	62ec      	str	r4, [r5, #44]	; 0x2c
 8003c78:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c7a:	2e00      	cmp	r6, #0
 8003c7c:	d0ea      	beq.n	8003c54 <prvAddCurrentTaskToDelayedList+0x38>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c7e:	4808      	ldr	r0, [pc, #32]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0x84>)
 8003c80:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003c84:	3104      	adds	r1, #4
 8003c86:	f7ff fc1b 	bl	80034c0 <vListInsertEnd>
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0x84>)
 8003c8e:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8003c92:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8003c96:	3104      	adds	r1, #4
 8003c98:	f7ff fc1e 	bl	80034d8 <vListInsert>
 8003c9c:	bd70      	pop	{r4, r5, r6, pc}
 8003c9e:	bf00      	nop
 8003ca0:	2000804c 	.word	0x2000804c

08003ca4 <xTaskCreate>:
	{
 8003ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	4606      	mov	r6, r0
 8003cac:	460f      	mov	r7, r1
 8003cae:	4615      	mov	r5, r2
 8003cb0:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cb2:	0090      	lsls	r0, r2, #2
 8003cb4:	f7ff fe06 	bl	80038c4 <pvPortMalloc>
			if( pxStack != NULL )
 8003cb8:	b300      	cbz	r0, 8003cfc <xTaskCreate+0x58>
 8003cba:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003cbc:	2058      	movs	r0, #88	; 0x58
 8003cbe:	f7ff fe01 	bl	80038c4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	b1b0      	cbz	r0, 8003cf4 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8003cc6:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8003cca:	b1cc      	cbz	r4, 8003d00 <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ccc:	2300      	movs	r3, #0
 8003cce:	9303      	str	r3, [sp, #12]
 8003cd0:	9402      	str	r4, [sp, #8]
 8003cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cd4:	9301      	str	r3, [sp, #4]
 8003cd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	4643      	mov	r3, r8
 8003cdc:	462a      	mov	r2, r5
 8003cde:	4639      	mov	r1, r7
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	f7ff fed0 	bl	8003a86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f7ff ff42 	bl	8003b70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cec:	2001      	movs	r0, #1
	}
 8003cee:	b005      	add	sp, #20
 8003cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8003cf4:	4648      	mov	r0, r9
 8003cf6:	f7ff fe6f 	bl	80039d8 <vPortFree>
 8003cfa:	e7e6      	b.n	8003cca <xTaskCreate+0x26>
				pxNewTCB = NULL;
 8003cfc:	2400      	movs	r4, #0
 8003cfe:	e7e4      	b.n	8003cca <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d00:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8003d04:	e7f3      	b.n	8003cee <xTaskCreate+0x4a>
	...

08003d08 <vTaskStartScheduler>:
{
 8003d08:	b500      	push	{lr}
 8003d0a:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8003d0c:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <vTaskStartScheduler+0x64>)
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	2300      	movs	r3, #0
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2280      	movs	r2, #128	; 0x80
 8003d16:	4916      	ldr	r1, [pc, #88]	; (8003d70 <vTaskStartScheduler+0x68>)
 8003d18:	4816      	ldr	r0, [pc, #88]	; (8003d74 <vTaskStartScheduler+0x6c>)
 8003d1a:	f7ff ffc3 	bl	8003ca4 <xTaskCreate>
	if( xReturn == pdPASS )
 8003d1e:	2801      	cmp	r0, #1
 8003d20:	d005      	beq.n	8003d2e <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d22:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d26:	d017      	beq.n	8003d58 <vTaskStartScheduler+0x50>
}
 8003d28:	b003      	add	sp, #12
 8003d2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <vTaskStartScheduler+0x70>)
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295
 8003d44:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 8003d46:	2201      	movs	r2, #1
 8003d48:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		xTickCount = ( TickType_t ) 0U;
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		if( xPortStartScheduler() != pdFALSE )
 8003d52:	f7ff fceb 	bl	800372c <xPortStartScheduler>
 8003d56:	e7e7      	b.n	8003d28 <vTaskStartScheduler+0x20>
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	e7fe      	b.n	8003d68 <vTaskStartScheduler+0x60>
 8003d6a:	bf00      	nop
 8003d6c:	20008168 	.word	0x20008168
 8003d70:	08004d40 	.word	0x08004d40
 8003d74:	0800403d 	.word	0x0800403d
 8003d78:	2000804c 	.word	0x2000804c

08003d7c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003d7c:	4a03      	ldr	r2, [pc, #12]	; (8003d8c <vTaskSuspendAll+0x10>)
 8003d7e:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 8003d82:	3301      	adds	r3, #1
 8003d84:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	2000804c 	.word	0x2000804c

08003d90 <xTaskIncrementTick>:
{
 8003d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d94:	4b42      	ldr	r3, [pc, #264]	; (8003ea0 <xTaskIncrementTick+0x110>)
 8003d96:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d170      	bne.n	8003e80 <xTaskIncrementTick+0xf0>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003d9e:	4b40      	ldr	r3, [pc, #256]	; (8003ea0 <xTaskIncrementTick+0x110>)
 8003da0:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
 8003da4:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8003da6:	f8c3 5110 	str.w	r5, [r3, #272]	; 0x110
		if( xConstTickCount == ( TickType_t ) 0U )
 8003daa:	b9cd      	cbnz	r5, 8003de0 <xTaskIncrementTick+0x50>
			taskSWITCH_DELAYED_LISTS();
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	b143      	cbz	r3, 8003dc4 <xTaskIncrementTick+0x34>
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	e7fe      	b.n	8003dc2 <xTaskIncrementTick+0x32>
 8003dc4:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <xTaskIncrementTick+0x110>)
 8003dc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dc8:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 8003dcc:	6299      	str	r1, [r3, #40]	; 0x28
 8003dce:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8003dd2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8003dd6:	3201      	adds	r2, #1
 8003dd8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8003ddc:	f7ff fe34 	bl	8003a48 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003de0:	4b2f      	ldr	r3, [pc, #188]	; (8003ea0 <xTaskIncrementTick+0x110>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	429d      	cmp	r5, r3
 8003de6:	d23f      	bcs.n	8003e68 <xTaskIncrementTick+0xd8>
BaseType_t xSwitchRequired = pdFALSE;
 8003de8:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003dea:	4a2d      	ldr	r2, [pc, #180]	; (8003ea0 <xTaskIncrementTick+0x110>)
 8003dec:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003df6:	0099      	lsls	r1, r3, #2
 8003df8:	440a      	add	r2, r1
 8003dfa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d946      	bls.n	8003e8e <xTaskIncrementTick+0xfe>
				xSwitchRequired = pdTRUE;
 8003e00:	2401      	movs	r4, #1
 8003e02:	e044      	b.n	8003e8e <xTaskIncrementTick+0xfe>
							xSwitchRequired = pdTRUE;
 8003e04:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e06:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <xTaskIncrementTick+0x110>)
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	b373      	cbz	r3, 8003e6c <xTaskIncrementTick+0xdc>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	bb73      	cbnz	r3, 8003e70 <xTaskIncrementTick+0xe0>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e12:	4b23      	ldr	r3, [pc, #140]	; (8003ea0 <xTaskIncrementTick+0x110>)
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e1a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003e1c:	429d      	cmp	r5, r3
 8003e1e:	d32c      	bcc.n	8003e7a <xTaskIncrementTick+0xea>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e20:	f106 0804 	add.w	r8, r6, #4
 8003e24:	4640      	mov	r0, r8
 8003e26:	f7ff fb71 	bl	800350c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e2a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003e2c:	b11b      	cbz	r3, 8003e36 <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e2e:	f106 0018 	add.w	r0, r6, #24
 8003e32:	f7ff fb6b 	bl	800350c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e36:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003e38:	2201      	movs	r2, #1
 8003e3a:	409a      	lsls	r2, r3
 8003e3c:	4f18      	ldr	r7, [pc, #96]	; (8003ea0 <xTaskIncrementTick+0x110>)
 8003e3e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8003e42:	430a      	orrs	r2, r1
 8003e44:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003e48:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003e4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003e50:	009a      	lsls	r2, r3, #2
 8003e52:	4641      	mov	r1, r8
 8003e54:	4410      	add	r0, r2
 8003e56:	f7ff fb33 	bl	80034c0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e5a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003e5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d2ce      	bcs.n	8003e04 <xTaskIncrementTick+0x74>
 8003e66:	e7ce      	b.n	8003e06 <xTaskIncrementTick+0x76>
 8003e68:	2400      	movs	r4, #0
 8003e6a:	e7cc      	b.n	8003e06 <xTaskIncrementTick+0x76>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e7cf      	b.n	8003e10 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e70:	f04f 32ff 	mov.w	r2, #4294967295
 8003e74:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <xTaskIncrementTick+0x110>)
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 8003e78:	e7b7      	b.n	8003dea <xTaskIncrementTick+0x5a>
						xNextTaskUnblockTime = xItemValue;
 8003e7a:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <xTaskIncrementTick+0x110>)
 8003e7c:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
 8003e7e:	e7b4      	b.n	8003dea <xTaskIncrementTick+0x5a>
		++uxPendedTicks;
 8003e80:	4a07      	ldr	r2, [pc, #28]	; (8003ea0 <xTaskIncrementTick+0x110>)
 8003e82:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
 8003e86:	3301      	adds	r3, #1
 8003e88:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
BaseType_t xSwitchRequired = pdFALSE;
 8003e8c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8003e8e:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <xTaskIncrementTick+0x110>)
 8003e90:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8003e94:	b103      	cbz	r3, 8003e98 <xTaskIncrementTick+0x108>
			xSwitchRequired = pdTRUE;
 8003e96:	2401      	movs	r4, #1
}
 8003e98:	4620      	mov	r0, r4
 8003e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e9e:	bf00      	nop
 8003ea0:	2000804c 	.word	0x2000804c

08003ea4 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8003ea4:	4b3a      	ldr	r3, [pc, #232]	; (8003f90 <xTaskResumeAll+0xec>)
 8003ea6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003eaa:	b943      	cbnz	r3, 8003ebe <xTaskResumeAll+0x1a>
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	e7fe      	b.n	8003ebc <xTaskResumeAll+0x18>
{
 8003ebe:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 8003ec0:	f7ff fb98 	bl	80035f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003ec4:	4b32      	ldr	r3, [pc, #200]	; (8003f90 <xTaskResumeAll+0xec>)
 8003ec6:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8003eca:	3a01      	subs	r2, #1
 8003ecc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ed0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d157      	bne.n	8003f88 <xTaskResumeAll+0xe4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ed8:	4b2d      	ldr	r3, [pc, #180]	; (8003f90 <xTaskResumeAll+0xec>)
 8003eda:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003ede:	b923      	cbnz	r3, 8003eea <xTaskResumeAll+0x46>
BaseType_t xAlreadyYielded = pdFALSE;
 8003ee0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003ee2:	f7ff fba9 	bl	8003638 <vPortExitCritical>
}
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	bd70      	pop	{r4, r5, r6, pc}
 8003eea:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eec:	4b28      	ldr	r3, [pc, #160]	; (8003f90 <xTaskResumeAll+0xec>)
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	b32b      	cbz	r3, 8003f3e <xTaskResumeAll+0x9a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003ef2:	4d27      	ldr	r5, [pc, #156]	; (8003f90 <xTaskResumeAll+0xec>)
 8003ef4:	6a2b      	ldr	r3, [r5, #32]
 8003ef6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ef8:	f104 0018 	add.w	r0, r4, #24
 8003efc:	f7ff fb06 	bl	800350c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f00:	1d26      	adds	r6, r4, #4
 8003f02:	4630      	mov	r0, r6
 8003f04:	f7ff fb02 	bl	800350c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
 8003f12:	430a      	orrs	r2, r1
 8003f14:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
 8003f18:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8003f1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f20:	009a      	lsls	r2, r3, #2
 8003f22:	4631      	mov	r1, r6
 8003f24:	4410      	add	r0, r2
 8003f26:	f7ff facb 	bl	80034c0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f2c:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d3da      	bcc.n	8003eec <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8003f36:	2201      	movs	r2, #1
 8003f38:	f8c5 2128 	str.w	r2, [r5, #296]	; 0x128
 8003f3c:	e7d6      	b.n	8003eec <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8003f3e:	b10c      	cbz	r4, 8003f44 <xTaskResumeAll+0xa0>
					prvResetNextTaskUnblockTime();
 8003f40:	f7ff fd82 	bl	8003a48 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f44:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <xTaskResumeAll+0xec>)
 8003f46:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f4a:	b97c      	cbnz	r4, 8003f6c <xTaskResumeAll+0xc8>
				if( xYieldPending != pdFALSE )
 8003f4c:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <xTaskResumeAll+0xec>)
 8003f4e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8003f52:	b1db      	cbz	r3, 8003f8c <xTaskResumeAll+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
 8003f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f58:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <xTaskResumeAll+0xf0>)
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003f64:	2401      	movs	r4, #1
 8003f66:	e7bc      	b.n	8003ee2 <xTaskResumeAll+0x3e>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f68:	3c01      	subs	r4, #1
 8003f6a:	d008      	beq.n	8003f7e <xTaskResumeAll+0xda>
							if( xTaskIncrementTick() != pdFALSE )
 8003f6c:	f7ff ff10 	bl	8003d90 <xTaskIncrementTick>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d0f9      	beq.n	8003f68 <xTaskResumeAll+0xc4>
								xYieldPending = pdTRUE;
 8003f74:	2201      	movs	r2, #1
 8003f76:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <xTaskResumeAll+0xec>)
 8003f78:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 8003f7c:	e7f4      	b.n	8003f68 <xTaskResumeAll+0xc4>
						uxPendedTicks = 0;
 8003f7e:	2200      	movs	r2, #0
 8003f80:	4b03      	ldr	r3, [pc, #12]	; (8003f90 <xTaskResumeAll+0xec>)
 8003f82:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8003f86:	e7e1      	b.n	8003f4c <xTaskResumeAll+0xa8>
BaseType_t xAlreadyYielded = pdFALSE;
 8003f88:	2400      	movs	r4, #0
 8003f8a:	e7aa      	b.n	8003ee2 <xTaskResumeAll+0x3e>
 8003f8c:	2400      	movs	r4, #0
 8003f8e:	e7a8      	b.n	8003ee2 <xTaskResumeAll+0x3e>
 8003f90:	2000804c 	.word	0x2000804c
 8003f94:	e000ed04 	.word	0xe000ed04

08003f98 <vTaskDelay>:
	{
 8003f98:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f9a:	b1b0      	cbz	r0, 8003fca <vTaskDelay+0x32>
 8003f9c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8003f9e:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <vTaskDelay+0x48>)
 8003fa0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003fa4:	b143      	cbz	r3, 8003fb8 <vTaskDelay+0x20>
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	e7fe      	b.n	8003fb6 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8003fb8:	f7ff fee0 	bl	8003d7c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f7ff fe2c 	bl	8003c1c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003fc4:	f7ff ff6e 	bl	8003ea4 <xTaskResumeAll>
 8003fc8:	e000      	b.n	8003fcc <vTaskDelay+0x34>
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fca:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8003fcc:	b938      	cbnz	r0, 8003fde <vTaskDelay+0x46>
			portYIELD_WITHIN_API();
 8003fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd2:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <vTaskDelay+0x4c>)
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	bd10      	pop	{r4, pc}
 8003fe0:	2000804c 	.word	0x2000804c
 8003fe4:	e000ed04 	.word	0xe000ed04

08003fe8 <prvCheckTasksWaitingTermination>:
{
 8003fe8:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fea:	4b13      	ldr	r3, [pc, #76]	; (8004038 <prvCheckTasksWaitingTermination+0x50>)
 8003fec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003ff0:	b30b      	cbz	r3, 8004036 <prvCheckTasksWaitingTermination+0x4e>
			vTaskSuspendAll();
 8003ff2:	f7ff fec3 	bl	8003d7c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003ff6:	4b10      	ldr	r3, [pc, #64]	; (8004038 <prvCheckTasksWaitingTermination+0x50>)
 8003ff8:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
			( void ) xTaskResumeAll();
 8003ffc:	f7ff ff52 	bl	8003ea4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8004000:	2c00      	cmp	r4, #0
 8004002:	d0f2      	beq.n	8003fea <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
 8004004:	f7ff faf6 	bl	80035f4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004008:	4c0b      	ldr	r4, [pc, #44]	; (8004038 <prvCheckTasksWaitingTermination+0x50>)
 800400a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800400e:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004010:	1d28      	adds	r0, r5, #4
 8004012:	f7ff fa7b 	bl	800350c <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004016:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800401a:	3b01      	subs	r3, #1
 800401c:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
					--uxDeletedTasksWaitingCleanUp;
 8004020:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8004024:	3b01      	subs	r3, #1
 8004026:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
				taskEXIT_CRITICAL();
 800402a:	f7ff fb05 	bl	8003638 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 800402e:	4628      	mov	r0, r5
 8004030:	f7ff fd20 	bl	8003a74 <prvDeleteTCB>
 8004034:	e7d9      	b.n	8003fea <prvCheckTasksWaitingTermination+0x2>
}
 8004036:	bd38      	pop	{r3, r4, r5, pc}
 8004038:	2000804c 	.word	0x2000804c

0800403c <prvIdleTask>:
{
 800403c:	b508      	push	{r3, lr}
 800403e:	e001      	b.n	8004044 <prvIdleTask+0x8>
			vApplicationIdleHook();
 8004040:	f000 f93e 	bl	80042c0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004044:	f7ff ffd0 	bl	8003fe8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <prvIdleTask+0x28>)
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	2b01      	cmp	r3, #1
 800404e:	d9f7      	bls.n	8004040 <prvIdleTask+0x4>
				taskYIELD();
 8004050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <prvIdleTask+0x2c>)
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	e7ee      	b.n	8004040 <prvIdleTask+0x4>
 8004062:	bf00      	nop
 8004064:	2000804c 	.word	0x2000804c
 8004068:	e000ed04 	.word	0xe000ed04

0800406c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800406c:	4b2f      	ldr	r3, [pc, #188]	; (800412c <vTaskSwitchContext+0xc0>)
 800406e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004072:	bb73      	cbnz	r3, 80040d2 <vTaskSwitchContext+0x66>
{
 8004074:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 8004076:	4b2d      	ldr	r3, [pc, #180]	; (800412c <vTaskSwitchContext+0xc0>)
 8004078:	2200      	movs	r2, #0
 800407a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		taskCHECK_FOR_STACK_OVERFLOW();
 800407e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800408a:	d103      	bne.n	8004094 <vTaskSwitchContext+0x28>
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8004092:	d023      	beq.n	80040dc <vTaskSwitchContext+0x70>
 8004094:	4b25      	ldr	r3, [pc, #148]	; (800412c <vTaskSwitchContext+0xc0>)
 8004096:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 800409a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 800409e:	3134      	adds	r1, #52	; 0x34
 80040a0:	f000 f90f 	bl	80042c2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80040a4:	4a21      	ldr	r2, [pc, #132]	; (800412c <vTaskSwitchContext+0xc0>)
 80040a6:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80040aa:	fab3 f383 	clz	r3, r3
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f1c3 031f 	rsb	r3, r3, #31
 80040b4:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80040b8:	0081      	lsls	r1, r0, #2
 80040ba:	440a      	add	r2, r1
 80040bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040be:	b9b2      	cbnz	r2, 80040ee <vTaskSwitchContext+0x82>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	e7fe      	b.n	80040d0 <vTaskSwitchContext+0x64>
		xYieldPending = pdTRUE;
 80040d2:	2201      	movs	r2, #1
 80040d4:	4b15      	ldr	r3, [pc, #84]	; (800412c <vTaskSwitchContext+0xc0>)
 80040d6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 80040da:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80040e2:	d1d7      	bne.n	8004094 <vTaskSwitchContext+0x28>
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 80040ea:	d1d3      	bne.n	8004094 <vTaskSwitchContext+0x28>
 80040ec:	e7da      	b.n	80040a4 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80040ee:	4a0f      	ldr	r2, [pc, #60]	; (800412c <vTaskSwitchContext+0xc0>)
 80040f0:	0099      	lsls	r1, r3, #2
 80040f2:	18cc      	adds	r4, r1, r3
 80040f4:	00a0      	lsls	r0, r4, #2
 80040f6:	4410      	add	r0, r2
 80040f8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80040fa:	6864      	ldr	r4, [r4, #4]
 80040fc:	6344      	str	r4, [r0, #52]	; 0x34
 80040fe:	3230      	adds	r2, #48	; 0x30
 8004100:	4419      	add	r1, r3
 8004102:	0088      	lsls	r0, r1, #2
 8004104:	4601      	mov	r1, r0
 8004106:	3008      	adds	r0, #8
 8004108:	4402      	add	r2, r0
 800410a:	4294      	cmp	r4, r2
 800410c:	d009      	beq.n	8004122 <vTaskSwitchContext+0xb6>
 800410e:	4907      	ldr	r1, [pc, #28]	; (800412c <vTaskSwitchContext+0xc0>)
 8004110:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004114:	009a      	lsls	r2, r3, #2
 8004116:	440a      	add	r2, r1
 8004118:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
 8004120:	bd10      	pop	{r4, pc}
 8004122:	6860      	ldr	r0, [r4, #4]
 8004124:	4a01      	ldr	r2, [pc, #4]	; (800412c <vTaskSwitchContext+0xc0>)
 8004126:	440a      	add	r2, r1
 8004128:	6350      	str	r0, [r2, #52]	; 0x34
 800412a:	e7f0      	b.n	800410e <vTaskSwitchContext+0xa2>
 800412c:	2000804c 	.word	0x2000804c

08004130 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <xTaskGetSchedulerState+0x1c>)
 8004132:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004136:	b12b      	cbz	r3, 8004144 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004138:	4b04      	ldr	r3, [pc, #16]	; (800414c <xTaskGetSchedulerState+0x1c>)
 800413a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800413e:	b91b      	cbnz	r3, 8004148 <xTaskGetSchedulerState+0x18>
				xReturn = taskSCHEDULER_RUNNING;
 8004140:	2002      	movs	r0, #2
 8004142:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004144:	2001      	movs	r0, #1
 8004146:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 8004148:	2000      	movs	r0, #0
	}
 800414a:	4770      	bx	lr
 800414c:	2000804c 	.word	0x2000804c

08004150 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8004150:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 8004152:	4806      	ldr	r0, [pc, #24]	; (800416c <MX_CRC_Init+0x1c>)
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <MX_CRC_Init+0x20>)
 8004156:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004158:	f7fc fab2 	bl	80006c0 <HAL_CRC_Init>
 800415c:	b900      	cbnz	r0, 8004160 <MX_CRC_Init+0x10>
 800415e:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8004160:	2142      	movs	r1, #66	; 0x42
 8004162:	4804      	ldr	r0, [pc, #16]	; (8004174 <MX_CRC_Init+0x24>)
 8004164:	f000 fa0e 	bl	8004584 <_Error_Handler>
  }

}
 8004168:	e7f9      	b.n	800415e <MX_CRC_Init+0xe>
 800416a:	bf00      	nop
 800416c:	2000817c 	.word	0x2000817c
 8004170:	40023000 	.word	0x40023000
 8004174:	08004d48 	.word	0x08004d48

08004178 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8004178:	6802      	ldr	r2, [r0, #0]
 800417a:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <HAL_CRC_MspInit+0x28>)
 800417c:	429a      	cmp	r2, r3
 800417e:	d000      	beq.n	8004182 <HAL_CRC_MspInit+0xa>
    __HAL_RCC_CRC_CLK_ENABLE();
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8004180:	4770      	bx	lr
{
 8004182:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8004184:	2300      	movs	r3, #0
 8004186:	9301      	str	r3, [sp, #4]
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <HAL_CRC_MspInit+0x2c>)
 800418a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800418c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	9b01      	ldr	r3, [sp, #4]
}
 800419c:	b002      	add	sp, #8
 800419e:	e7ef      	b.n	8004180 <HAL_CRC_MspInit+0x8>
 80041a0:	40023000 	.word	0x40023000
 80041a4:	40023800 	.word	0x40023800

080041a8 <StartDefaultTask>:
  /* USER CODE END RTOS_QUEUES */
}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 80041a8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80041aa:	2001      	movs	r0, #1
 80041ac:	f7ff f969 	bl	8003482 <osDelay>
 80041b0:	e7fb      	b.n	80041aa <StartDefaultTask+0x2>
	...

080041b4 <LED_Blink_Entry>:
  /* USER CODE END StartDefaultTask */
}

/* LED_Blink_Entry function */
void LED_Blink_Entry(void const * argument)
{
 80041b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LED_Blink_Entry */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80041b6:	4e15      	ldr	r6, [pc, #84]	; (800420c <LED_Blink_Entry+0x58>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	2130      	movs	r1, #48	; 0x30
 80041bc:	4630      	mov	r0, r6
 80041be:	f7fc fd53 	bl	8000c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80041c2:	4d13      	ldr	r5, [pc, #76]	; (8004210 <LED_Blink_Entry+0x5c>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	2108      	movs	r1, #8
 80041c8:	4628      	mov	r0, r5
 80041ca:	f7fc fd4d 	bl	8000c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80041ce:	4c11      	ldr	r4, [pc, #68]	; (8004214 <LED_Blink_Entry+0x60>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	2140      	movs	r1, #64	; 0x40
 80041d4:	4620      	mov	r0, r4
 80041d6:	f7fc fd47 	bl	8000c68 <HAL_GPIO_WritePin>
    osDelay(1000);
 80041da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041de:	f7ff f950 	bl	8003482 <osDelay>
	HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_SET);
 80041e2:	2201      	movs	r2, #1
 80041e4:	2130      	movs	r1, #48	; 0x30
 80041e6:	4630      	mov	r0, r6
 80041e8:	f7fc fd3e 	bl	8000c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80041ec:	2201      	movs	r2, #1
 80041ee:	2108      	movs	r1, #8
 80041f0:	4628      	mov	r0, r5
 80041f2:	f7fc fd39 	bl	8000c68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80041f6:	2201      	movs	r2, #1
 80041f8:	2140      	movs	r1, #64	; 0x40
 80041fa:	4620      	mov	r0, r4
 80041fc:	f7fc fd34 	bl	8000c68 <HAL_GPIO_WritePin>
	osDelay(1000);
 8004200:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004204:	f7ff f93d 	bl	8003482 <osDelay>
 8004208:	e7d5      	b.n	80041b6 <LED_Blink_Entry+0x2>
 800420a:	bf00      	nop
 800420c:	40020c00 	.word	0x40020c00
 8004210:	40022800 	.word	0x40022800
 8004214:	40021800 	.word	0x40021800

08004218 <LED_BLink2_Entry>:
  /* USER CODE END LED_Blink_Entry */
}

/* USER CODE BEGIN Application */
void LED_BLink2_Entry(void const * argument)
{
 8004218:	b508      	push	{r3, lr}
	  for(;;)
	  {
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800421a:	4d26      	ldr	r5, [pc, #152]	; (80042b4 <LED_BLink2_Entry+0x9c>)
 800421c:	2200      	movs	r2, #0
 800421e:	2140      	movs	r1, #64	; 0x40
 8004220:	4628      	mov	r0, r5
 8004222:	f7fc fd21 	bl	8000c68 <HAL_GPIO_WritePin>
		osDelay(300);
 8004226:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800422a:	f7ff f92a 	bl	8003482 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LED2_Pin, GPIO_PIN_RESET);
 800422e:	4c22      	ldr	r4, [pc, #136]	; (80042b8 <LED_BLink2_Entry+0xa0>)
 8004230:	2200      	movs	r2, #0
 8004232:	2110      	movs	r1, #16
 8004234:	4620      	mov	r0, r4
 8004236:	f7fc fd17 	bl	8000c68 <HAL_GPIO_WritePin>
		osDelay(300);
 800423a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800423e:	f7ff f920 	bl	8003482 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LED3_Pin, GPIO_PIN_RESET);
 8004242:	2200      	movs	r2, #0
 8004244:	2120      	movs	r1, #32
 8004246:	4620      	mov	r0, r4
 8004248:	f7fc fd0e 	bl	8000c68 <HAL_GPIO_WritePin>
		osDelay(300);
 800424c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004250:	f7ff f917 	bl	8003482 <osDelay>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8004254:	4e19      	ldr	r6, [pc, #100]	; (80042bc <LED_BLink2_Entry+0xa4>)
 8004256:	2200      	movs	r2, #0
 8004258:	2108      	movs	r1, #8
 800425a:	4630      	mov	r0, r6
 800425c:	f7fc fd04 	bl	8000c68 <HAL_GPIO_WritePin>
		osDelay(300);
 8004260:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004264:	f7ff f90d 	bl	8003482 <osDelay>

		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8004268:	2201      	movs	r2, #1
 800426a:	2108      	movs	r1, #8
 800426c:	4630      	mov	r0, r6
 800426e:	f7fc fcfb 	bl	8000c68 <HAL_GPIO_WritePin>
		osDelay(300);
 8004272:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004276:	f7ff f904 	bl	8003482 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LED3_Pin, GPIO_PIN_SET);
 800427a:	2201      	movs	r2, #1
 800427c:	2120      	movs	r1, #32
 800427e:	4620      	mov	r0, r4
 8004280:	f7fc fcf2 	bl	8000c68 <HAL_GPIO_WritePin>
		osDelay(300);
 8004284:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004288:	f7ff f8fb 	bl	8003482 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LED2_Pin, GPIO_PIN_SET);
 800428c:	2201      	movs	r2, #1
 800428e:	2110      	movs	r1, #16
 8004290:	4620      	mov	r0, r4
 8004292:	f7fc fce9 	bl	8000c68 <HAL_GPIO_WritePin>
		osDelay(300);
 8004296:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800429a:	f7ff f8f2 	bl	8003482 <osDelay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800429e:	2201      	movs	r2, #1
 80042a0:	2140      	movs	r1, #64	; 0x40
 80042a2:	4628      	mov	r0, r5
 80042a4:	f7fc fce0 	bl	8000c68 <HAL_GPIO_WritePin>
		osDelay(300);
 80042a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80042ac:	f7ff f8e9 	bl	8003482 <osDelay>
 80042b0:	e7b3      	b.n	800421a <LED_BLink2_Entry+0x2>
 80042b2:	bf00      	nop
 80042b4:	40021800 	.word	0x40021800
 80042b8:	40020c00 	.word	0x40020c00
 80042bc:	40022800 	.word	0x40022800

080042c0 <vApplicationIdleHook>:
{
 80042c0:	4770      	bx	lr

080042c2 <vApplicationStackOverflowHook>:
{
 80042c2:	4770      	bx	lr

080042c4 <vApplicationMallocFailedHook>:
{
 80042c4:	4770      	bx	lr
	...

080042c8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	b090      	sub	sp, #64	; 0x40
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80042cc:	4c13      	ldr	r4, [pc, #76]	; (800431c <MX_FREERTOS_Init+0x54>)
 80042ce:	ad0b      	add	r5, sp, #44	; 0x2c
 80042d0:	4626      	mov	r6, r4
 80042d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80042d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042d6:	6833      	ldr	r3, [r6, #0]
 80042d8:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80042da:	2100      	movs	r1, #0
 80042dc:	a80b      	add	r0, sp, #44	; 0x2c
 80042de:	f7ff f8b6 	bl	800344e <osThreadCreate>
 80042e2:	4b0f      	ldr	r3, [pc, #60]	; (8004320 <MX_FREERTOS_Init+0x58>)
 80042e4:	6018      	str	r0, [r3, #0]
  osThreadDef(LED_Blink, LED_Blink_Entry, osPriorityAboveNormal, 1, 512);
 80042e6:	ad06      	add	r5, sp, #24
 80042e8:	f104 0614 	add.w	r6, r4, #20
 80042ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80042ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042f0:	6833      	ldr	r3, [r6, #0]
 80042f2:	602b      	str	r3, [r5, #0]
  LED_BlinkHandle = osThreadCreate(osThread(LED_Blink), NULL);
 80042f4:	2100      	movs	r1, #0
 80042f6:	a806      	add	r0, sp, #24
 80042f8:	f7ff f8a9 	bl	800344e <osThreadCreate>
 80042fc:	4b09      	ldr	r3, [pc, #36]	; (8004324 <MX_FREERTOS_Init+0x5c>)
 80042fe:	6018      	str	r0, [r3, #0]
  osThreadDef(LED_Blink2, LED_BLink2_Entry, osPriorityAboveNormal, 2, 1024);
 8004300:	ad01      	add	r5, sp, #4
 8004302:	3428      	adds	r4, #40	; 0x28
 8004304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	602b      	str	r3, [r5, #0]
  LED_Blink2_Handle = osThreadCreate(osThread(LED_Blink2), NULL);
 800430c:	2100      	movs	r1, #0
 800430e:	a801      	add	r0, sp, #4
 8004310:	f7ff f89d 	bl	800344e <osThreadCreate>
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <MX_FREERTOS_Init+0x60>)
 8004316:	6018      	str	r0, [r3, #0]
}
 8004318:	b010      	add	sp, #64	; 0x40
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	08004b18 	.word	0x08004b18
 8004320:	200081e0 	.word	0x200081e0
 8004324:	200081e4 	.word	0x200081e4
 8004328:	200081e8 	.word	0x200081e8

0800432c <MX_GPIO_Init>:
        * EXTI
     PB3   ------> I2S3_CK
     PD13   ------> S_TIM4_CH2
*/
void MX_GPIO_Init(void)
{
 800432c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004330:	b091      	sub	sp, #68	; 0x44

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004332:	2400      	movs	r4, #0
 8004334:	9400      	str	r4, [sp, #0]
 8004336:	4b89      	ldr	r3, [pc, #548]	; (800455c <MX_GPIO_Init+0x230>)
 8004338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800433a:	f042 0210 	orr.w	r2, r2, #16
 800433e:	631a      	str	r2, [r3, #48]	; 0x30
 8004340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004342:	f002 0210 	and.w	r2, r2, #16
 8004346:	9200      	str	r2, [sp, #0]
 8004348:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800434a:	9401      	str	r4, [sp, #4]
 800434c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800434e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004352:	631a      	str	r2, [r3, #48]	; 0x30
 8004354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004356:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800435a:	9201      	str	r2, [sp, #4]
 800435c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800435e:	9402      	str	r4, [sp, #8]
 8004360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004362:	f042 0202 	orr.w	r2, r2, #2
 8004366:	631a      	str	r2, [r3, #48]	; 0x30
 8004368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436a:	f002 0202 	and.w	r2, r2, #2
 800436e:	9202      	str	r2, [sp, #8]
 8004370:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004372:	9403      	str	r4, [sp, #12]
 8004374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004376:	f042 0204 	orr.w	r2, r2, #4
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
 800437c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800437e:	f002 0204 	and.w	r2, r2, #4
 8004382:	9203      	str	r2, [sp, #12]
 8004384:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004386:	9404      	str	r4, [sp, #16]
 8004388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
 8004390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004392:	f002 0201 	and.w	r2, r2, #1
 8004396:	9204      	str	r2, [sp, #16]
 8004398:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800439a:	9405      	str	r4, [sp, #20]
 800439c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800439e:	f042 0208 	orr.w	r2, r2, #8
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
 80043a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a6:	f002 0208 	and.w	r2, r2, #8
 80043aa:	9205      	str	r2, [sp, #20]
 80043ac:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80043ae:	9406      	str	r4, [sp, #24]
 80043b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
 80043b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ba:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80043be:	9206      	str	r2, [sp, #24]
 80043c0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043c2:	9407      	str	r4, [sp, #28]
 80043c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c6:	f042 0220 	orr.w	r2, r2, #32
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
 80043cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ce:	f002 0220 	and.w	r2, r2, #32
 80043d2:	9207      	str	r2, [sp, #28]
 80043d4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80043d6:	9408      	str	r4, [sp, #32]
 80043d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
 80043e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80043e6:	9208      	str	r2, [sp, #32]
 80043e8:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043ea:	9409      	str	r4, [sp, #36]	; 0x24
 80043ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
 80043f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80043fa:	9209      	str	r2, [sp, #36]	; 0x24
 80043fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80043fe:	940a      	str	r4, [sp, #40]	; 0x28
 8004400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800440e:	930a      	str	r3, [sp, #40]	; 0x28
 8004410:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8004412:	4f53      	ldr	r7, [pc, #332]	; (8004560 <MX_GPIO_Init+0x234>)
 8004414:	4622      	mov	r2, r4
 8004416:	210c      	movs	r1, #12
 8004418:	4638      	mov	r0, r7
 800441a:	f7fc fc25 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800441e:	4622      	mov	r2, r4
 8004420:	2130      	movs	r1, #48	; 0x30
 8004422:	4850      	ldr	r0, [pc, #320]	; (8004564 <MX_GPIO_Init+0x238>)
 8004424:	f7fc fc20 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8004428:	4622      	mov	r2, r4
 800442a:	2108      	movs	r1, #8
 800442c:	484e      	ldr	r0, [pc, #312]	; (8004568 <MX_GPIO_Init+0x23c>)
 800442e:	f7fc fc1b 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8004432:	4622      	mov	r2, r4
 8004434:	2140      	movs	r1, #64	; 0x40
 8004436:	484d      	ldr	r0, [pc, #308]	; (800456c <MX_GPIO_Init+0x240>)
 8004438:	f7fc fc16 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 800443c:	4e4c      	ldr	r6, [pc, #304]	; (8004570 <MX_GPIO_Init+0x244>)
 800443e:	4622      	mov	r2, r4
 8004440:	2105      	movs	r1, #5
 8004442:	4630      	mov	r0, r6
 8004444:	f7fc fc10 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8004448:	4622      	mov	r2, r4
 800444a:	2180      	movs	r1, #128	; 0x80
 800444c:	4849      	ldr	r0, [pc, #292]	; (8004574 <MX_GPIO_Init+0x248>)
 800444e:	f7fc fc0b 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8004452:	4622      	mov	r2, r4
 8004454:	2108      	movs	r1, #8
 8004456:	4848      	ldr	r0, [pc, #288]	; (8004578 <MX_GPIO_Init+0x24c>)
 8004458:	f7fc fc06 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 800445c:	230c      	movs	r3, #12
 800445e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004460:	2501      	movs	r5, #1
 8004462:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004464:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004466:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004468:	a90b      	add	r1, sp, #44	; 0x2c
 800446a:	4638      	mov	r0, r7
 800446c:	f7fc fa68 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8004470:	2708      	movs	r7, #8
 8004472:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004474:	f04f 0802 	mov.w	r8, #2
 8004478:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004480:	2306      	movs	r3, #6
 8004482:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8004484:	a90b      	add	r1, sp, #44	; 0x2c
 8004486:	4630      	mov	r0, r6
 8004488:	f7fc fa5a 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 800448c:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8004490:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004494:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8004580 <MX_GPIO_Init+0x254>
 8004498:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800449e:	a90b      	add	r1, sp, #44	; 0x2c
 80044a0:	4630      	mov	r0, r6
 80044a2:	f7fc fa4d 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80044a6:	2330      	movs	r3, #48	; 0x30
 80044a8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80044aa:	f04f 0911 	mov.w	r9, #17
 80044ae:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b4:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044b6:	a90b      	add	r1, sp, #44	; 0x2c
 80044b8:	482a      	ldr	r0, [pc, #168]	; (8004564 <MX_GPIO_Init+0x238>)
 80044ba:	f7fc fa41 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 80044be:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80044c0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c6:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80044c8:	a90b      	add	r1, sp, #44	; 0x2c
 80044ca:	4827      	ldr	r0, [pc, #156]	; (8004568 <MX_GPIO_Init+0x23c>)
 80044cc:	f7fc fa38 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80044d0:	2340      	movs	r3, #64	; 0x40
 80044d2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80044d4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044da:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80044dc:	a90b      	add	r1, sp, #44	; 0x2c
 80044de:	4823      	ldr	r0, [pc, #140]	; (800456c <MX_GPIO_Init+0x240>)
 80044e0:	f7fc fa2e 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 80044e4:	2305      	movs	r3, #5
 80044e6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ea:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ec:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ee:	a90b      	add	r1, sp, #44	; 0x2c
 80044f0:	4630      	mov	r0, r6
 80044f2:	f7fc fa25 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 80044f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044fa:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004500:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004502:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004504:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8004508:	a90b      	add	r1, sp, #44	; 0x2c
 800450a:	4816      	ldr	r0, [pc, #88]	; (8004564 <MX_GPIO_Init+0x238>)
 800450c:	f7fc fa18 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8004510:	2304      	movs	r3, #4
 8004512:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004514:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004516:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8004518:	a90b      	add	r1, sp, #44	; 0x2c
 800451a:	4814      	ldr	r0, [pc, #80]	; (800456c <MX_GPIO_Init+0x240>)
 800451c:	f7fc fa10 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8004520:	2320      	movs	r3, #32
 8004522:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004524:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004528:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800452a:	a90b      	add	r1, sp, #44	; 0x2c
 800452c:	4813      	ldr	r0, [pc, #76]	; (800457c <MX_GPIO_Init+0x250>)
 800452e:	f7fc fa07 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004532:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004536:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004538:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800453a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800453c:	a90b      	add	r1, sp, #44	; 0x2c
 800453e:	480d      	ldr	r0, [pc, #52]	; (8004574 <MX_GPIO_Init+0x248>)
 8004540:	f7fc f9fe 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8004544:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004546:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004548:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800454a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800454c:	a90b      	add	r1, sp, #44	; 0x2c
 800454e:	480a      	ldr	r0, [pc, #40]	; (8004578 <MX_GPIO_Init+0x24c>)
 8004550:	f7fc f9f6 	bl	8000940 <HAL_GPIO_Init>

}
 8004554:	b011      	add	sp, #68	; 0x44
 8004556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800
 8004560:	40021000 	.word	0x40021000
 8004564:	40020c00 	.word	0x40020c00
 8004568:	40022800 	.word	0x40022800
 800456c:	40021800 	.word	0x40021800
 8004570:	40020400 	.word	0x40020400
 8004574:	40021c00 	.word	0x40021c00
 8004578:	40020000 	.word	0x40020000
 800457c:	40022400 	.word	0x40022400
 8004580:	10110000 	.word	0x10110000

08004584 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004584:	e7fe      	b.n	8004584 <_Error_Handler>
	...

08004588 <SystemClock_Config>:
{
 8004588:	b500      	push	{lr}
 800458a:	b0a5      	sub	sp, #148	; 0x94
  __HAL_RCC_PWR_CLK_ENABLE();
 800458c:	2100      	movs	r1, #0
 800458e:	9101      	str	r1, [sp, #4]
 8004590:	4b3e      	ldr	r3, [pc, #248]	; (800468c <SystemClock_Config+0x104>)
 8004592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004594:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004598:	641a      	str	r2, [r3, #64]	; 0x40
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045a4:	9102      	str	r1, [sp, #8]
 80045a6:	4b3a      	ldr	r3, [pc, #232]	; (8004690 <SystemClock_Config+0x108>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80045b6:	9302      	str	r3, [sp, #8]
 80045b8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045ba:	2301      	movs	r3, #1
 80045bc:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045c2:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045c4:	2302      	movs	r3, #2
 80045c6:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80045cc:	921e      	str	r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 4;
 80045ce:	2204      	movs	r2, #4
 80045d0:	921f      	str	r2, [sp, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80045d2:	22b4      	movs	r2, #180	; 0xb4
 80045d4:	9220      	str	r2, [sp, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045d6:	9321      	str	r3, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80045d8:	2306      	movs	r3, #6
 80045da:	9322      	str	r3, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 6;
 80045dc:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045de:	a817      	add	r0, sp, #92	; 0x5c
 80045e0:	f7fd fc5e 	bl	8001ea0 <HAL_RCC_OscConfig>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d141      	bne.n	800466c <SystemClock_Config+0xe4>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80045e8:	f7fc ffa8 	bl	800153c <HAL_PWREx_EnableOverDrive>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d141      	bne.n	8004674 <SystemClock_Config+0xec>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045f0:	230f      	movs	r3, #15
 80045f2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045f4:	2302      	movs	r3, #2
 80045f6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045f8:	2300      	movs	r3, #0
 80045fa:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80045fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004600:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004606:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004608:	2105      	movs	r1, #5
 800460a:	a812      	add	r0, sp, #72	; 0x48
 800460c:	f7fd f840 	bl	8001690 <HAL_RCC_ClockConfig>
 8004610:	2800      	cmp	r0, #0
 8004612:	d133      	bne.n	800467c <SystemClock_Config+0xf4>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 8004614:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8004618:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 800461a:	2390      	movs	r3, #144	; 0x90
 800461c:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800461e:	2302      	movs	r3, #2
 8004620:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004622:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8004624:	2306      	movs	r3, #6
 8004626:	9308      	str	r3, [sp, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004628:	2301      	movs	r3, #1
 800462a:	930c      	str	r3, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800462c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004630:	930d      	str	r3, [sp, #52]	; 0x34
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8004632:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004636:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8004638:	2300      	movs	r3, #0
 800463a:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800463c:	a803      	add	r0, sp, #12
 800463e:	f7fd f973 	bl	8001928 <HAL_RCCEx_PeriphCLKConfig>
 8004642:	b9f8      	cbnz	r0, 8004684 <SystemClock_Config+0xfc>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004644:	f7fd f92c 	bl	80018a0 <HAL_RCC_GetHCLKFreq>
 8004648:	4b12      	ldr	r3, [pc, #72]	; (8004694 <SystemClock_Config+0x10c>)
 800464a:	fba3 3000 	umull	r3, r0, r3, r0
 800464e:	0980      	lsrs	r0, r0, #6
 8004650:	f7fc f802 	bl	8000658 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004654:	2004      	movs	r0, #4
 8004656:	f7fc f815 	bl	8000684 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800465a:	2200      	movs	r2, #0
 800465c:	210f      	movs	r1, #15
 800465e:	f04f 30ff 	mov.w	r0, #4294967295
 8004662:	f7fb ff9f 	bl	80005a4 <HAL_NVIC_SetPriority>
}
 8004666:	b025      	add	sp, #148	; 0x94
 8004668:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 800466c:	216a      	movs	r1, #106	; 0x6a
 800466e:	480a      	ldr	r0, [pc, #40]	; (8004698 <SystemClock_Config+0x110>)
 8004670:	f7ff ff88 	bl	8004584 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004674:	2171      	movs	r1, #113	; 0x71
 8004676:	4808      	ldr	r0, [pc, #32]	; (8004698 <SystemClock_Config+0x110>)
 8004678:	f7ff ff84 	bl	8004584 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800467c:	217f      	movs	r1, #127	; 0x7f
 800467e:	4806      	ldr	r0, [pc, #24]	; (8004698 <SystemClock_Config+0x110>)
 8004680:	f7ff ff80 	bl	8004584 <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8004684:	218e      	movs	r1, #142	; 0x8e
 8004686:	4804      	ldr	r0, [pc, #16]	; (8004698 <SystemClock_Config+0x110>)
 8004688:	f7ff ff7c 	bl	8004584 <_Error_Handler>
 800468c:	40023800 	.word	0x40023800
 8004690:	40007000 	.word	0x40007000
 8004694:	10624dd3 	.word	0x10624dd3
 8004698:	08004d7c 	.word	0x08004d7c

0800469c <main>:
{
 800469c:	b500      	push	{lr}
 800469e:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80046a0:	f7fb ff36 	bl	8000510 <HAL_Init>
  SystemClock_Config();
 80046a4:	f7ff ff70 	bl	8004588 <SystemClock_Config>
  MX_GPIO_Init();
 80046a8:	f7ff fe40 	bl	800432c <MX_GPIO_Init>
  MX_CRC_Init();
 80046ac:	f7ff fd50 	bl	8004150 <MX_CRC_Init>
  MX_TIM1_Init();
 80046b0:	f000 f8d6 	bl	8004860 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80046b4:	f000 f924 	bl	8004900 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80046b8:	f000 f940 	bl	800493c <MX_USART6_UART_Init>
  MX_FREERTOS_Init();
 80046bc:	f7ff fe04 	bl	80042c8 <MX_FREERTOS_Init>
  osKernelStart();
 80046c0:	f7fe fec0 	bl	8003444 <osKernelStart>
  char buff[] = "hello usart3 with hal library...";
 80046c4:	ac01      	add	r4, sp, #4
 80046c6:	4d06      	ldr	r5, [pc, #24]	; (80046e0 <main+0x44>)
 80046c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046d0:	682b      	ldr	r3, [r5, #0]
 80046d2:	7023      	strb	r3, [r4, #0]
	  HAL_UART_SendString(USART3, buff);
 80046d4:	a901      	add	r1, sp, #4
 80046d6:	4803      	ldr	r0, [pc, #12]	; (80046e4 <main+0x48>)
 80046d8:	f000 f99c 	bl	8004a14 <HAL_UART_SendString>
 80046dc:	e7fa      	b.n	80046d4 <main+0x38>
 80046de:	bf00      	nop
 80046e0:	08004d8c 	.word	0x08004d8c
 80046e4:	40004800 	.word	0x40004800

080046e8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
 80046e8:	4770      	bx	lr

080046ea <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046ea:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046ec:	2003      	movs	r0, #3
 80046ee:	f7fb ff3b 	bl	8000568 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80046f2:	2200      	movs	r2, #0
 80046f4:	4611      	mov	r1, r2
 80046f6:	f06f 000b 	mvn.w	r0, #11
 80046fa:	f7fb ff53 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80046fe:	2200      	movs	r2, #0
 8004700:	4611      	mov	r1, r2
 8004702:	f06f 000a 	mvn.w	r0, #10
 8004706:	f7fb ff4d 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800470a:	2200      	movs	r2, #0
 800470c:	4611      	mov	r1, r2
 800470e:	f06f 0009 	mvn.w	r0, #9
 8004712:	f7fb ff47 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004716:	2200      	movs	r2, #0
 8004718:	4611      	mov	r1, r2
 800471a:	f06f 0004 	mvn.w	r0, #4
 800471e:	f7fb ff41 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004722:	2200      	movs	r2, #0
 8004724:	4611      	mov	r1, r2
 8004726:	f06f 0003 	mvn.w	r0, #3
 800472a:	f7fb ff3b 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800472e:	2200      	movs	r2, #0
 8004730:	4611      	mov	r1, r2
 8004732:	f06f 0001 	mvn.w	r0, #1
 8004736:	f7fb ff35 	bl	80005a4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800473a:	2200      	movs	r2, #0
 800473c:	210f      	movs	r1, #15
 800473e:	f04f 30ff 	mov.w	r0, #4294967295
 8004742:	f7fb ff2f 	bl	80005a4 <HAL_NVIC_SetPriority>
 8004746:	bd08      	pop	{r3, pc}

08004748 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004748:	b510      	push	{r4, lr}
 800474a:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0); 
 800474c:	2200      	movs	r2, #0
 800474e:	4601      	mov	r1, r0
 8004750:	f04f 30ff 	mov.w	r0, #4294967295
 8004754:	f7fb ff26 	bl	80005a4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(SysTick_IRQn); 
 8004758:	f04f 30ff 	mov.w	r0, #4294967295
 800475c:	f7fb ff66 	bl	800062c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004760:	2400      	movs	r4, #0
 8004762:	9401      	str	r4, [sp, #4]
 8004764:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <HAL_InitTick+0x70>)
 8004766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004768:	f042 0210 	orr.w	r2, r2, #16
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004778:	a902      	add	r1, sp, #8
 800477a:	a803      	add	r0, sp, #12
 800477c:	f7fd f8b6 	bl	80018ec <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004780:	f7fd f894 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8004784:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004786:	480d      	ldr	r0, [pc, #52]	; (80047bc <HAL_InitTick+0x74>)
 8004788:	fba0 2303 	umull	r2, r3, r0, r3
 800478c:	0c9b      	lsrs	r3, r3, #18
 800478e:	3b01      	subs	r3, #1
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004790:	480b      	ldr	r0, [pc, #44]	; (80047c0 <HAL_InitTick+0x78>)
 8004792:	4a0c      	ldr	r2, [pc, #48]	; (80047c4 <HAL_InitTick+0x7c>)
 8004794:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8004796:	f240 32e7 	movw	r2, #999	; 0x3e7
 800479a:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800479c:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800479e:	6104      	str	r4, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047a0:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80047a2:	f7fe f9c5 	bl	8002b30 <HAL_TIM_Base_Init>
 80047a6:	b110      	cbz	r0, 80047ae <HAL_InitTick+0x66>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80047a8:	2001      	movs	r0, #1
}
 80047aa:	b008      	add	sp, #32
 80047ac:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 80047ae:	4804      	ldr	r0, [pc, #16]	; (80047c0 <HAL_InitTick+0x78>)
 80047b0:	f7fd fe08 	bl	80023c4 <HAL_TIM_Base_Start_IT>
 80047b4:	e7f9      	b.n	80047aa <HAL_InitTick+0x62>
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800
 80047bc:	431bde83 	.word	0x431bde83
 80047c0:	20008294 	.word	0x20008294
 80047c4:	40001000 	.word	0x40001000

080047c8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80047c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047ca:	f7fb febb 	bl	8000544 <HAL_IncTick>
  osSystickHandler();
 80047ce:	f7fe fe61 	bl	8003494 <osSystickHandler>
 80047d2:	bd08      	pop	{r3, pc}

080047d4 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 80047d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80047d6:	4802      	ldr	r0, [pc, #8]	; (80047e0 <OTG_FS_IRQHandler+0xc>)
 80047d8:	f7fc fd9e 	bl	8001318 <HAL_HCD_IRQHandler>
 80047dc:	bd08      	pop	{r3, pc}
 80047de:	bf00      	nop
 80047e0:	2000838c 	.word	0x2000838c

080047e4 <LTDC_IRQHandler>:

/**
* @brief This function handles LTDC global interrupt.
*/
void LTDC_IRQHandler(void)
{
 80047e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80047e6:	4802      	ldr	r0, [pc, #8]	; (80047f0 <LTDC_IRQHandler+0xc>)
 80047e8:	f7fc fe3a 	bl	8001460 <HAL_LTDC_IRQHandler>
 80047ec:	bd08      	pop	{r3, pc}
 80047ee:	bf00      	nop
 80047f0:	200081ec 	.word	0x200081ec

080047f4 <DMA2D_IRQHandler>:

/**
* @brief This function handles DMA2D global interrupt.
*/
void DMA2D_IRQHandler(void)
{
 80047f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80047f6:	4802      	ldr	r0, [pc, #8]	; (8004800 <DMA2D_IRQHandler+0xc>)
 80047f8:	f7fb ff82 	bl	8000700 <HAL_DMA2D_IRQHandler>
 80047fc:	bd08      	pop	{r3, pc}
 80047fe:	bf00      	nop
 8004800:	20008184 	.word	0x20008184

08004804 <DSI_IRQHandler>:

/**
* @brief This function handles DSI global interrupt.
*/
void DSI_IRQHandler(void)
{
 8004804:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8004806:	4802      	ldr	r0, [pc, #8]	; (8004810 <DSI_IRQHandler+0xc>)
 8004808:	f7fc f81b 	bl	8000842 <HAL_DSI_IRQHandler>
 800480c:	bd08      	pop	{r3, pc}
 800480e:	bf00      	nop
 8004810:	200081c4 	.word	0x200081c4

08004814 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004814:	490f      	ldr	r1, [pc, #60]	; (8004854 <SystemInit+0x40>)
 8004816:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800481a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004822:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <SystemInit+0x44>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800482c:	2000      	movs	r0, #0
 800482e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004836:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800483a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800483c:	4a07      	ldr	r2, [pc, #28]	; (800485c <SystemInit+0x48>)
 800483e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004846:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004848:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800484a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800484e:	608b      	str	r3, [r1, #8]
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	e000ed00 	.word	0xe000ed00
 8004858:	40023800 	.word	0x40023800
 800485c:	24003010 	.word	0x24003010

08004860 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004860:	b500      	push	{lr}
 8004862:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 8004864:	4817      	ldr	r0, [pc, #92]	; (80048c4 <MX_TIM1_Init+0x64>)
 8004866:	4b18      	ldr	r3, [pc, #96]	; (80048c8 <MX_TIM1_Init+0x68>)
 8004868:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 800486a:	2300      	movs	r3, #0
 800486c:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800486e:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 0;
 8004870:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004872:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8004874:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004876:	f7fe f95b 	bl	8002b30 <HAL_TIM_Base_Init>
 800487a:	b998      	cbnz	r0, 80048a4 <MX_TIM1_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800487c:	a906      	add	r1, sp, #24
 800487e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004882:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004886:	480f      	ldr	r0, [pc, #60]	; (80048c4 <MX_TIM1_Init+0x64>)
 8004888:	f7fd fdea 	bl	8002460 <HAL_TIM_ConfigClockSource>
 800488c:	b978      	cbnz	r0, 80048ae <MX_TIM1_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800488e:	2300      	movs	r3, #0
 8004890:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004892:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004894:	4669      	mov	r1, sp
 8004896:	480b      	ldr	r0, [pc, #44]	; (80048c4 <MX_TIM1_Init+0x64>)
 8004898:	f7fe f9be 	bl	8002c18 <HAL_TIMEx_MasterConfigSynchronization>
 800489c:	b960      	cbnz	r0, 80048b8 <MX_TIM1_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 800489e:	b007      	add	sp, #28
 80048a0:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80048a4:	211a      	movs	r1, #26
 80048a6:	4809      	ldr	r0, [pc, #36]	; (80048cc <MX_TIM1_Init+0x6c>)
 80048a8:	f7ff fe6c 	bl	8004584 <_Error_Handler>
 80048ac:	e7e6      	b.n	800487c <MX_TIM1_Init+0x1c>
    _Error_Handler(__FILE__, __LINE__);
 80048ae:	2120      	movs	r1, #32
 80048b0:	4806      	ldr	r0, [pc, #24]	; (80048cc <MX_TIM1_Init+0x6c>)
 80048b2:	f7ff fe67 	bl	8004584 <_Error_Handler>
 80048b6:	e7ea      	b.n	800488e <MX_TIM1_Init+0x2e>
    _Error_Handler(__FILE__, __LINE__);
 80048b8:	2127      	movs	r1, #39	; 0x27
 80048ba:	4804      	ldr	r0, [pc, #16]	; (80048cc <MX_TIM1_Init+0x6c>)
 80048bc:	f7ff fe62 	bl	8004584 <_Error_Handler>
}
 80048c0:	e7ed      	b.n	800489e <MX_TIM1_Init+0x3e>
 80048c2:	bf00      	nop
 80048c4:	200082d0 	.word	0x200082d0
 80048c8:	40010000 	.word	0x40010000
 80048cc:	08004db0 	.word	0x08004db0

080048d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 80048d0:	6802      	ldr	r2, [r0, #0]
 80048d2:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <HAL_TIM_Base_MspInit+0x28>)
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d000      	beq.n	80048da <HAL_TIM_Base_MspInit+0xa>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80048d8:	4770      	bx	lr
{
 80048da:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048dc:	2300      	movs	r3, #0
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <HAL_TIM_Base_MspInit+0x2c>)
 80048e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048e4:	f042 0201 	orr.w	r2, r2, #1
 80048e8:	645a      	str	r2, [r3, #68]	; 0x44
 80048ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	9b01      	ldr	r3, [sp, #4]
}
 80048f4:	b002      	add	sp, #8
 80048f6:	e7ef      	b.n	80048d8 <HAL_TIM_Base_MspInit+0x8>
 80048f8:	40010000 	.word	0x40010000
 80048fc:	40023800 	.word	0x40023800

08004900 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004900:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8004902:	480b      	ldr	r0, [pc, #44]	; (8004930 <MX_USART3_UART_Init+0x30>)
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <MX_USART3_UART_Init+0x34>)
 8004906:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8004908:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800490c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800490e:	2300      	movs	r3, #0
 8004910:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004912:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004914:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004916:	220c      	movs	r2, #12
 8004918:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800491a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800491c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800491e:	f7fe fbbf 	bl	80030a0 <HAL_UART_Init>
 8004922:	b900      	cbnz	r0, 8004926 <MX_USART3_UART_Init+0x26>
 8004924:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8004926:	211e      	movs	r1, #30
 8004928:	4803      	ldr	r0, [pc, #12]	; (8004938 <MX_USART3_UART_Init+0x38>)
 800492a:	f7ff fe2b 	bl	8004584 <_Error_Handler>
  }

}
 800492e:	e7f9      	b.n	8004924 <MX_USART3_UART_Init+0x24>
 8004930:	2000830c 	.word	0x2000830c
 8004934:	40004800 	.word	0x40004800
 8004938:	08004dc0 	.word	0x08004dc0

0800493c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800493c:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 800493e:	480b      	ldr	r0, [pc, #44]	; (800496c <MX_USART6_UART_Init+0x30>)
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <MX_USART6_UART_Init+0x34>)
 8004942:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8004944:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004948:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800494a:	2300      	movs	r3, #0
 800494c:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800494e:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004950:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004952:	220c      	movs	r2, #12
 8004954:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004956:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004958:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800495a:	f7fe fba1 	bl	80030a0 <HAL_UART_Init>
 800495e:	b900      	cbnz	r0, 8004962 <MX_USART6_UART_Init+0x26>
 8004960:	bd08      	pop	{r3, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8004962:	2131      	movs	r1, #49	; 0x31
 8004964:	4803      	ldr	r0, [pc, #12]	; (8004974 <MX_USART6_UART_Init+0x38>)
 8004966:	f7ff fe0d 	bl	8004584 <_Error_Handler>
  }

}
 800496a:	e7f9      	b.n	8004960 <MX_USART6_UART_Init+0x24>
 800496c:	2000834c 	.word	0x2000834c
 8004970:	40011400 	.word	0x40011400
 8004974:	08004dc0 	.word	0x08004dc0

08004978 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004978:	b500      	push	{lr}
 800497a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART3)
 800497c:	6803      	ldr	r3, [r0, #0]
 800497e:	4a20      	ldr	r2, [pc, #128]	; (8004a00 <HAL_UART_MspInit+0x88>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d005      	beq.n	8004990 <HAL_UART_MspInit+0x18>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(uartHandle->Instance==USART6)
 8004984:	4a1f      	ldr	r2, [pc, #124]	; (8004a04 <HAL_UART_MspInit+0x8c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d01e      	beq.n	80049c8 <HAL_UART_MspInit+0x50>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800498a:	b009      	add	sp, #36	; 0x24
 800498c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 8004990:	2300      	movs	r3, #0
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <HAL_UART_MspInit+0x90>)
 8004996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004998:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800499c:	641a      	str	r2, [r3, #64]	; 0x40
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80049a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80049ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ae:	2302      	movs	r3, #2
 80049b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049b2:	2301      	movs	r3, #1
 80049b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049b6:	2303      	movs	r3, #3
 80049b8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80049ba:	2307      	movs	r3, #7
 80049bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049be:	a903      	add	r1, sp, #12
 80049c0:	4812      	ldr	r0, [pc, #72]	; (8004a0c <HAL_UART_MspInit+0x94>)
 80049c2:	f7fb ffbd 	bl	8000940 <HAL_GPIO_Init>
 80049c6:	e7e0      	b.n	800498a <HAL_UART_MspInit+0x12>
    __HAL_RCC_USART6_CLK_ENABLE();
 80049c8:	2100      	movs	r1, #0
 80049ca:	9102      	str	r1, [sp, #8]
 80049cc:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <HAL_UART_MspInit+0x90>)
 80049ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049d0:	f042 0220 	orr.w	r2, r2, #32
 80049d4:	645a      	str	r2, [r3, #68]	; 0x44
 80049d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	9302      	str	r3, [sp, #8]
 80049de:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 80049e0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80049e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e6:	2302      	movs	r3, #2
 80049e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ea:	9105      	str	r1, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ec:	2303      	movs	r3, #3
 80049ee:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80049f0:	2308      	movs	r3, #8
 80049f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80049f4:	a903      	add	r1, sp, #12
 80049f6:	4806      	ldr	r0, [pc, #24]	; (8004a10 <HAL_UART_MspInit+0x98>)
 80049f8:	f7fb ffa2 	bl	8000940 <HAL_GPIO_Init>
}
 80049fc:	e7c5      	b.n	800498a <HAL_UART_MspInit+0x12>
 80049fe:	bf00      	nop
 8004a00:	40004800 	.word	0x40004800
 8004a04:	40011400 	.word	0x40011400
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	40020400 	.word	0x40020400
 8004a10:	40021800 	.word	0x40021800

08004a14 <HAL_UART_SendString>:

/* USER CODE BEGIN 1 */
int HAL_UART_SendString(USART_TypeDef* uartHandle, char *str)
{
	int sendLength = 0;
	if(USART3 == uartHandle)
 8004a14:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <HAL_UART_SendString+0x38>)
 8004a16:	4298      	cmp	r0, r3
 8004a18:	d00b      	beq.n	8004a32 <HAL_UART_SendString+0x1e>
			//FIX;
			sendLength++;
		}
		return sendLength;
	}
	else if(USART6 == uartHandle)
 8004a1a:	4b0d      	ldr	r3, [pc, #52]	; (8004a50 <HAL_UART_SendString+0x3c>)
 8004a1c:	4298      	cmp	r0, r3
 8004a1e:	d10a      	bne.n	8004a36 <HAL_UART_SendString+0x22>
 8004a20:	2000      	movs	r0, #0
 8004a22:	e00d      	b.n	8004a40 <HAL_UART_SendString+0x2c>
			sendLength++;
 8004a24:	3001      	adds	r0, #1
		while('\0' != *str++)
 8004a26:	4611      	mov	r1, r2
 8004a28:	1c4a      	adds	r2, r1, #1
 8004a2a:	780b      	ldrb	r3, [r1, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f9      	bne.n	8004a24 <HAL_UART_SendString+0x10>
 8004a30:	4770      	bx	lr
 8004a32:	2000      	movs	r0, #0
 8004a34:	e7f8      	b.n	8004a28 <HAL_UART_SendString+0x14>
			sendLength++;
		}
		return sendLength;
	}
	else
		return -1;
 8004a36:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3a:	4770      	bx	lr
			sendLength++;
 8004a3c:	3001      	adds	r0, #1
		while('\0' != *str++)
 8004a3e:	4611      	mov	r1, r2
 8004a40:	1c4a      	adds	r2, r1, #1
 8004a42:	780b      	ldrb	r3, [r1, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1f9      	bne.n	8004a3c <HAL_UART_SendString+0x28>
}
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40004800 	.word	0x40004800
 8004a50:	40011400 	.word	0x40011400

08004a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004a58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004a5a:	e003      	b.n	8004a64 <LoopCopyDataInit>

08004a5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004a5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004a60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004a62:	3104      	adds	r1, #4

08004a64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004a64:	480b      	ldr	r0, [pc, #44]	; (8004a94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004a66:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a6c:	d3f6      	bcc.n	8004a5c <CopyDataInit>
  ldr  r2, =_sbss
 8004a6e:	4a0b      	ldr	r2, [pc, #44]	; (8004a9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004a70:	e002      	b.n	8004a78 <LoopFillZerobss>

08004a72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004a72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a74:	f842 3b04 	str.w	r3, [r2], #4

08004a78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004a78:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004a7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a7c:	d3f9      	bcc.n	8004a72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a7e:	f7ff fec9 	bl	8004814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a82:	f000 f811 	bl	8004aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a86:	f7ff fe09 	bl	800469c <main>
  bx  lr    
 8004a8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004a8c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004a90:	08004de0 	.word	0x08004de0
  ldr  r0, =_sdata
 8004a94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a98:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8004a9c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8004aa0:	20008624 	.word	0x20008624

08004aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004aa4:	e7fe      	b.n	8004aa4 <ADC_IRQHandler>
	...

08004aa8 <__libc_init_array>:
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	4e0d      	ldr	r6, [pc, #52]	; (8004ae0 <__libc_init_array+0x38>)
 8004aac:	4c0d      	ldr	r4, [pc, #52]	; (8004ae4 <__libc_init_array+0x3c>)
 8004aae:	1ba4      	subs	r4, r4, r6
 8004ab0:	10a4      	asrs	r4, r4, #2
 8004ab2:	2500      	movs	r5, #0
 8004ab4:	42a5      	cmp	r5, r4
 8004ab6:	d109      	bne.n	8004acc <__libc_init_array+0x24>
 8004ab8:	4e0b      	ldr	r6, [pc, #44]	; (8004ae8 <__libc_init_array+0x40>)
 8004aba:	4c0c      	ldr	r4, [pc, #48]	; (8004aec <__libc_init_array+0x44>)
 8004abc:	f000 f820 	bl	8004b00 <_init>
 8004ac0:	1ba4      	subs	r4, r4, r6
 8004ac2:	10a4      	asrs	r4, r4, #2
 8004ac4:	2500      	movs	r5, #0
 8004ac6:	42a5      	cmp	r5, r4
 8004ac8:	d105      	bne.n	8004ad6 <__libc_init_array+0x2e>
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
 8004acc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ad0:	4798      	blx	r3
 8004ad2:	3501      	adds	r5, #1
 8004ad4:	e7ee      	b.n	8004ab4 <__libc_init_array+0xc>
 8004ad6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ada:	4798      	blx	r3
 8004adc:	3501      	adds	r5, #1
 8004ade:	e7f2      	b.n	8004ac6 <__libc_init_array+0x1e>
 8004ae0:	08004dd8 	.word	0x08004dd8
 8004ae4:	08004dd8 	.word	0x08004dd8
 8004ae8:	08004dd8 	.word	0x08004dd8
 8004aec:	08004ddc 	.word	0x08004ddc

08004af0 <memset>:
 8004af0:	4402      	add	r2, r0
 8004af2:	4603      	mov	r3, r0
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d100      	bne.n	8004afa <memset+0xa>
 8004af8:	4770      	bx	lr
 8004afa:	f803 1b01 	strb.w	r1, [r3], #1
 8004afe:	e7f9      	b.n	8004af4 <memset+0x4>

08004b00 <_init>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	bf00      	nop
 8004b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b06:	bc08      	pop	{r3}
 8004b08:	469e      	mov	lr, r3
 8004b0a:	4770      	bx	lr

08004b0c <_fini>:
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0e:	bf00      	nop
 8004b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b12:	bc08      	pop	{r3}
 8004b14:	469e      	mov	lr, r3
 8004b16:	4770      	bx	lr
